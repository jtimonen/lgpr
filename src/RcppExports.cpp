// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "lgpr_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// STAN_vectorsum
Eigen::Matrix<double, Eigen::Dynamic, 1> STAN_vectorsum(const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& vecs, const int& L, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_vectorsum(SEXP vecsSEXP, SEXP LSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& >::type vecs(vecsSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_vectorsum(vecs, L, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_matrix_array_sum
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> STAN_matrix_array_sum(const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& K, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_matrix_array_sum(SEXP KSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& >::type K(KSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_matrix_array_sum(K, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_warp_input
Eigen::Matrix<double, Eigen::Dynamic, 1> STAN_warp_input(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x, const double& a, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_warp_input(SEXP xSEXP, SEXP aSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_warp_input(x, a, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_var_mask
Eigen::Matrix<double, Eigen::Dynamic, 1> STAN_var_mask(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x, const double& a, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_var_mask(SEXP xSEXP, SEXP aSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_var_mask(x, a, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_expand
Eigen::Matrix<double, Eigen::Dynamic, 1> STAN_expand(const Eigen::Matrix<double, Eigen::Dynamic, 1>& v, const std::vector<int>& idx_expand, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_expand(SEXP vSEXP, SEXP idx_expandSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type idx_expand(idx_expandSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_expand(v, idx_expand, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_edit_x_cont
Eigen::Matrix<double, Eigen::Dynamic, 1> STAN_edit_x_cont(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x_cont, const std::vector<int>& idx_expand, const Eigen::Matrix<double, Eigen::Dynamic, 1>& teff_obs, const Eigen::Matrix<double, Eigen::Dynamic, 1>& teff, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_edit_x_cont(SEXP x_contSEXP, SEXP idx_expandSEXP, SEXP teff_obsSEXP, SEXP teffSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type x_cont(x_contSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type idx_expand(idx_expandSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type teff_obs(teff_obsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type teff(teffSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_edit_x_cont(x_cont, idx_expand, teff_obs, teff, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_kernel_zerosum
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> STAN_kernel_zerosum(const std::vector<int>& x1, const std::vector<int>& x2, const int& num_cat, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_kernel_zerosum(SEXP x1SEXP, SEXP x2SEXP, SEXP num_catSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< const int& >::type num_cat(num_catSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_kernel_zerosum(x1, x2, num_cat, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_kernel_cat
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> STAN_kernel_cat(const std::vector<int>& x1, const std::vector<int>& x2, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_kernel_cat(SEXP x1SEXP, SEXP x2SEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_kernel_cat(x1, x2, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_kernel_bin
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> STAN_kernel_bin(const std::vector<int>& x1, const std::vector<int>& x2, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_kernel_bin(SEXP x1SEXP, SEXP x2SEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_kernel_bin(x1, x2, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_kernel_const
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> STAN_kernel_const(const std::vector<int>& z1, const std::vector<int>& z2, const int& kernel_type, const int& num_cat, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_kernel_const(SEXP z1SEXP, SEXP z2SEXP, SEXP kernel_typeSEXP, SEXP num_catSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type z1(z1SEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type z2(z2SEXP);
    Rcpp::traits::input_parameter< const int& >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< const int& >::type num_cat(num_catSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_kernel_const(z1, z2, kernel_type, num_cat, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_kernel_const_all
std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > STAN_kernel_const_all(const int& n1, const int& n2, const std::vector<std::vector<int> >& Z1, const std::vector<std::vector<int> >& Z2, const std::vector<std::vector<int> >& X1_mask, const std::vector<std::vector<int> >& X2_mask, const std::vector<int>& num_levels, const std::vector<std::vector<int> >& components, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_kernel_const_all(SEXP n1SEXP, SEXP n2SEXP, SEXP Z1SEXP, SEXP Z2SEXP, SEXP X1_maskSEXP, SEXP X2_maskSEXP, SEXP num_levelsSEXP, SEXP componentsSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const int& >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type Z1(Z1SEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type Z2(Z2SEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type X1_mask(X1_maskSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type X2_mask(X2_maskSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type num_levels(num_levelsSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_kernel_const_all(n1, n2, Z1, Z2, X1_mask, X2_mask, num_levels, components, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_kernel_eq
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> STAN_kernel_eq(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x1, const Eigen::Matrix<double, Eigen::Dynamic, 1>& x2, const double& alpha, const double& ell, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_kernel_eq(SEXP x1SEXP, SEXP x2SEXP, SEXP alphaSEXP, SEXP ellSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type ell(ellSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_kernel_eq(x1, x2, alpha, ell, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_kernel_varmask
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> STAN_kernel_varmask(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x1, const Eigen::Matrix<double, Eigen::Dynamic, 1>& x2, const double& steepness, const std::vector<double>& vm_params, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_kernel_varmask(SEXP x1SEXP, SEXP x2SEXP, SEXP steepnessSEXP, SEXP vm_paramsSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< const double& >::type steepness(steepnessSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type vm_params(vm_paramsSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_kernel_varmask(x1, x2, steepness, vm_params, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_kernel_beta
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> STAN_kernel_beta(const Eigen::Matrix<double, Eigen::Dynamic, 1>& beta, const std::vector<int>& idx1_expand, const std::vector<int>& idx2_expand, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_kernel_beta(SEXP betaSEXP, SEXP idx1_expandSEXP, SEXP idx2_expandSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type idx1_expand(idx1_expandSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type idx2_expand(idx2_expandSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_kernel_beta(beta, idx1_expand, idx2_expand, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_kernel_all
std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > STAN_kernel_all(const int& n1, const int& n2, const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& K_const, const std::vector<std::vector<int> >& components, const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& X1, const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& X2, const std::vector<double>& X_scale, const std::vector<double>& alpha, const std::vector<double>& ell, const std::vector<double>& wrp, const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& beta, const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& teff, const std::vector<double>& vm_params, const std::vector<std::vector<int> >& beta_idx1, const std::vector<std::vector<int> >& beta_idx2, const std::vector<std::vector<int> >& teff_idx1, const std::vector<std::vector<int> >& teff_idx2, const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& teff_zero, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_kernel_all(SEXP n1SEXP, SEXP n2SEXP, SEXP K_constSEXP, SEXP componentsSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X_scaleSEXP, SEXP alphaSEXP, SEXP ellSEXP, SEXP wrpSEXP, SEXP betaSEXP, SEXP teffSEXP, SEXP vm_paramsSEXP, SEXP beta_idx1SEXP, SEXP beta_idx2SEXP, SEXP teff_idx1SEXP, SEXP teff_idx2SEXP, SEXP teff_zeroSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const int& >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& >::type K_const(K_constSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type X_scale(X_scaleSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type ell(ellSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type wrp(wrpSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& >::type teff(teffSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type vm_params(vm_paramsSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type beta_idx1(beta_idx1SEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type beta_idx2(beta_idx2SEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type teff_idx1(teff_idx1SEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type teff_idx2(teff_idx2SEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& >::type teff_zero(teff_zeroSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_kernel_all(n1, n2, K_const, components, X1, X2, X_scale, alpha, ell, wrp, beta, teff, vm_params, beta_idx1, beta_idx2, teff_idx1, teff_idx2, teff_zero, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_kernel_const_diag
Eigen::Matrix<double, Eigen::Dynamic, 1> STAN_kernel_const_diag(const std::vector<int>& z, const int& kernel_type, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_kernel_const_diag(SEXP zSEXP, SEXP kernel_typeSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const int& >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_kernel_const_diag(z, kernel_type, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_kernel_const_all_diag
std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > STAN_kernel_const_all_diag(const int& P, const std::vector<std::vector<int> >& Z, const std::vector<std::vector<int> >& X_mask, const std::vector<std::vector<int> >& components, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_kernel_const_all_diag(SEXP PSEXP, SEXP ZSEXP, SEXP X_maskSEXP, SEXP componentsSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type X_mask(X_maskSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_kernel_const_all_diag(P, Z, X_mask, components, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_kernel_eq_diag
Eigen::Matrix<double, Eigen::Dynamic, 1> STAN_kernel_eq_diag(const int& n, const double& alpha, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_kernel_eq_diag(SEXP nSEXP, SEXP alphaSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_kernel_eq_diag(n, alpha, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_kernel_varmask_diag
Eigen::Matrix<double, Eigen::Dynamic, 1> STAN_kernel_varmask_diag(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x, const double& steepness, const std::vector<double>& vm_params, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_kernel_varmask_diag(SEXP xSEXP, SEXP steepnessSEXP, SEXP vm_paramsSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type steepness(steepnessSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type vm_params(vm_paramsSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_kernel_varmask_diag(x, steepness, vm_params, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_kernel_beta_diag
Eigen::Matrix<double, Eigen::Dynamic, 1> STAN_kernel_beta_diag(const Eigen::Matrix<double, Eigen::Dynamic, 1>& beta, const std::vector<int>& idx_expand, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_kernel_beta_diag(SEXP betaSEXP, SEXP idx_expandSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type idx_expand(idx_expandSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_kernel_beta_diag(beta, idx_expand, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_kernel_all_diag
std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > STAN_kernel_all_diag(const int& n, const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& K_const_diag, const std::vector<std::vector<int> >& components, const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& X, const std::vector<double>& X_scale, const std::vector<double>& alpha, const std::vector<double>& wrp, const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& beta, const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& teff, const std::vector<double>& vm_params, const std::vector<std::vector<int> >& beta_idx, const std::vector<std::vector<int> >& teff_idx, const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& teff_zero, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_kernel_all_diag(SEXP nSEXP, SEXP K_const_diagSEXP, SEXP componentsSEXP, SEXP XSEXP, SEXP X_scaleSEXP, SEXP alphaSEXP, SEXP wrpSEXP, SEXP betaSEXP, SEXP teffSEXP, SEXP vm_paramsSEXP, SEXP beta_idxSEXP, SEXP teff_idxSEXP, SEXP teff_zeroSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& >::type K_const_diag(K_const_diagSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type X_scale(X_scaleSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type wrp(wrpSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& >::type teff(teffSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type vm_params(vm_paramsSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type beta_idx(beta_idxSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type teff_idx(teff_idxSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& >::type teff_zero(teff_zeroSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_kernel_all_diag(n, K_const_diag, components, X, X_scale, alpha, wrp, beta, teff, vm_params, beta_idx, teff_idx, teff_zero, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_log_prior
double STAN_log_prior(const double& x, const std::vector<int>& types, const std::vector<double>& p, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_log_prior(SEXP xSEXP, SEXP typesSEXP, SEXP pSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_log_prior(x, types, p, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_rep_vector_times
Eigen::Matrix<double, Eigen::Dynamic, 1> STAN_rep_vector_times(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x, const int& J, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_rep_vector_times(SEXP xSEXP, SEXP JSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_rep_vector_times(x, J, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_rep_vector_each
Eigen::Matrix<double, Eigen::Dynamic, 1> STAN_rep_vector_each(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x, const int& J, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_rep_vector_each(SEXP xSEXP, SEXP JSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_rep_vector_each(x, J, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_rep_cols_times
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> STAN_rep_cols_times(const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& X, const int& J, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_rep_cols_times(SEXP XSEXP, SEXP JSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_rep_cols_times(X, J, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_rep_cols_each
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> STAN_rep_cols_each(const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& X, const int& J, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_rep_cols_each(SEXP XSEXP, SEXP JSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_rep_cols_each(X, J, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_quad_form_inv
double STAN_quad_form_inv(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x, const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& A, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_quad_form_inv(SEXP xSEXP, SEXP ASEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_quad_form_inv(x, A, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_phi
Eigen::Matrix<double, Eigen::Dynamic, 1> STAN_phi(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x, const int& m, const double& L, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_phi(SEXP xSEXP, SEXP mSEXP, SEXP LSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double& >::type L(LSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_phi(x, m, L, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_lambda
double STAN_lambda(const int& m, const double& L, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_lambda(SEXP mSEXP, SEXP LSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double& >::type L(LSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_lambda(m, L, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_spd_eq
double STAN_spd_eq(const double& w, const double& ell, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_spd_eq(SEXP wSEXP, SEXP ellSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double& >::type ell(ellSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_spd_eq(w, ell, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_phi_matrix
std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > STAN_phi_matrix(const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& x, const int& M, const double& L, const std::vector<std::vector<int> >& components, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_phi_matrix(SEXP xSEXP, SEXP MSEXP, SEXP LSEXP, SEXP componentsSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const double& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_phi_matrix(x, M, L, components, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_lambda_matrix
std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > STAN_lambda_matrix(const std::vector<double>& ell, const int& M, const double& L, const std::vector<std::vector<int> >& components, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_lambda_matrix(SEXP ellSEXP, SEXP MSEXP, SEXP LSEXP, SEXP componentsSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type ell(ellSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const double& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_lambda_matrix(ell, M, L, components, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_ranks
std::vector<int> STAN_ranks(const std::vector<std::vector<int> >& components, const std::vector<int>& x_cat_num_levels, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_ranks(SEXP componentsSEXP, SEXP x_cat_num_levelsSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type x_cat_num_levels(x_cat_num_levelsSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_ranks(components, x_cat_num_levels, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_delta_matrix
Eigen::Matrix<double, Eigen::Dynamic, 1> STAN_delta_matrix(const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& K_const, const std::vector<int>& ranks, const std::vector<std::vector<int> >& components, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_delta_matrix(SEXP K_constSEXP, SEXP ranksSEXP, SEXP componentsSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& >::type K_const(K_constSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type ranks(ranksSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_delta_matrix(K_const, ranks, components, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_theta_matrix
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> STAN_theta_matrix(const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& K_const, const std::vector<int>& ranks, const std::vector<std::vector<int> >& components, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_theta_matrix(SEXP K_constSEXP, SEXP ranksSEXP, SEXP componentsSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& >::type K_const(K_constSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type ranks(ranksSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int> >& >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_theta_matrix(K_const, ranks, components, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_D_matrix
Eigen::Matrix<double, Eigen::Dynamic, 1> STAN_D_matrix(const std::vector<double>& alpha, const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& bfa_lambda, const Eigen::Matrix<double, Eigen::Dynamic, 1>& bfa_delta, const std::vector<int>& ranks, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_D_matrix(SEXP alphaSEXP, SEXP bfa_lambdaSEXP, SEXP bfa_deltaSEXP, SEXP ranksSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& >::type bfa_lambda(bfa_lambdaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type bfa_delta(bfa_deltaSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type ranks(ranksSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_D_matrix(alpha, bfa_lambda, bfa_delta, ranks, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_V_matrix
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> STAN_V_matrix(const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& bfa_phi, const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& bfa_theta, const std::vector<int>& ranks, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_V_matrix(SEXP bfa_phiSEXP, SEXP bfa_thetaSEXP, SEXP ranksSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& >::type bfa_phi(bfa_phiSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& >::type bfa_theta(bfa_thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type ranks(ranksSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_V_matrix(bfa_phi, bfa_theta, ranks, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// STAN_multi_normal_bfa_logpdf
double STAN_multi_normal_bfa_logpdf(const Eigen::Matrix<double, Eigen::Dynamic, 1>& y, const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& V, const Eigen::Matrix<double, Eigen::Dynamic, 1>& D_diag, const double& sigma, std::ostream* pstream__);
RcppExport SEXP _lgpr_STAN_multi_normal_bfa_logpdf(SEXP ySEXP, SEXP VSEXP, SEXP D_diagSEXP, SEXP sigmaSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type D_diag(D_diagSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(STAN_multi_normal_bfa_logpdf(y, V, D_diag, sigma, pstream__));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_stan_fit4lgp_mod();
RcppExport SEXP _rcpp_module_boot_stan_fit4lgp_latent_mod();
RcppExport SEXP _rcpp_module_boot_stan_fit4lgp_latent_bf_mod();
RcppExport SEXP _rcpp_module_boot_stan_fit4parameter_prior_mod();

static const R_CallMethodDef CallEntries[] = {
    {"_lgpr_STAN_vectorsum", (DL_FUNC) &_lgpr_STAN_vectorsum, 3},
    {"_lgpr_STAN_matrix_array_sum", (DL_FUNC) &_lgpr_STAN_matrix_array_sum, 2},
    {"_lgpr_STAN_warp_input", (DL_FUNC) &_lgpr_STAN_warp_input, 3},
    {"_lgpr_STAN_var_mask", (DL_FUNC) &_lgpr_STAN_var_mask, 3},
    {"_lgpr_STAN_expand", (DL_FUNC) &_lgpr_STAN_expand, 3},
    {"_lgpr_STAN_edit_x_cont", (DL_FUNC) &_lgpr_STAN_edit_x_cont, 5},
    {"_lgpr_STAN_kernel_zerosum", (DL_FUNC) &_lgpr_STAN_kernel_zerosum, 4},
    {"_lgpr_STAN_kernel_cat", (DL_FUNC) &_lgpr_STAN_kernel_cat, 3},
    {"_lgpr_STAN_kernel_bin", (DL_FUNC) &_lgpr_STAN_kernel_bin, 3},
    {"_lgpr_STAN_kernel_const", (DL_FUNC) &_lgpr_STAN_kernel_const, 5},
    {"_lgpr_STAN_kernel_const_all", (DL_FUNC) &_lgpr_STAN_kernel_const_all, 9},
    {"_lgpr_STAN_kernel_eq", (DL_FUNC) &_lgpr_STAN_kernel_eq, 5},
    {"_lgpr_STAN_kernel_varmask", (DL_FUNC) &_lgpr_STAN_kernel_varmask, 5},
    {"_lgpr_STAN_kernel_beta", (DL_FUNC) &_lgpr_STAN_kernel_beta, 4},
    {"_lgpr_STAN_kernel_all", (DL_FUNC) &_lgpr_STAN_kernel_all, 19},
    {"_lgpr_STAN_kernel_const_diag", (DL_FUNC) &_lgpr_STAN_kernel_const_diag, 3},
    {"_lgpr_STAN_kernel_const_all_diag", (DL_FUNC) &_lgpr_STAN_kernel_const_all_diag, 5},
    {"_lgpr_STAN_kernel_eq_diag", (DL_FUNC) &_lgpr_STAN_kernel_eq_diag, 3},
    {"_lgpr_STAN_kernel_varmask_diag", (DL_FUNC) &_lgpr_STAN_kernel_varmask_diag, 4},
    {"_lgpr_STAN_kernel_beta_diag", (DL_FUNC) &_lgpr_STAN_kernel_beta_diag, 3},
    {"_lgpr_STAN_kernel_all_diag", (DL_FUNC) &_lgpr_STAN_kernel_all_diag, 14},
    {"_lgpr_STAN_log_prior", (DL_FUNC) &_lgpr_STAN_log_prior, 4},
    {"_lgpr_STAN_rep_vector_times", (DL_FUNC) &_lgpr_STAN_rep_vector_times, 3},
    {"_lgpr_STAN_rep_vector_each", (DL_FUNC) &_lgpr_STAN_rep_vector_each, 3},
    {"_lgpr_STAN_rep_cols_times", (DL_FUNC) &_lgpr_STAN_rep_cols_times, 3},
    {"_lgpr_STAN_rep_cols_each", (DL_FUNC) &_lgpr_STAN_rep_cols_each, 3},
    {"_lgpr_STAN_quad_form_inv", (DL_FUNC) &_lgpr_STAN_quad_form_inv, 3},
    {"_lgpr_STAN_phi", (DL_FUNC) &_lgpr_STAN_phi, 4},
    {"_lgpr_STAN_lambda", (DL_FUNC) &_lgpr_STAN_lambda, 3},
    {"_lgpr_STAN_spd_eq", (DL_FUNC) &_lgpr_STAN_spd_eq, 3},
    {"_lgpr_STAN_phi_matrix", (DL_FUNC) &_lgpr_STAN_phi_matrix, 5},
    {"_lgpr_STAN_lambda_matrix", (DL_FUNC) &_lgpr_STAN_lambda_matrix, 5},
    {"_lgpr_STAN_ranks", (DL_FUNC) &_lgpr_STAN_ranks, 3},
    {"_lgpr_STAN_delta_matrix", (DL_FUNC) &_lgpr_STAN_delta_matrix, 4},
    {"_lgpr_STAN_theta_matrix", (DL_FUNC) &_lgpr_STAN_theta_matrix, 4},
    {"_lgpr_STAN_D_matrix", (DL_FUNC) &_lgpr_STAN_D_matrix, 5},
    {"_lgpr_STAN_V_matrix", (DL_FUNC) &_lgpr_STAN_V_matrix, 4},
    {"_lgpr_STAN_multi_normal_bfa_logpdf", (DL_FUNC) &_lgpr_STAN_multi_normal_bfa_logpdf, 5},
    {"_rcpp_module_boot_stan_fit4lgp_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4lgp_mod, 0},
    {"_rcpp_module_boot_stan_fit4lgp_latent_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4lgp_latent_mod, 0},
    {"_rcpp_module_boot_stan_fit4lgp_latent_bf_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4lgp_latent_bf_mod, 0},
    {"_rcpp_module_boot_stan_fit4parameter_prior_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4parameter_prior_mod, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_lgpr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
