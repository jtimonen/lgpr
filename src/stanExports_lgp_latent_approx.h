// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_lgp_latent_approx_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_lgp_latent_approx");
    reader.add_event(0, 0, "include", "_common/licence.stan");
    reader.add_event(0, 0, "start", "_common/licence.stan");
    reader.add_event(15, 15, "end", "_common/licence.stan");
    reader.add_event(15, 1, "restart", "model_lgp_latent_approx");
    reader.add_event(17, 3, "include", "_common/functions-utils.stan");
    reader.add_event(17, 0, "start", "_common/functions-utils.stan");
    reader.add_event(68, 51, "end", "_common/functions-utils.stan");
    reader.add_event(68, 4, "restart", "model_lgp_latent_approx");
    reader.add_event(68, 4, "include", "_common/functions-prior.stan");
    reader.add_event(68, 0, "start", "_common/functions-prior.stan");
    reader.add_event(94, 26, "end", "_common/functions-prior.stan");
    reader.add_event(94, 5, "restart", "model_lgp_latent_approx");
    reader.add_event(94, 5, "include", "_bf/functions-basisfun.stan");
    reader.add_event(94, 0, "start", "_bf/functions-basisfun.stan");
    reader.add_event(336, 242, "end", "_bf/functions-basisfun.stan");
    reader.add_event(336, 6, "restart", "model_lgp_latent_approx");
    reader.add_event(336, 6, "include", "_bf/functions-kernels_decomp.stan");
    reader.add_event(336, 0, "start", "_bf/functions-kernels_decomp.stan");
    reader.add_event(460, 124, "end", "_bf/functions-kernels_decomp.stan");
    reader.add_event(460, 7, "restart", "model_lgp_latent_approx");
    reader.add_event(463, 10, "include", "_common/data-general.stan");
    reader.add_event(463, 0, "start", "_common/data-general.stan");
    reader.add_event(501, 38, "end", "_common/data-general.stan");
    reader.add_event(501, 11, "restart", "model_lgp_latent_approx");
    reader.add_event(501, 11, "include", "_common/data-covariates.stan");
    reader.add_event(501, 0, "start", "_common/data-covariates.stan");
    reader.add_event(516, 15, "end", "_common/data-covariates.stan");
    reader.add_event(516, 12, "restart", "model_lgp_latent_approx");
    reader.add_event(516, 12, "include", "_common/data-priors.stan");
    reader.add_event(516, 0, "start", "_common/data-priors.stan");
    reader.add_event(526, 10, "end", "_common/data-priors.stan");
    reader.add_event(526, 13, "restart", "model_lgp_latent_approx");
    reader.add_event(526, 13, "include", "_latent/data-general.stan");
    reader.add_event(526, 0, "start", "_latent/data-general.stan");
    reader.add_event(532, 6, "end", "_latent/data-general.stan");
    reader.add_event(532, 14, "restart", "model_lgp_latent_approx");
    reader.add_event(532, 14, "include", "_latent/data-response.stan");
    reader.add_event(532, 0, "start", "_latent/data-response.stan");
    reader.add_event(536, 4, "end", "_latent/data-response.stan");
    reader.add_event(536, 15, "restart", "model_lgp_latent_approx");
    reader.add_event(554, 33, "include", "_common/params.stan");
    reader.add_event(554, 0, "start", "_common/params.stan");
    reader.add_event(559, 5, "end", "_common/params.stan");
    reader.add_event(559, 34, "restart", "model_lgp_latent_approx");
    reader.add_event(559, 34, "include", "_latent/params.stan");
    reader.add_event(559, 0, "start", "_latent/params.stan");
    reader.add_event(562, 3, "end", "_latent/params.stan");
    reader.add_event(562, 35, "restart", "model_lgp_latent_approx");
    reader.add_event(567, 40, "include", "_common/tparams.stan");
    reader.add_event(567, 0, "start", "_common/tparams.stan");
    reader.add_event(572, 5, "end", "_common/tparams.stan");
    reader.add_event(572, 41, "restart", "model_lgp_latent_approx");
    reader.add_event(576, 45, "include", "_common/priors.stan");
    reader.add_event(576, 0, "start", "_common/priors.stan");
    reader.add_event(606, 30, "end", "_common/priors.stan");
    reader.add_event(606, 46, "restart", "model_lgp_latent_approx");
    reader.add_event(606, 46, "include", "_latent/priors.stan");
    reader.add_event(606, 0, "start", "_latent/priors.stan");
    reader.add_event(614, 8, "end", "_latent/priors.stan");
    reader.add_event(614, 47, "restart", "model_lgp_latent_approx");
    reader.add_event(614, 47, "include", "_latent/likelihood.stan");
    reader.add_event(614, 0, "start", "_latent/likelihood.stan");
    reader.add_event(638, 24, "end", "_latent/likelihood.stan");
    reader.add_event(638, 48, "restart", "model_lgp_latent_approx");
    reader.add_event(641, 49, "end", "model_lgp_latent_approx");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_vectorsum(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& vecs,
                   const int& L, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 20;
        int num_vecs(0);
        (void) num_vecs;  // dummy to suppress unused var warning
        stan::math::fill(num_vecs, std::numeric_limits<int>::min());
        stan::math::assign(num_vecs,size(vecs));
        current_statement_begin__ = 21;
        validate_non_negative_index("s", "L", L);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> s(L);
        stan::math::initialize(s, DUMMY_VAR__);
        stan::math::fill(s, DUMMY_VAR__);
        stan::math::assign(s,rep_vector(0, L));
        current_statement_begin__ = 22;
        for (int j = 1; j <= num_vecs; ++j) {
            current_statement_begin__ = 23;
            stan::math::assign(s, add(s, get_base1(vecs, j, "vecs", 1)));
        }
        current_statement_begin__ = 25;
        return stan::math::promote_scalar<fun_return_scalar_t__>(s);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_vectorsum_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& vecs,
                   const int& L, std::ostream* pstream__) const {
        return STAN_vectorsum(vecs, L, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_matrix_array_sum(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 30;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,rows(get_base1(K, 1, "K", 1)));
        current_statement_begin__ = 31;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,cols(get_base1(K, 1, "K", 1)));
        current_statement_begin__ = 32;
        validate_non_negative_index("K_sum", "n1", n1);
        validate_non_negative_index("K_sum", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K_sum(n1, n2);
        stan::math::initialize(K_sum, DUMMY_VAR__);
        stan::math::fill(K_sum, DUMMY_VAR__);
        stan::math::assign(K_sum,get_base1(K, 1, "K", 1));
        current_statement_begin__ = 33;
        for (int j = 2; j <= size(K); ++j) {
            current_statement_begin__ = 34;
            stan::math::assign(K_sum, add(K_sum, get_base1(K, j, "K", 1)));
        }
        current_statement_begin__ = 36;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K_sum);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_matrix_array_sum_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K, std::ostream* pstream__) const {
        return STAN_matrix_array_sum(K, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
STAN_warp_input(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                    const T1__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 41;
        return stan::math::promote_scalar<fun_return_scalar_t__>(add(-(1), multiply(2, inv(add(1, stan::math::exp(multiply(-(a), x)))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_warp_input_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                    const T1__& a, std::ostream* pstream__) const {
        return STAN_warp_input(x, a, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
STAN_var_mask(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                  const T1__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 46;
        return stan::math::promote_scalar<fun_return_scalar_t__>(inv(add(1, stan::math::exp(multiply(-(a), x)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_var_mask_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                  const T1__& a, std::ostream* pstream__) const {
        return STAN_var_mask(x, a, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_expand(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                const std::vector<int>& idx_expand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 51;
        int L(0);
        (void) L;  // dummy to suppress unused var warning
        stan::math::fill(L, std::numeric_limits<int>::min());
        stan::math::assign(L,num_elements(v));
        current_statement_begin__ = 52;
        validate_non_negative_index("v_add0", "(L + 1)", (L + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v_add0((L + 1));
        stan::math::initialize(v_add0, DUMMY_VAR__);
        stan::math::fill(v_add0, DUMMY_VAR__);
        stan::math::assign(v_add0,rep_vector(0.0, (L + 1)));
        current_statement_begin__ = 53;
        stan::model::assign(v_add0, 
                    stan::model::cons_list(stan::model::index_min_max(2, (L + 1)), stan::model::nil_index_list()), 
                    v, 
                    "assigning variable v_add0");
        current_statement_begin__ = 54;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::model::rvalue(v_add0, stan::model::cons_list(stan::model::index_multi(idx_expand), stan::model::nil_index_list()), "v_add0"));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_expand_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                const std::vector<int>& idx_expand, std::ostream* pstream__) const {
        return STAN_expand(v, idx_expand, pstream__);
    }
};
template <typename T0__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic, 1>
STAN_edit_x_cont(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_cont,
                     const std::vector<int>& idx_expand,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& teff_obs,
                     const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& teff, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 64;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(x_cont));
        current_statement_begin__ = 65;
        validate_non_negative_index("x_teff_obs", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_teff_obs(n);
        stan::math::initialize(x_teff_obs, DUMMY_VAR__);
        stan::math::fill(x_teff_obs, DUMMY_VAR__);
        stan::math::assign(x_teff_obs,STAN_expand(teff_obs, idx_expand, pstream__));
        current_statement_begin__ = 66;
        validate_non_negative_index("x_teff", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_teff(n);
        stan::math::initialize(x_teff, DUMMY_VAR__);
        stan::math::fill(x_teff, DUMMY_VAR__);
        stan::math::assign(x_teff,STAN_expand(teff, idx_expand, pstream__));
        current_statement_begin__ = 67;
        return stan::math::promote_scalar<fun_return_scalar_t__>(subtract(add(x_cont, x_teff_obs), x_teff));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_edit_x_cont_functor__ {
    template <typename T0__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_cont,
                     const std::vector<int>& idx_expand,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& teff_obs,
                     const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& teff, std::ostream* pstream__) const {
        return STAN_edit_x_cont(x_cont, idx_expand, teff_obs, teff, pstream__);
    }
};
template <typename T0__, typename T2__>
typename boost::math::tools::promote_args<T0__, T2__>::type
STAN_log_prior(const T0__& x,
                   const std::vector<int>& types,
                   const std::vector<T2__>& p, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 71;
        local_scalar_t__ log_prior(DUMMY_VAR__);
        (void) log_prior;  // dummy to suppress unused var warning
        stan::math::initialize(log_prior, DUMMY_VAR__);
        stan::math::fill(log_prior, DUMMY_VAR__);
        stan::math::assign(log_prior,0);
        current_statement_begin__ = 72;
        local_scalar_t__ t(DUMMY_VAR__);
        (void) t;  // dummy to suppress unused var warning
        stan::math::initialize(t, DUMMY_VAR__);
        stan::math::fill(t, DUMMY_VAR__);
        stan::math::assign(t,x);
        current_statement_begin__ = 75;
        if (as_bool(logical_eq(get_base1(types, 2, "types", 1), 1))) {
            current_statement_begin__ = 76;
            stan::math::assign(log_prior, (log_prior + stan::math::log(stan::math::fabs((2 * x)))));
            current_statement_begin__ = 77;
            stan::math::assign(t, square(x));
        }
        current_statement_begin__ = 81;
        if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 2))) {
            current_statement_begin__ = 82;
            stan::math::assign(log_prior, (log_prior + normal_log(t, get_base1(p, 1, "p", 1), get_base1(p, 2, "p", 1))));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 3))) {
            current_statement_begin__ = 84;
            stan::math::assign(log_prior, (log_prior + student_t_log(t, get_base1(p, 1, "p", 1), 0.0, 1.0)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 4))) {
            current_statement_begin__ = 86;
            stan::math::assign(log_prior, (log_prior + gamma_log(t, get_base1(p, 1, "p", 1), get_base1(p, 2, "p", 1))));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 5))) {
            current_statement_begin__ = 88;
            stan::math::assign(log_prior, (log_prior + inv_gamma_log(t, get_base1(p, 1, "p", 1), get_base1(p, 2, "p", 1))));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 6))) {
            current_statement_begin__ = 90;
            stan::math::assign(log_prior, (log_prior + lognormal_log(t, get_base1(p, 1, "p", 1), get_base1(p, 2, "p", 1))));
        }
        current_statement_begin__ = 93;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_prior);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_log_prior_functor__ {
    template <typename T0__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T2__>::type
    operator()(const T0__& x,
                   const std::vector<int>& types,
                   const std::vector<T2__>& p, std::ostream* pstream__) const {
        return STAN_log_prior(x, types, p, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_rep_vector_times(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                          const int& J, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 98;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,num_elements(x));
        current_statement_begin__ = 99;
        validate_non_negative_index("y", "(J * N)", (J * N));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y((J * N));
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        stan::math::assign(y,rep_vector(0.0, (J * N)));
        current_statement_begin__ = 100;
        int idx(0);
        (void) idx;  // dummy to suppress unused var warning
        stan::math::fill(idx, std::numeric_limits<int>::min());
        stan::math::assign(idx,1);
        current_statement_begin__ = 101;
        for (int j = 1; j <= J; ++j) {
            current_statement_begin__ = 102;
            stan::model::assign(y, 
                        stan::model::cons_list(stan::model::index_min_max(idx, ((idx + N) - 1)), stan::model::nil_index_list()), 
                        x, 
                        "assigning variable y");
            current_statement_begin__ = 103;
            stan::math::assign(idx, (idx + N));
        }
        current_statement_begin__ = 105;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_rep_vector_times_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                          const int& J, std::ostream* pstream__) const {
        return STAN_rep_vector_times(x, J, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_rep_vector_each(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                         const int& J, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 110;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,num_elements(x));
        current_statement_begin__ = 111;
        validate_non_negative_index("y", "(J * N)", (J * N));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y((J * N));
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        stan::math::assign(y,rep_vector(0.0, (J * N)));
        current_statement_begin__ = 112;
        int idx(0);
        (void) idx;  // dummy to suppress unused var warning
        stan::math::fill(idx, std::numeric_limits<int>::min());
        stan::math::assign(idx,1);
        current_statement_begin__ = 113;
        for (int n = 1; n <= N; ++n) {
            current_statement_begin__ = 114;
            stan::model::assign(y, 
                        stan::model::cons_list(stan::model::index_min_max(idx, ((idx + J) - 1)), stan::model::nil_index_list()), 
                        rep_vector(get_base1(x, n, "x", 1), J), 
                        "assigning variable y");
            current_statement_begin__ = 115;
            stan::math::assign(idx, (idx + J));
        }
        current_statement_begin__ = 117;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_rep_vector_each_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                         const int& J, std::ostream* pstream__) const {
        return STAN_rep_vector_each(x, J, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_rep_cols_times(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X,
                        const int& J, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 122;
        int R(0);
        (void) R;  // dummy to suppress unused var warning
        stan::math::fill(R, std::numeric_limits<int>::min());
        stan::math::assign(R,rows(X));
        current_statement_begin__ = 123;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,cols(X));
        current_statement_begin__ = 124;
        validate_non_negative_index("Y", "R", R);
        validate_non_negative_index("Y", "(J * N)", (J * N));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Y(R, (J * N));
        stan::math::initialize(Y, DUMMY_VAR__);
        stan::math::fill(Y, DUMMY_VAR__);
        stan::math::assign(Y,rep_matrix(0.0, R, (J * N)));
        current_statement_begin__ = 125;
        int idx(0);
        (void) idx;  // dummy to suppress unused var warning
        stan::math::fill(idx, std::numeric_limits<int>::min());
        stan::math::assign(idx,1);
        current_statement_begin__ = 126;
        for (int j = 1; j <= J; ++j) {
            current_statement_begin__ = 127;
            stan::model::assign(Y, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(idx, ((idx + N) - 1)), stan::model::nil_index_list())), 
                        X, 
                        "assigning variable Y");
            current_statement_begin__ = 128;
            stan::math::assign(idx, (idx + N));
        }
        current_statement_begin__ = 130;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_rep_cols_times_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X,
                        const int& J, std::ostream* pstream__) const {
        return STAN_rep_cols_times(X, J, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_rep_cols_each(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X,
                       const int& J, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 135;
        int R(0);
        (void) R;  // dummy to suppress unused var warning
        stan::math::fill(R, std::numeric_limits<int>::min());
        stan::math::assign(R,rows(X));
        current_statement_begin__ = 136;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,cols(X));
        current_statement_begin__ = 137;
        validate_non_negative_index("Y", "R", R);
        validate_non_negative_index("Y", "(J * N)", (J * N));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Y(R, (J * N));
        stan::math::initialize(Y, DUMMY_VAR__);
        stan::math::fill(Y, DUMMY_VAR__);
        stan::math::assign(Y,rep_matrix(0.0, R, (J * N)));
        current_statement_begin__ = 138;
        int idx(0);
        (void) idx;  // dummy to suppress unused var warning
        stan::math::fill(idx, std::numeric_limits<int>::min());
        stan::math::assign(idx,1);
        current_statement_begin__ = 139;
        for (int n = 1; n <= N; ++n) {
            current_statement_begin__ = 140;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 141;
                stan::model::assign(Y, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(((idx + j) - 1)), stan::model::nil_index_list())), 
                            stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "X"), 
                            "assigning variable Y");
            }
            current_statement_begin__ = 143;
            stan::math::assign(idx, (idx + J));
        }
        current_statement_begin__ = 145;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_rep_cols_each_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X,
                       const int& J, std::ostream* pstream__) const {
        return STAN_rep_cols_each(X, J, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
STAN_quad_form_inv(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                       const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& A, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 150;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(x));
        current_statement_begin__ = 151;
        validate_non_negative_index("L", "n", n);
        validate_non_negative_index("L", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L(n, n);
        stan::math::initialize(L, DUMMY_VAR__);
        stan::math::fill(L, DUMMY_VAR__);
        stan::math::assign(L,cholesky_decompose(A));
        current_statement_begin__ = 152;
        validate_non_negative_index("a", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> a(n);
        stan::math::initialize(a, DUMMY_VAR__);
        stan::math::fill(a, DUMMY_VAR__);
        stan::math::assign(a,mdivide_left_tri_low(L, x));
        current_statement_begin__ = 153;
        return stan::math::promote_scalar<fun_return_scalar_t__>(dot_self(a));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_quad_form_inv_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                       const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& A, std::ostream* pstream__) const {
        return STAN_quad_form_inv(x, A, pstream__);
    }
};
template <typename T0__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1>
STAN_phi(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
             const int& m,
             const T2__& L, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 161;
        local_scalar_t__ A(DUMMY_VAR__);
        (void) A;  // dummy to suppress unused var warning
        stan::math::initialize(A, DUMMY_VAR__);
        stan::math::fill(A, DUMMY_VAR__);
        stan::math::assign(A,inv(stan::math::sqrt(L)));
        current_statement_begin__ = 162;
        local_scalar_t__ B(DUMMY_VAR__);
        (void) B;  // dummy to suppress unused var warning
        stan::math::initialize(B, DUMMY_VAR__);
        stan::math::fill(B, DUMMY_VAR__);
        stan::math::assign(B,((stan::math::pi() * m) / (2.0 * L)));
        current_statement_begin__ = 163;
        return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(A, stan::math::sin(multiply(B, add(x, L)))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_phi_functor__ {
    template <typename T0__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
             const int& m,
             const T2__& L, std::ostream* pstream__) const {
        return STAN_phi(x, m, L, pstream__);
    }
};
template <typename T1__>
typename boost::math::tools::promote_args<T1__>::type
STAN_lambda(const int& m,
                const T1__& L, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 170;
        local_scalar_t__ A(DUMMY_VAR__);
        (void) A;  // dummy to suppress unused var warning
        stan::math::initialize(A, DUMMY_VAR__);
        stan::math::fill(A, DUMMY_VAR__);
        stan::math::assign(A,((stan::math::pi() * m) / (2.0 * L)));
        current_statement_begin__ = 171;
        return stan::math::promote_scalar<fun_return_scalar_t__>(square(A));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_lambda_functor__ {
    template <typename T1__>
        typename boost::math::tools::promote_args<T1__>::type
    operator()(const int& m,
                const T1__& L, std::ostream* pstream__) const {
        return STAN_lambda(m, L, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
STAN_spd_eq(const T0__& w,
                const T1__& ell, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 178;
        local_scalar_t__ A(DUMMY_VAR__);
        (void) A;  // dummy to suppress unused var warning
        stan::math::initialize(A, DUMMY_VAR__);
        stan::math::fill(A, DUMMY_VAR__);
        stan::math::assign(A,(ell * stan::math::sqrt((2.0 * stan::math::pi()))));
        current_statement_begin__ = 179;
        local_scalar_t__ B(DUMMY_VAR__);
        (void) B;  // dummy to suppress unused var warning
        stan::math::initialize(B, DUMMY_VAR__);
        stan::math::fill(B, DUMMY_VAR__);
        stan::math::assign(B,(-(0.5) * square((w * ell))));
        current_statement_begin__ = 180;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((A * stan::math::exp(B)) + 1e-9));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_spd_eq_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& w,
                const T1__& ell, std::ostream* pstream__) const {
        return STAN_spd_eq(w, ell, pstream__);
    }
};
template <typename T0__, typename T2__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic> >
STAN_phi_matrix(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& x,
                    const int& M,
                    const T2__& L,
                    const std::vector<std::vector<int> >& components, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 187;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(get_base1(x, 1, "x", 1)));
        current_statement_begin__ = 188;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,size(components));
        current_statement_begin__ = 189;
        validate_non_negative_index("PHI", "n", n);
        validate_non_negative_index("PHI", "M", M);
        validate_non_negative_index("PHI", "J", J);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > PHI(J, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n, M));
        stan::math::initialize(PHI, DUMMY_VAR__);
        stan::math::fill(PHI, DUMMY_VAR__);
        current_statement_begin__ = 190;
        for (int j = 1; j <= J; ++j) {
            {
            current_statement_begin__ = 191;
            validate_non_negative_index("PHI_j", "n", n);
            validate_non_negative_index("PHI_j", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> PHI_j(n, M);
            stan::math::initialize(PHI_j, DUMMY_VAR__);
            stan::math::fill(PHI_j, DUMMY_VAR__);
            stan::math::assign(PHI_j,rep_matrix(1.0, n, M));
            current_statement_begin__ = 192;
            if (as_bool(logical_gt(get_base1(get_base1(components, j, "components", 1), 1, "components", 2), 0))) {
                {
                current_statement_begin__ = 193;
                int idx_cont(0);
                (void) idx_cont;  // dummy to suppress unused var warning
                stan::math::fill(idx_cont, std::numeric_limits<int>::min());
                stan::math::assign(idx_cont,get_base1(get_base1(components, j, "components", 1), 9, "components", 2));
                current_statement_begin__ = 194;
                for (int m = 1; m <= M; ++m) {
                    current_statement_begin__ = 196;
                    stan::model::assign(PHI_j, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                STAN_phi(get_base1(x, idx_cont, "x", 1), m, L, pstream__), 
                                "assigning variable PHI_j");
                }
                }
            }
            current_statement_begin__ = 199;
            stan::model::assign(PHI, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        PHI_j, 
                        "assigning variable PHI");
            }
        }
        current_statement_begin__ = 201;
        return stan::math::promote_scalar<fun_return_scalar_t__>(PHI);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_phi_matrix_functor__ {
    template <typename T0__, typename T2__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& x,
                    const int& M,
                    const T2__& L,
                    const std::vector<std::vector<int> >& components, std::ostream* pstream__) const {
        return STAN_phi_matrix(x, M, L, components, pstream__);
    }
};
template <typename T0__, typename T2__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1> >
STAN_lambda_matrix(const std::vector<T0__>& ell,
                       const int& M,
                       const T2__& L,
                       const std::vector<std::vector<int> >& components, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 207;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,size(components));
        current_statement_begin__ = 208;
        validate_non_negative_index("Lambda", "M", M);
        validate_non_negative_index("Lambda", "J", J);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > Lambda(J, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(M));
        stan::math::initialize(Lambda, DUMMY_VAR__);
        stan::math::fill(Lambda, DUMMY_VAR__);
        current_statement_begin__ = 209;
        int j_ell(0);
        (void) j_ell;  // dummy to suppress unused var warning
        stan::math::fill(j_ell, std::numeric_limits<int>::min());
        stan::math::assign(j_ell,0);
        current_statement_begin__ = 210;
        for (int j = 1; j <= J; ++j) {
            current_statement_begin__ = 211;
            if (as_bool(logical_gt(get_base1(get_base1(components, j, "components", 1), 1, "components", 2), 0))) {
                current_statement_begin__ = 212;
                stan::math::assign(j_ell, (j_ell + 1));
                current_statement_begin__ = 213;
                for (int m = 1; m <= M; ++m) {
                    current_statement_begin__ = 214;
                    stan::model::assign(Lambda, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                STAN_spd_eq(((m * stan::math::pi()) / (2.0 * L)), get_base1(ell, j_ell, "ell", 1), pstream__), 
                                "assigning variable Lambda");
                }
            } else {
                current_statement_begin__ = 217;
                stan::model::assign(Lambda, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            rep_vector((1.0 / M), M), 
                            "assigning variable Lambda");
            }
        }
        current_statement_begin__ = 220;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Lambda);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_lambda_matrix_functor__ {
    template <typename T0__, typename T2__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1> >
    operator()(const std::vector<T0__>& ell,
                       const int& M,
                       const T2__& L,
                       const std::vector<std::vector<int> >& components, std::ostream* pstream__) const {
        return STAN_lambda_matrix(ell, M, L, components, pstream__);
    }
};
std::vector<int>
STAN_ranks(const std::vector<std::vector<int> >& components,
               const std::vector<int>& x_cat_num_levels, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 225;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,size(components));
        current_statement_begin__ = 226;
        validate_non_negative_index("ranks", "J", J);
        std::vector<int  > ranks(J, int(0));
        stan::math::fill(ranks, std::numeric_limits<int>::min());
        stan::math::assign(ranks,rep_array(1, J));
        current_statement_begin__ = 227;
        for (int j = 1; j <= J; ++j) {
            {
            current_statement_begin__ = 228;
            int idx_cat(0);
            (void) idx_cat;  // dummy to suppress unused var warning
            stan::math::fill(idx_cat, std::numeric_limits<int>::min());
            stan::math::assign(idx_cat,get_base1(get_base1(components, j, "components", 1), 8, "components", 2));
            current_statement_begin__ = 229;
            if (as_bool(logical_gt(idx_cat, 0))) {
                current_statement_begin__ = 230;
                stan::model::assign(ranks, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(x_cat_num_levels, idx_cat, "x_cat_num_levels", 1) - 1), 
                            "assigning variable ranks");
            }
            }
        }
        current_statement_begin__ = 233;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ranks);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_ranks_functor__ {
            std::vector<int>
    operator()(const std::vector<std::vector<int> >& components,
               const std::vector<int>& x_cat_num_levels, std::ostream* pstream__) const {
        return STAN_ranks(components, x_cat_num_levels, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_delta_matrix(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                      const std::vector<int>& ranks,
                      const std::vector<std::vector<int> >& components, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 239;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,size(ranks));
        current_statement_begin__ = 240;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,cols(get_base1(K_const, 1, "K_const", 1)));
        current_statement_begin__ = 241;
        int R(0);
        (void) R;  // dummy to suppress unused var warning
        stan::math::fill(R, std::numeric_limits<int>::min());
        stan::math::assign(R,sum(ranks));
        current_statement_begin__ = 242;
        validate_non_negative_index("Delta", "R", R);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Delta(R);
        stan::math::initialize(Delta, DUMMY_VAR__);
        stan::math::fill(Delta, DUMMY_VAR__);
        stan::math::assign(Delta,rep_vector(1.0, R));
        current_statement_begin__ = 243;
        int idx(0);
        (void) idx;  // dummy to suppress unused var warning
        stan::math::fill(idx, std::numeric_limits<int>::min());
        stan::math::assign(idx,1);
        current_statement_begin__ = 244;
        for (int j = 1; j <= J; ++j) {
            {
            current_statement_begin__ = 245;
            int r(0);
            (void) r;  // dummy to suppress unused var warning
            stan::math::fill(r, std::numeric_limits<int>::min());
            stan::math::assign(r,get_base1(ranks, j, "ranks", 1));
            current_statement_begin__ = 246;
            int idx_cat(0);
            (void) idx_cat;  // dummy to suppress unused var warning
            stan::math::fill(idx_cat, std::numeric_limits<int>::min());
            stan::math::assign(idx_cat,get_base1(get_base1(components, j, "components", 1), 8, "components", 2));
            current_statement_begin__ = 247;
            if (as_bool(logical_gt(idx_cat, 0))) {
                {
                current_statement_begin__ = 248;
                validate_non_negative_index("lam", "n", n);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lam(n);
                stan::math::initialize(lam, DUMMY_VAR__);
                stan::math::fill(lam, DUMMY_VAR__);
                stan::math::assign(lam,eigenvalues_sym(get_base1(K_const, j, "K_const", 1)));
                current_statement_begin__ = 249;
                stan::model::assign(Delta, 
                            stan::model::cons_list(stan::model::index_min_max(idx, ((idx + r) - 1)), stan::model::nil_index_list()), 
                            stan::model::rvalue(lam, stan::model::cons_list(stan::model::index_min_max(((n - r) + 1), n), stan::model::nil_index_list()), "lam"), 
                            "assigning variable Delta");
                }
            }
            current_statement_begin__ = 252;
            stan::math::assign(idx, (idx + r));
            }
        }
        current_statement_begin__ = 254;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Delta);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_delta_matrix_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                      const std::vector<int>& ranks,
                      const std::vector<std::vector<int> >& components, std::ostream* pstream__) const {
        return STAN_delta_matrix(K_const, ranks, components, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_theta_matrix(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                      const std::vector<int>& ranks,
                      const std::vector<std::vector<int> >& components, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 260;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,size(ranks));
        current_statement_begin__ = 261;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,cols(get_base1(K_const, 1, "K_const", 1)));
        current_statement_begin__ = 262;
        int R(0);
        (void) R;  // dummy to suppress unused var warning
        stan::math::fill(R, std::numeric_limits<int>::min());
        stan::math::assign(R,sum(ranks));
        current_statement_begin__ = 263;
        validate_non_negative_index("Theta", "n", n);
        validate_non_negative_index("Theta", "R", R);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Theta(n, R);
        stan::math::initialize(Theta, DUMMY_VAR__);
        stan::math::fill(Theta, DUMMY_VAR__);
        stan::math::assign(Theta,rep_matrix(1.0, n, R));
        current_statement_begin__ = 264;
        int idx(0);
        (void) idx;  // dummy to suppress unused var warning
        stan::math::fill(idx, std::numeric_limits<int>::min());
        stan::math::assign(idx,1);
        current_statement_begin__ = 265;
        for (int j = 1; j <= J; ++j) {
            {
            current_statement_begin__ = 266;
            int r(0);
            (void) r;  // dummy to suppress unused var warning
            stan::math::fill(r, std::numeric_limits<int>::min());
            stan::math::assign(r,get_base1(ranks, j, "ranks", 1));
            current_statement_begin__ = 267;
            int idx_cat(0);
            (void) idx_cat;  // dummy to suppress unused var warning
            stan::math::fill(idx_cat, std::numeric_limits<int>::min());
            stan::math::assign(idx_cat,get_base1(get_base1(components, j, "components", 1), 8, "components", 2));
            current_statement_begin__ = 268;
            if (as_bool(logical_gt(idx_cat, 0))) {
                {
                current_statement_begin__ = 269;
                validate_non_negative_index("v", "n", n);
                validate_non_negative_index("v", "n", n);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> v(n, n);
                stan::math::initialize(v, DUMMY_VAR__);
                stan::math::fill(v, DUMMY_VAR__);
                stan::math::assign(v,eigenvectors_sym(get_base1(K_const, j, "K_const", 1)));
                current_statement_begin__ = 270;
                stan::model::assign(Theta, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(idx, ((idx + r) - 1)), stan::model::nil_index_list())), 
                            stan::model::rvalue(v, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(((n - r) + 1), n), stan::model::nil_index_list())), "v"), 
                            "assigning variable Theta");
                }
            }
            current_statement_begin__ = 273;
            stan::math::assign(idx, (idx + r));
            }
        }
        current_statement_begin__ = 275;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Theta);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_theta_matrix_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                      const std::vector<int>& ranks,
                      const std::vector<std::vector<int> >& components, std::ostream* pstream__) const {
        return STAN_theta_matrix(K_const, ranks, components, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
STAN_D_matrix(const std::vector<T0__>& alpha,
                  const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic, 1> >& bfa_lambda,
                  const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& bfa_delta,
                  const std::vector<int>& ranks, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 283;
        int M(0);
        (void) M;  // dummy to suppress unused var warning
        stan::math::fill(M, std::numeric_limits<int>::min());
        stan::math::assign(M,num_elements(get_base1(bfa_lambda, 1, "bfa_lambda", 1)));
        current_statement_begin__ = 284;
        int RM(0);
        (void) RM;  // dummy to suppress unused var warning
        stan::math::fill(RM, std::numeric_limits<int>::min());
        stan::math::assign(RM,(sum(ranks) * M));
        current_statement_begin__ = 285;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,size(ranks));
        current_statement_begin__ = 286;
        validate_non_negative_index("alpha_diag", "RM", RM);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_diag(RM);
        stan::math::initialize(alpha_diag, DUMMY_VAR__);
        stan::math::fill(alpha_diag, DUMMY_VAR__);
        current_statement_begin__ = 287;
        validate_non_negative_index("lambda_diag", "RM", RM);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_diag(RM);
        stan::math::initialize(lambda_diag, DUMMY_VAR__);
        stan::math::fill(lambda_diag, DUMMY_VAR__);
        current_statement_begin__ = 288;
        validate_non_negative_index("delta_diag", "RM", RM);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta_diag(RM);
        stan::math::initialize(delta_diag, DUMMY_VAR__);
        stan::math::fill(delta_diag, DUMMY_VAR__);
        stan::math::assign(delta_diag,STAN_rep_vector_each(bfa_delta, M, pstream__));
        current_statement_begin__ = 289;
        int i1(0);
        (void) i1;  // dummy to suppress unused var warning
        stan::math::fill(i1, std::numeric_limits<int>::min());
        stan::math::assign(i1,1);
        current_statement_begin__ = 290;
        int i2(0);
        (void) i2;  // dummy to suppress unused var warning
        stan::math::fill(i2, std::numeric_limits<int>::min());
        stan::math::assign(i2,1);
        current_statement_begin__ = 291;
        for (int j = 1; j <= J; ++j) {
            {
            current_statement_begin__ = 292;
            int r(0);
            (void) r;  // dummy to suppress unused var warning
            stan::math::fill(r, std::numeric_limits<int>::min());
            stan::math::assign(r,(get_base1(ranks, j, "ranks", 1) * M));
            current_statement_begin__ = 293;
            stan::math::assign(i2, ((i1 + r) - 1));
            current_statement_begin__ = 294;
            stan::model::assign(alpha_diag, 
                        stan::model::cons_list(stan::model::index_min_max(i1, i2), stan::model::nil_index_list()), 
                        rep_vector(square(get_base1(alpha, j, "alpha", 1)), r), 
                        "assigning variable alpha_diag");
            current_statement_begin__ = 295;
            stan::model::assign(lambda_diag, 
                        stan::model::cons_list(stan::model::index_min_max(i1, i2), stan::model::nil_index_list()), 
                        STAN_rep_vector_times(get_base1(bfa_lambda, j, "bfa_lambda", 1), get_base1(ranks, j, "ranks", 1), pstream__), 
                        "assigning variable lambda_diag");
            current_statement_begin__ = 296;
            stan::math::assign(i1, (i1 + r));
            }
        }
        current_statement_begin__ = 298;
        return stan::math::promote_scalar<fun_return_scalar_t__>(elt_multiply(elt_multiply(alpha_diag, delta_diag), lambda_diag));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_D_matrix_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const std::vector<T0__>& alpha,
                  const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic, 1> >& bfa_lambda,
                  const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& bfa_delta,
                  const std::vector<int>& ranks, std::ostream* pstream__) const {
        return STAN_D_matrix(alpha, bfa_lambda, bfa_delta, ranks, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_V_matrix(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& bfa_phi,
                  const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& bfa_theta,
                  const std::vector<int>& ranks, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 306;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,size(bfa_phi));
        current_statement_begin__ = 307;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,rows(get_base1(bfa_phi, 1, "bfa_phi", 1)));
        current_statement_begin__ = 308;
        int M(0);
        (void) M;  // dummy to suppress unused var warning
        stan::math::fill(M, std::numeric_limits<int>::min());
        stan::math::assign(M,cols(get_base1(bfa_phi, 1, "bfa_phi", 1)));
        current_statement_begin__ = 309;
        int RM(0);
        (void) RM;  // dummy to suppress unused var warning
        stan::math::fill(RM, std::numeric_limits<int>::min());
        stan::math::assign(RM,(sum(ranks) * M));
        current_statement_begin__ = 310;
        validate_non_negative_index("THETA", "n", n);
        validate_non_negative_index("THETA", "RM", RM);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> THETA(n, RM);
        stan::math::initialize(THETA, DUMMY_VAR__);
        stan::math::fill(THETA, DUMMY_VAR__);
        stan::math::assign(THETA,STAN_rep_cols_each(bfa_theta, M, pstream__));
        current_statement_begin__ = 311;
        validate_non_negative_index("PHI", "n", n);
        validate_non_negative_index("PHI", "RM", RM);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> PHI(n, RM);
        stan::math::initialize(PHI, DUMMY_VAR__);
        stan::math::fill(PHI, DUMMY_VAR__);
        current_statement_begin__ = 312;
        int i1(0);
        (void) i1;  // dummy to suppress unused var warning
        stan::math::fill(i1, std::numeric_limits<int>::min());
        stan::math::assign(i1,1);
        current_statement_begin__ = 313;
        int i2(0);
        (void) i2;  // dummy to suppress unused var warning
        stan::math::fill(i2, std::numeric_limits<int>::min());
        stan::math::assign(i2,1);
        current_statement_begin__ = 314;
        for (int j = 1; j <= J; ++j) {
            {
            current_statement_begin__ = 315;
            int r(0);
            (void) r;  // dummy to suppress unused var warning
            stan::math::fill(r, std::numeric_limits<int>::min());
            stan::math::assign(r,(get_base1(ranks, j, "ranks", 1) * M));
            current_statement_begin__ = 316;
            stan::math::assign(i2, ((i1 + r) - 1));
            current_statement_begin__ = 317;
            stan::model::assign(PHI, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(i1, i2), stan::model::nil_index_list())), 
                        STAN_rep_cols_times(get_base1(bfa_phi, j, "bfa_phi", 1), get_base1(ranks, j, "ranks", 1), pstream__), 
                        "assigning variable PHI");
            current_statement_begin__ = 318;
            stan::math::assign(i1, (i1 + r));
            }
        }
        current_statement_begin__ = 320;
        return stan::math::promote_scalar<fun_return_scalar_t__>(elt_multiply(THETA, PHI));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_V_matrix_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& bfa_phi,
                  const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& bfa_theta,
                  const std::vector<int>& ranks, std::ostream* pstream__) const {
        return STAN_V_matrix(bfa_phi, bfa_theta, ranks, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
STAN_multi_normal_bfa_logpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
                                 const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& V,
                                 const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& D_diag,
                                 const T3__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 328;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(y));
        current_statement_begin__ = 329;
        int RM(0);
        (void) RM;  // dummy to suppress unused var warning
        stan::math::fill(RM, std::numeric_limits<int>::min());
        stan::math::assign(RM,num_elements(D_diag));
        current_statement_begin__ = 330;
        validate_non_negative_index("z", "RM", RM);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> z(RM);
        stan::math::initialize(z, DUMMY_VAR__);
        stan::math::fill(z, DUMMY_VAR__);
        stan::math::assign(z,multiply(transpose(V), y));
        current_statement_begin__ = 331;
        validate_non_negative_index("Z", "RM", RM);
        validate_non_negative_index("Z", "RM", RM);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Z(RM, RM);
        stan::math::initialize(Z, DUMMY_VAR__);
        stan::math::fill(Z, DUMMY_VAR__);
        stan::math::assign(Z,add(diag_matrix(multiply(square(sigma), inv(D_diag))), crossprod(V)));
        current_statement_begin__ = 332;
        local_scalar_t__ t1(DUMMY_VAR__);
        (void) t1;  // dummy to suppress unused var warning
        stan::math::initialize(t1, DUMMY_VAR__);
        stan::math::fill(t1, DUMMY_VAR__);
        stan::math::assign(t1,(n * stan::math::log((2.0 * stan::math::pi()))));
        current_statement_begin__ = 333;
        local_scalar_t__ t2(DUMMY_VAR__);
        (void) t2;  // dummy to suppress unused var warning
        stan::math::initialize(t2, DUMMY_VAR__);
        stan::math::fill(t2, DUMMY_VAR__);
        stan::math::assign(t2,(inv_square(sigma) * (dot_self(y) - STAN_quad_form_inv(z, Z, pstream__))));
        current_statement_begin__ = 334;
        local_scalar_t__ t3(DUMMY_VAR__);
        (void) t3;  // dummy to suppress unused var warning
        stan::math::initialize(t3, DUMMY_VAR__);
        stan::math::fill(t3, DUMMY_VAR__);
        stan::math::assign(t3,((((2 * (n - RM)) * stan::math::log(sigma)) + log_determinant(Z)) + sum(stan::math::log(D_diag))));
        current_statement_begin__ = 335;
        return stan::math::promote_scalar<fun_return_scalar_t__>((-(0.5) * ((t1 + t2) + t3)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_multi_normal_bfa_logpdf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
                                 const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& V,
                                 const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& D_diag,
                                 const T3__& sigma, std::ostream* pstream__) const {
        return STAN_multi_normal_bfa_logpdf(y, V, D_diag, sigma, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_eq(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                   const T2__& alpha,
                   const T3__& ell, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 340;
        return stan::math::promote_scalar<fun_return_scalar_t__>(cov_exp_quad(to_array_1d(x1), to_array_1d(x2), alpha, ell));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_eq_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                   const T2__& alpha,
                   const T3__& ell, std::ostream* pstream__) const {
        return STAN_kernel_eq(x1, x2, alpha, ell, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_varmask(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                        const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                        const T2__& steepness,
                        const std::vector<T3__>& vm_params, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 347;
        local_scalar_t__ a(DUMMY_VAR__);
        (void) a;  // dummy to suppress unused var warning
        stan::math::initialize(a, DUMMY_VAR__);
        stan::math::fill(a, DUMMY_VAR__);
        stan::math::assign(a,(steepness * get_base1(vm_params, 2, "vm_params", 1)));
        current_statement_begin__ = 348;
        local_scalar_t__ r(DUMMY_VAR__);
        (void) r;  // dummy to suppress unused var warning
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);
        stan::math::assign(r,(inv(a) * logit(get_base1(vm_params, 1, "vm_params", 1))));
        current_statement_begin__ = 349;
        return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(to_matrix(to_matrix(STAN_var_mask(subtract(x1, r), a, pstream__))), transpose(to_matrix(STAN_var_mask(subtract(x2, r), a, pstream__)))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_varmask_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                        const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                        const T2__& steepness,
                        const std::vector<T3__>& vm_params, std::ostream* pstream__) const {
        return STAN_kernel_varmask(x1, x2, steepness, vm_params, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_beta(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
                     const std::vector<int>& idx1_expand,
                     const std::vector<int>& idx2_expand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 357;
        return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(to_matrix(STAN_expand(stan::math::sqrt(beta), idx1_expand, pstream__)), transpose(to_matrix(STAN_expand(stan::math::sqrt(beta), idx2_expand, pstream__)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_beta_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
                     const std::vector<int>& idx1_expand,
                     const std::vector<int>& idx2_expand, std::ostream* pstream__) const {
        return STAN_kernel_beta(beta, idx1_expand, idx2_expand, pstream__);
    }
};
template <typename T2__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T16__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T9__, T10__, typename boost::math::tools::promote_args<T11__, T12__, T13__, T16__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_all(const int& n1,
                    const int& n2,
                    const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                    const std::vector<std::vector<int> >& components,
                    const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, 1> >& x1,
                    const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic, 1> >& x2,
                    const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic, 1> >& x1_unnorm,
                    const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic, 1> >& x2_unnorm,
                    const std::vector<T8__>& alpha,
                    const std::vector<T9__>& ell,
                    const std::vector<T10__>& wrp,
                    const std::vector<Eigen::Matrix<T11__, Eigen::Dynamic, 1> >& beta,
                    const std::vector<Eigen::Matrix<T12__, Eigen::Dynamic, 1> >& teff,
                    const std::vector<T13__>& vm_params,
                    const std::vector<int>& idx1_expand,
                    const std::vector<int>& idx2_expand,
                    const std::vector<Eigen::Matrix<T16__, Eigen::Dynamic, 1> >& teff_zero, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T9__, T10__, typename boost::math::tools::promote_args<T11__, T12__, T13__, T16__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 386;
        int idx_ell(0);
        (void) idx_ell;  // dummy to suppress unused var warning
        stan::math::fill(idx_ell, std::numeric_limits<int>::min());
        stan::math::assign(idx_ell,0);
        current_statement_begin__ = 387;
        int idx_wrp(0);
        (void) idx_wrp;  // dummy to suppress unused var warning
        stan::math::fill(idx_wrp, std::numeric_limits<int>::min());
        stan::math::assign(idx_wrp,0);
        current_statement_begin__ = 388;
        int idx_alpha(0);
        (void) idx_alpha;  // dummy to suppress unused var warning
        stan::math::fill(idx_alpha, std::numeric_limits<int>::min());
        stan::math::assign(idx_alpha,0);
        current_statement_begin__ = 389;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(components));
        current_statement_begin__ = 390;
        validate_non_negative_index("KX", "n1", n1);
        validate_non_negative_index("KX", "n2", n2);
        validate_non_negative_index("KX", "num_comps", num_comps);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n1, n2));
        stan::math::initialize(KX, DUMMY_VAR__);
        stan::math::fill(KX, DUMMY_VAR__);
        current_statement_begin__ = 393;
        for (int j = 1; j <= num_comps; ++j) {
            {
            current_statement_begin__ = 396;
            validate_non_negative_index("K", "n1", n1);
            validate_non_negative_index("K", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K, DUMMY_VAR__);
            stan::math::assign(K,get_base1(K_const, j, "K_const", 1));
            current_statement_begin__ = 397;
            validate_non_negative_index("X1", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> X1(n1);
            stan::math::initialize(X1, DUMMY_VAR__);
            stan::math::fill(X1, DUMMY_VAR__);
            current_statement_begin__ = 398;
            validate_non_negative_index("X2", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> X2(n2);
            stan::math::initialize(X2, DUMMY_VAR__);
            stan::math::fill(X2, DUMMY_VAR__);
            current_statement_begin__ = 401;
            validate_non_negative_index("opts", "9", 9);
            std::vector<int  > opts(9, int(0));
            stan::math::fill(opts, std::numeric_limits<int>::min());
            stan::math::assign(opts,get_base1(components, j, "components", 1));
            current_statement_begin__ = 402;
            int ctype(0);
            (void) ctype;  // dummy to suppress unused var warning
            stan::math::fill(ctype, std::numeric_limits<int>::min());
            stan::math::assign(ctype,get_base1(opts, 1, "opts", 1));
            current_statement_begin__ = 403;
            int idx_cont(0);
            (void) idx_cont;  // dummy to suppress unused var warning
            stan::math::fill(idx_cont, std::numeric_limits<int>::min());
            stan::math::assign(idx_cont,get_base1(opts, 9, "opts", 1));
            current_statement_begin__ = 404;
            int is_heter(0);
            (void) is_heter;  // dummy to suppress unused var warning
            stan::math::fill(is_heter, std::numeric_limits<int>::min());
            stan::math::assign(is_heter,get_base1(opts, 4, "opts", 1));
            current_statement_begin__ = 405;
            int is_warped(0);
            (void) is_warped;  // dummy to suppress unused var warning
            stan::math::fill(is_warped, std::numeric_limits<int>::min());
            stan::math::assign(is_warped,get_base1(opts, 5, "opts", 1));
            current_statement_begin__ = 406;
            int is_var_masked(0);
            (void) is_var_masked;  // dummy to suppress unused var warning
            stan::math::fill(is_var_masked, std::numeric_limits<int>::min());
            stan::math::assign(is_var_masked,get_base1(opts, 6, "opts", 1));
            current_statement_begin__ = 407;
            int is_uncrt(0);
            (void) is_uncrt;  // dummy to suppress unused var warning
            stan::math::fill(is_uncrt, std::numeric_limits<int>::min());
            stan::math::assign(is_uncrt,get_base1(opts, 7, "opts", 1));
            current_statement_begin__ = 410;
            if (as_bool(logical_neq(ctype, 0))) {
                current_statement_begin__ = 411;
                if (as_bool(is_warped)) {
                    current_statement_begin__ = 412;
                    stan::math::assign(X1, get_base1(x1_unnorm, idx_cont, "x1_unnorm", 1));
                    current_statement_begin__ = 413;
                    stan::math::assign(X2, get_base1(x2_unnorm, idx_cont, "x2_unnorm", 1));
                } else {
                    current_statement_begin__ = 415;
                    stan::math::assign(X1, get_base1(x1, idx_cont, "x1", 1));
                    current_statement_begin__ = 416;
                    stan::math::assign(X2, get_base1(x2, idx_cont, "x2", 1));
                }
            }
            current_statement_begin__ = 421;
            if (as_bool(is_warped)) {
                {
                current_statement_begin__ = 422;
                local_scalar_t__ s(DUMMY_VAR__);
                (void) s;  // dummy to suppress unused var warning
                stan::math::initialize(s, DUMMY_VAR__);
                stan::math::fill(s, DUMMY_VAR__);
                current_statement_begin__ = 423;
                stan::math::assign(idx_wrp, (idx_wrp + 1));
                current_statement_begin__ = 426;
                if (as_bool(is_uncrt)) {
                    current_statement_begin__ = 427;
                    stan::math::assign(X1, STAN_edit_x_cont(X1, idx1_expand, get_base1(teff_zero, 1, "teff_zero", 1), get_base1(teff, 1, "teff", 1), pstream__));
                    current_statement_begin__ = 428;
                    stan::math::assign(X2, STAN_edit_x_cont(X2, idx2_expand, get_base1(teff_zero, 1, "teff_zero", 1), get_base1(teff, 1, "teff", 1), pstream__));
                }
                current_statement_begin__ = 432;
                stan::math::assign(s, get_base1(wrp, idx_wrp, "wrp", 1));
                current_statement_begin__ = 433;
                if (as_bool(is_var_masked)) {
                    current_statement_begin__ = 434;
                    stan::math::assign(K, elt_multiply(K, STAN_kernel_varmask(X1, X2, s, vm_params, pstream__)));
                }
                current_statement_begin__ = 438;
                stan::math::assign(X1, STAN_warp_input(X1, s, pstream__));
                current_statement_begin__ = 439;
                stan::math::assign(X2, STAN_warp_input(X2, s, pstream__));
                }
            }
            current_statement_begin__ = 443;
            stan::math::assign(idx_alpha, (idx_alpha + 1));
            current_statement_begin__ = 444;
            if (as_bool(logical_neq(ctype, 0))) {
                current_statement_begin__ = 445;
                stan::math::assign(idx_ell, (idx_ell + 1));
                current_statement_begin__ = 446;
                stan::math::assign(K, elt_multiply(K, STAN_kernel_eq(X1, X2, get_base1(alpha, idx_alpha, "alpha", 1), get_base1(ell, idx_ell, "ell", 1), pstream__)));
            } else {
                current_statement_begin__ = 448;
                stan::math::assign(K, multiply(square(get_base1(alpha, idx_alpha, "alpha", 1)), K));
            }
            current_statement_begin__ = 452;
            if (as_bool(is_heter)) {
                current_statement_begin__ = 453;
                stan::math::assign(K, elt_multiply(K, STAN_kernel_beta(get_base1(beta, 1, "beta", 1), idx1_expand, idx2_expand, pstream__)));
            }
            current_statement_begin__ = 456;
            stan::model::assign(KX, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        K, 
                        "assigning variable KX");
            }
        }
        current_statement_begin__ = 459;
        return stan::math::promote_scalar<fun_return_scalar_t__>(KX);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_all_functor__ {
    template <typename T2__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T16__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T9__, T10__, typename boost::math::tools::promote_args<T11__, T12__, T13__, T16__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const int& n1,
                    const int& n2,
                    const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                    const std::vector<std::vector<int> >& components,
                    const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, 1> >& x1,
                    const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic, 1> >& x2,
                    const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic, 1> >& x1_unnorm,
                    const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic, 1> >& x2_unnorm,
                    const std::vector<T8__>& alpha,
                    const std::vector<T9__>& ell,
                    const std::vector<T10__>& wrp,
                    const std::vector<Eigen::Matrix<T11__, Eigen::Dynamic, 1> >& beta,
                    const std::vector<Eigen::Matrix<T12__, Eigen::Dynamic, 1> >& teff,
                    const std::vector<T13__>& vm_params,
                    const std::vector<int>& idx1_expand,
                    const std::vector<int>& idx2_expand,
                    const std::vector<Eigen::Matrix<T16__, Eigen::Dynamic, 1> >& teff_zero, std::ostream* pstream__) const {
        return STAN_kernel_all(n1, n2, K_const, components, x1, x2, x1_unnorm, x2_unnorm, alpha, ell, wrp, beta, teff, vm_params, idx1_expand, idx2_expand, teff_zero, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_lgp_latent_approx
  : public stan::model::model_base_crtp<model_lgp_latent_approx> {
private:
        int is_verbose;
        int is_likelihood_skipped;
        int N;
        int J;
        int num_X;
        int num_Z;
        int num_ell;
        int num_wrp;
        int num_beta;
        int num_teff;
        int num_het;
        int num_unc;
        std::vector<std::vector<int> > components;
        std::vector<vector_d> teff_zero;
        std::vector<vector_d> teff_lb;
        std::vector<vector_d> teff_ub;
        double delta;
        std::vector<double> vm_params;
        std::vector<vector_d> X;
        std::vector<std::vector<int> > X_mask;
        std::vector<double> X_scale;
        std::vector<std::vector<int> > Z;
        std::vector<int> Z_M;
        std::vector<std::vector<int> > BETA_IDX;
        std::vector<std::vector<int> > TEFF_IDX;
        std::vector<std::vector<int> > prior_alpha;
        std::vector<std::vector<int> > prior_ell;
        std::vector<std::vector<int> > prior_wrp;
        std::vector<std::vector<int> > prior_teff;
        std::vector<std::vector<double> > hyper_alpha;
        std::vector<std::vector<double> > hyper_ell;
        std::vector<std::vector<double> > hyper_wrp;
        std::vector<std::vector<double> > hyper_teff;
        std::vector<std::vector<double> > hyper_beta;
        int obs_model;
        std::vector<std::vector<int> > prior_sigma;
        std::vector<std::vector<int> > prior_phi;
        std::vector<std::vector<double> > hyper_sigma;
        std::vector<std::vector<double> > hyper_phi;
        std::vector<std::vector<double> > hyper_gamma;
        std::vector<std::vector<int> > y_int;
        std::vector<vector_d> y;
        std::vector<vector_d> c_hat;
        std::vector<std::vector<int> > y_num_trials;
        int len_eigvals;
        int len_eigvecs;
        std::vector<int> C_sizes;
        vector_d C_eigvals;
        vector_d C_eigvecs;
        double scale_bf;
        int num_bf;
        int num_xi;
public:
    model_lgp_latent_approx(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_lgp_latent_approx(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_lgp_latent_approx_namespace::model_lgp_latent_approx";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 465;
            context__.validate_dims("data initialization", "is_verbose", "int", context__.to_vec());
            is_verbose = int(0);
            vals_i__ = context__.vals_i("is_verbose");
            pos__ = 0;
            is_verbose = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_verbose", is_verbose, 0);
            check_less_or_equal(function__, "is_verbose", is_verbose, 1);
            current_statement_begin__ = 466;
            context__.validate_dims("data initialization", "is_likelihood_skipped", "int", context__.to_vec());
            is_likelihood_skipped = int(0);
            vals_i__ = context__.vals_i("is_likelihood_skipped");
            pos__ = 0;
            is_likelihood_skipped = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_likelihood_skipped", is_likelihood_skipped, 0);
            check_less_or_equal(function__, "is_likelihood_skipped", is_likelihood_skipped, 1);
            current_statement_begin__ = 469;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 470;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            check_greater_or_equal(function__, "J", J, 1);
            current_statement_begin__ = 471;
            context__.validate_dims("data initialization", "num_X", "int", context__.to_vec());
            num_X = int(0);
            vals_i__ = context__.vals_i("num_X");
            pos__ = 0;
            num_X = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_X", num_X, 0);
            current_statement_begin__ = 472;
            context__.validate_dims("data initialization", "num_Z", "int", context__.to_vec());
            num_Z = int(0);
            vals_i__ = context__.vals_i("num_Z");
            pos__ = 0;
            num_Z = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_Z", num_Z, 0);
            current_statement_begin__ = 473;
            context__.validate_dims("data initialization", "num_ell", "int", context__.to_vec());
            num_ell = int(0);
            vals_i__ = context__.vals_i("num_ell");
            pos__ = 0;
            num_ell = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_ell", num_ell, 0);
            current_statement_begin__ = 474;
            context__.validate_dims("data initialization", "num_wrp", "int", context__.to_vec());
            num_wrp = int(0);
            vals_i__ = context__.vals_i("num_wrp");
            pos__ = 0;
            num_wrp = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_wrp", num_wrp, 0);
            current_statement_begin__ = 475;
            context__.validate_dims("data initialization", "num_beta", "int", context__.to_vec());
            num_beta = int(0);
            vals_i__ = context__.vals_i("num_beta");
            pos__ = 0;
            num_beta = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_beta", num_beta, 0);
            current_statement_begin__ = 476;
            context__.validate_dims("data initialization", "num_teff", "int", context__.to_vec());
            num_teff = int(0);
            vals_i__ = context__.vals_i("num_teff");
            pos__ = 0;
            num_teff = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_teff", num_teff, 0);
            current_statement_begin__ = 477;
            context__.validate_dims("data initialization", "num_het", "int", context__.to_vec());
            num_het = int(0);
            vals_i__ = context__.vals_i("num_het");
            pos__ = 0;
            num_het = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_het", num_het, 0);
            current_statement_begin__ = 478;
            context__.validate_dims("data initialization", "num_unc", "int", context__.to_vec());
            num_unc = int(0);
            vals_i__ = context__.vals_i("num_unc");
            pos__ = 0;
            num_unc = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_unc", num_unc, 0);
            current_statement_begin__ = 492;
            validate_non_negative_index("components", "J", J);
            validate_non_negative_index("components", "7", 7);
            context__.validate_dims("data initialization", "components", "int", context__.to_vec(J,7));
            components = std::vector<std::vector<int> >(J, std::vector<int>(7, int(0)));
            vals_i__ = context__.vals_i("components");
            pos__ = 0;
            size_t components_k_0_max__ = J;
            size_t components_k_1_max__ = 7;
            for (size_t k_1__ = 0; k_1__ < components_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < components_k_0_max__; ++k_0__) {
                    components[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t components_i_0_max__ = J;
            size_t components_i_1_max__ = 7;
            for (size_t i_0__ = 0; i_0__ < components_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < components_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "components[i_0__][i_1__]", components[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 495;
            validate_non_negative_index("teff_zero", "num_teff", num_teff);
            validate_non_negative_index("teff_zero", "logical_gt(num_unc, 0)", logical_gt(num_unc, 0));
            context__.validate_dims("data initialization", "teff_zero", "vector_d", context__.to_vec(logical_gt(num_unc, 0),num_teff));
            teff_zero = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(logical_gt(num_unc, 0), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_teff));
            vals_r__ = context__.vals_r("teff_zero");
            pos__ = 0;
            size_t teff_zero_j_1_max__ = num_teff;
            size_t teff_zero_k_0_max__ = logical_gt(num_unc, 0);
            for (size_t j_1__ = 0; j_1__ < teff_zero_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < teff_zero_k_0_max__; ++k_0__) {
                    teff_zero[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 496;
            validate_non_negative_index("teff_lb", "num_teff", num_teff);
            validate_non_negative_index("teff_lb", "logical_gt(num_unc, 0)", logical_gt(num_unc, 0));
            context__.validate_dims("data initialization", "teff_lb", "vector_d", context__.to_vec(logical_gt(num_unc, 0),num_teff));
            teff_lb = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(logical_gt(num_unc, 0), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_teff));
            vals_r__ = context__.vals_r("teff_lb");
            pos__ = 0;
            size_t teff_lb_j_1_max__ = num_teff;
            size_t teff_lb_k_0_max__ = logical_gt(num_unc, 0);
            for (size_t j_1__ = 0; j_1__ < teff_lb_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < teff_lb_k_0_max__; ++k_0__) {
                    teff_lb[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 497;
            validate_non_negative_index("teff_ub", "num_teff", num_teff);
            validate_non_negative_index("teff_ub", "logical_gt(num_unc, 0)", logical_gt(num_unc, 0));
            context__.validate_dims("data initialization", "teff_ub", "vector_d", context__.to_vec(logical_gt(num_unc, 0),num_teff));
            teff_ub = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(logical_gt(num_unc, 0), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_teff));
            vals_r__ = context__.vals_r("teff_ub");
            pos__ = 0;
            size_t teff_ub_j_1_max__ = num_teff;
            size_t teff_ub_k_0_max__ = logical_gt(num_unc, 0);
            for (size_t j_1__ = 0; j_1__ < teff_ub_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < teff_ub_k_0_max__; ++k_0__) {
                    teff_ub[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 500;
            context__.validate_dims("data initialization", "delta", "double", context__.to_vec());
            delta = double(0);
            vals_r__ = context__.vals_r("delta");
            pos__ = 0;
            delta = vals_r__[pos__++];
            current_statement_begin__ = 501;
            validate_non_negative_index("vm_params", "2", 2);
            context__.validate_dims("data initialization", "vm_params", "double", context__.to_vec(2));
            vm_params = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("vm_params");
            pos__ = 0;
            size_t vm_params_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < vm_params_k_0_max__; ++k_0__) {
                vm_params[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 503;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "num_X", num_X);
            context__.validate_dims("data initialization", "X", "vector_d", context__.to_vec(num_X,N));
            X = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(num_X, Eigen::Matrix<double, Eigen::Dynamic, 1>(N));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_1_max__ = N;
            size_t X_k_0_max__ = num_X;
            for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < X_k_0_max__; ++k_0__) {
                    X[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 504;
            validate_non_negative_index("X_mask", "num_X", num_X);
            validate_non_negative_index("X_mask", "N", N);
            context__.validate_dims("data initialization", "X_mask", "int", context__.to_vec(num_X,N));
            X_mask = std::vector<std::vector<int> >(num_X, std::vector<int>(N, int(0)));
            vals_i__ = context__.vals_i("X_mask");
            pos__ = 0;
            size_t X_mask_k_0_max__ = num_X;
            size_t X_mask_k_1_max__ = N;
            for (size_t k_1__ = 0; k_1__ < X_mask_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < X_mask_k_0_max__; ++k_0__) {
                    X_mask[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t X_mask_i_0_max__ = num_X;
            size_t X_mask_i_1_max__ = N;
            for (size_t i_0__ = 0; i_0__ < X_mask_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < X_mask_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "X_mask[i_0__][i_1__]", X_mask[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "X_mask[i_0__][i_1__]", X_mask[i_0__][i_1__], 1);
                }
            }
            current_statement_begin__ = 505;
            validate_non_negative_index("X_scale", "num_X", num_X);
            context__.validate_dims("data initialization", "X_scale", "double", context__.to_vec(num_X));
            X_scale = std::vector<double>(num_X, double(0));
            vals_r__ = context__.vals_r("X_scale");
            pos__ = 0;
            size_t X_scale_k_0_max__ = num_X;
            for (size_t k_0__ = 0; k_0__ < X_scale_k_0_max__; ++k_0__) {
                X_scale[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 508;
            validate_non_negative_index("Z", "num_Z", num_Z);
            validate_non_negative_index("Z", "N", N);
            context__.validate_dims("data initialization", "Z", "int", context__.to_vec(num_Z,N));
            Z = std::vector<std::vector<int> >(num_Z, std::vector<int>(N, int(0)));
            vals_i__ = context__.vals_i("Z");
            pos__ = 0;
            size_t Z_k_0_max__ = num_Z;
            size_t Z_k_1_max__ = N;
            for (size_t k_1__ = 0; k_1__ < Z_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < Z_k_0_max__; ++k_0__) {
                    Z[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t Z_i_0_max__ = num_Z;
            size_t Z_i_1_max__ = N;
            for (size_t i_0__ = 0; i_0__ < Z_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < Z_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "Z[i_0__][i_1__]", Z[i_0__][i_1__], 1);
                }
            }
            current_statement_begin__ = 509;
            validate_non_negative_index("Z_M", "num_Z", num_Z);
            context__.validate_dims("data initialization", "Z_M", "int", context__.to_vec(num_Z));
            Z_M = std::vector<int>(num_Z, int(0));
            vals_i__ = context__.vals_i("Z_M");
            pos__ = 0;
            size_t Z_M_k_0_max__ = num_Z;
            for (size_t k_0__ = 0; k_0__ < Z_M_k_0_max__; ++k_0__) {
                Z_M[k_0__] = vals_i__[pos__++];
            }
            size_t Z_M_i_0_max__ = num_Z;
            for (size_t i_0__ = 0; i_0__ < Z_M_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Z_M[i_0__]", Z_M[i_0__], 0);
            }
            current_statement_begin__ = 515;
            validate_non_negative_index("BETA_IDX", "logical_gt(num_het, 0)", logical_gt(num_het, 0));
            validate_non_negative_index("BETA_IDX", "N", N);
            context__.validate_dims("data initialization", "BETA_IDX", "int", context__.to_vec(logical_gt(num_het, 0),N));
            BETA_IDX = std::vector<std::vector<int> >(logical_gt(num_het, 0), std::vector<int>(N, int(0)));
            vals_i__ = context__.vals_i("BETA_IDX");
            pos__ = 0;
            size_t BETA_IDX_k_0_max__ = logical_gt(num_het, 0);
            size_t BETA_IDX_k_1_max__ = N;
            for (size_t k_1__ = 0; k_1__ < BETA_IDX_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < BETA_IDX_k_0_max__; ++k_0__) {
                    BETA_IDX[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t BETA_IDX_i_0_max__ = logical_gt(num_het, 0);
            size_t BETA_IDX_i_1_max__ = N;
            for (size_t i_0__ = 0; i_0__ < BETA_IDX_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < BETA_IDX_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "BETA_IDX[i_0__][i_1__]", BETA_IDX[i_0__][i_1__], 1);
                    check_less_or_equal(function__, "BETA_IDX[i_0__][i_1__]", BETA_IDX[i_0__][i_1__], (num_beta + 1));
                }
            }
            current_statement_begin__ = 516;
            validate_non_negative_index("TEFF_IDX", "logical_gt(num_unc, 0)", logical_gt(num_unc, 0));
            validate_non_negative_index("TEFF_IDX", "N", N);
            context__.validate_dims("data initialization", "TEFF_IDX", "int", context__.to_vec(logical_gt(num_unc, 0),N));
            TEFF_IDX = std::vector<std::vector<int> >(logical_gt(num_unc, 0), std::vector<int>(N, int(0)));
            vals_i__ = context__.vals_i("TEFF_IDX");
            pos__ = 0;
            size_t TEFF_IDX_k_0_max__ = logical_gt(num_unc, 0);
            size_t TEFF_IDX_k_1_max__ = N;
            for (size_t k_1__ = 0; k_1__ < TEFF_IDX_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < TEFF_IDX_k_0_max__; ++k_0__) {
                    TEFF_IDX[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t TEFF_IDX_i_0_max__ = logical_gt(num_unc, 0);
            size_t TEFF_IDX_i_1_max__ = N;
            for (size_t i_0__ = 0; i_0__ < TEFF_IDX_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < TEFF_IDX_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "TEFF_IDX[i_0__][i_1__]", TEFF_IDX[i_0__][i_1__], 1);
                    check_less_or_equal(function__, "TEFF_IDX[i_0__][i_1__]", TEFF_IDX[i_0__][i_1__], (num_teff + 1));
                }
            }
            current_statement_begin__ = 518;
            validate_non_negative_index("prior_alpha", "J", J);
            validate_non_negative_index("prior_alpha", "2", 2);
            context__.validate_dims("data initialization", "prior_alpha", "int", context__.to_vec(J,2));
            prior_alpha = std::vector<std::vector<int> >(J, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("prior_alpha");
            pos__ = 0;
            size_t prior_alpha_k_0_max__ = J;
            size_t prior_alpha_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < prior_alpha_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_alpha_k_0_max__; ++k_0__) {
                    prior_alpha[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t prior_alpha_i_0_max__ = J;
            size_t prior_alpha_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_alpha_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_alpha_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_alpha[i_0__][i_1__]", prior_alpha[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 519;
            validate_non_negative_index("prior_ell", "num_ell", num_ell);
            validate_non_negative_index("prior_ell", "2", 2);
            context__.validate_dims("data initialization", "prior_ell", "int", context__.to_vec(num_ell,2));
            prior_ell = std::vector<std::vector<int> >(num_ell, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("prior_ell");
            pos__ = 0;
            size_t prior_ell_k_0_max__ = num_ell;
            size_t prior_ell_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < prior_ell_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_ell_k_0_max__; ++k_0__) {
                    prior_ell[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t prior_ell_i_0_max__ = num_ell;
            size_t prior_ell_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_ell_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_ell_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_ell[i_0__][i_1__]", prior_ell[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 520;
            validate_non_negative_index("prior_wrp", "num_wrp", num_wrp);
            validate_non_negative_index("prior_wrp", "2", 2);
            context__.validate_dims("data initialization", "prior_wrp", "int", context__.to_vec(num_wrp,2));
            prior_wrp = std::vector<std::vector<int> >(num_wrp, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("prior_wrp");
            pos__ = 0;
            size_t prior_wrp_k_0_max__ = num_wrp;
            size_t prior_wrp_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < prior_wrp_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_wrp_k_0_max__; ++k_0__) {
                    prior_wrp[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t prior_wrp_i_0_max__ = num_wrp;
            size_t prior_wrp_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_wrp_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_wrp_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_wrp[i_0__][i_1__]", prior_wrp[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 521;
            validate_non_negative_index("prior_teff", "logical_gt(num_unc, 0)", logical_gt(num_unc, 0));
            validate_non_negative_index("prior_teff", "2", 2);
            context__.validate_dims("data initialization", "prior_teff", "int", context__.to_vec(logical_gt(num_unc, 0),2));
            prior_teff = std::vector<std::vector<int> >(logical_gt(num_unc, 0), std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("prior_teff");
            pos__ = 0;
            size_t prior_teff_k_0_max__ = logical_gt(num_unc, 0);
            size_t prior_teff_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < prior_teff_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_teff_k_0_max__; ++k_0__) {
                    prior_teff[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t prior_teff_i_0_max__ = logical_gt(num_unc, 0);
            size_t prior_teff_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_teff_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_teff_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_teff[i_0__][i_1__]", prior_teff[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 522;
            validate_non_negative_index("hyper_alpha", "J", J);
            validate_non_negative_index("hyper_alpha", "3", 3);
            context__.validate_dims("data initialization", "hyper_alpha", "double", context__.to_vec(J,3));
            hyper_alpha = std::vector<std::vector<double> >(J, std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("hyper_alpha");
            pos__ = 0;
            size_t hyper_alpha_k_0_max__ = J;
            size_t hyper_alpha_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < hyper_alpha_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_alpha_k_0_max__; ++k_0__) {
                    hyper_alpha[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 523;
            validate_non_negative_index("hyper_ell", "num_ell", num_ell);
            validate_non_negative_index("hyper_ell", "3", 3);
            context__.validate_dims("data initialization", "hyper_ell", "double", context__.to_vec(num_ell,3));
            hyper_ell = std::vector<std::vector<double> >(num_ell, std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("hyper_ell");
            pos__ = 0;
            size_t hyper_ell_k_0_max__ = num_ell;
            size_t hyper_ell_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < hyper_ell_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_ell_k_0_max__; ++k_0__) {
                    hyper_ell[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 524;
            validate_non_negative_index("hyper_wrp", "num_wrp", num_wrp);
            validate_non_negative_index("hyper_wrp", "3", 3);
            context__.validate_dims("data initialization", "hyper_wrp", "double", context__.to_vec(num_wrp,3));
            hyper_wrp = std::vector<std::vector<double> >(num_wrp, std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("hyper_wrp");
            pos__ = 0;
            size_t hyper_wrp_k_0_max__ = num_wrp;
            size_t hyper_wrp_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < hyper_wrp_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_wrp_k_0_max__; ++k_0__) {
                    hyper_wrp[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 525;
            validate_non_negative_index("hyper_teff", "logical_gt(num_unc, 0)", logical_gt(num_unc, 0));
            validate_non_negative_index("hyper_teff", "3", 3);
            context__.validate_dims("data initialization", "hyper_teff", "double", context__.to_vec(logical_gt(num_unc, 0),3));
            hyper_teff = std::vector<std::vector<double> >(logical_gt(num_unc, 0), std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("hyper_teff");
            pos__ = 0;
            size_t hyper_teff_k_0_max__ = logical_gt(num_unc, 0);
            size_t hyper_teff_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < hyper_teff_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_teff_k_0_max__; ++k_0__) {
                    hyper_teff[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 526;
            validate_non_negative_index("hyper_beta", "logical_gt(num_het, 0)", logical_gt(num_het, 0));
            validate_non_negative_index("hyper_beta", "2", 2);
            context__.validate_dims("data initialization", "hyper_beta", "double", context__.to_vec(logical_gt(num_het, 0),2));
            hyper_beta = std::vector<std::vector<double> >(logical_gt(num_het, 0), std::vector<double>(2, double(0)));
            vals_r__ = context__.vals_r("hyper_beta");
            pos__ = 0;
            size_t hyper_beta_k_0_max__ = logical_gt(num_het, 0);
            size_t hyper_beta_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < hyper_beta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_beta_k_0_max__; ++k_0__) {
                    hyper_beta[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 527;
            context__.validate_dims("data initialization", "obs_model", "int", context__.to_vec());
            obs_model = int(0);
            vals_i__ = context__.vals_i("obs_model");
            pos__ = 0;
            obs_model = vals_i__[pos__++];
            check_greater_or_equal(function__, "obs_model", obs_model, 1);
            check_less_or_equal(function__, "obs_model", obs_model, 5);
            current_statement_begin__ = 528;
            validate_non_negative_index("prior_sigma", "logical_eq(obs_model, 1)", logical_eq(obs_model, 1));
            validate_non_negative_index("prior_sigma", "2", 2);
            context__.validate_dims("data initialization", "prior_sigma", "int", context__.to_vec(logical_eq(obs_model, 1),2));
            prior_sigma = std::vector<std::vector<int> >(logical_eq(obs_model, 1), std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("prior_sigma");
            pos__ = 0;
            size_t prior_sigma_k_0_max__ = logical_eq(obs_model, 1);
            size_t prior_sigma_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < prior_sigma_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_sigma_k_0_max__; ++k_0__) {
                    prior_sigma[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t prior_sigma_i_0_max__ = logical_eq(obs_model, 1);
            size_t prior_sigma_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_sigma_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_sigma_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_sigma[i_0__][i_1__]", prior_sigma[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 529;
            validate_non_negative_index("prior_phi", "logical_eq(obs_model, 3)", logical_eq(obs_model, 3));
            validate_non_negative_index("prior_phi", "2", 2);
            context__.validate_dims("data initialization", "prior_phi", "int", context__.to_vec(logical_eq(obs_model, 3),2));
            prior_phi = std::vector<std::vector<int> >(logical_eq(obs_model, 3), std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("prior_phi");
            pos__ = 0;
            size_t prior_phi_k_0_max__ = logical_eq(obs_model, 3);
            size_t prior_phi_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < prior_phi_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_phi_k_0_max__; ++k_0__) {
                    prior_phi[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t prior_phi_i_0_max__ = logical_eq(obs_model, 3);
            size_t prior_phi_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_phi_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_phi_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_phi[i_0__][i_1__]", prior_phi[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 530;
            validate_non_negative_index("hyper_sigma", "logical_eq(obs_model, 1)", logical_eq(obs_model, 1));
            validate_non_negative_index("hyper_sigma", "3", 3);
            context__.validate_dims("data initialization", "hyper_sigma", "double", context__.to_vec(logical_eq(obs_model, 1),3));
            hyper_sigma = std::vector<std::vector<double> >(logical_eq(obs_model, 1), std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("hyper_sigma");
            pos__ = 0;
            size_t hyper_sigma_k_0_max__ = logical_eq(obs_model, 1);
            size_t hyper_sigma_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < hyper_sigma_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_sigma_k_0_max__; ++k_0__) {
                    hyper_sigma[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 531;
            validate_non_negative_index("hyper_phi", "logical_eq(obs_model, 3)", logical_eq(obs_model, 3));
            validate_non_negative_index("hyper_phi", "3", 3);
            context__.validate_dims("data initialization", "hyper_phi", "double", context__.to_vec(logical_eq(obs_model, 3),3));
            hyper_phi = std::vector<std::vector<double> >(logical_eq(obs_model, 3), std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("hyper_phi");
            pos__ = 0;
            size_t hyper_phi_k_0_max__ = logical_eq(obs_model, 3);
            size_t hyper_phi_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < hyper_phi_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_phi_k_0_max__; ++k_0__) {
                    hyper_phi[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 532;
            validate_non_negative_index("hyper_gamma", "logical_eq(obs_model, 5)", logical_eq(obs_model, 5));
            validate_non_negative_index("hyper_gamma", "2", 2);
            context__.validate_dims("data initialization", "hyper_gamma", "double", context__.to_vec(logical_eq(obs_model, 5),2));
            hyper_gamma = std::vector<std::vector<double> >(logical_eq(obs_model, 5), std::vector<double>(2, double(0)));
            vals_r__ = context__.vals_r("hyper_gamma");
            pos__ = 0;
            size_t hyper_gamma_k_0_max__ = logical_eq(obs_model, 5);
            size_t hyper_gamma_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < hyper_gamma_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_gamma_k_0_max__; ++k_0__) {
                    hyper_gamma[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 533;
            validate_non_negative_index("y_int", "logical_gt(obs_model, 1)", logical_gt(obs_model, 1));
            validate_non_negative_index("y_int", "N", N);
            context__.validate_dims("data initialization", "y_int", "int", context__.to_vec(logical_gt(obs_model, 1),N));
            y_int = std::vector<std::vector<int> >(logical_gt(obs_model, 1), std::vector<int>(N, int(0)));
            vals_i__ = context__.vals_i("y_int");
            pos__ = 0;
            size_t y_int_k_0_max__ = logical_gt(obs_model, 1);
            size_t y_int_k_1_max__ = N;
            for (size_t k_1__ = 0; k_1__ < y_int_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < y_int_k_0_max__; ++k_0__) {
                    y_int[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t y_int_i_0_max__ = logical_gt(obs_model, 1);
            size_t y_int_i_1_max__ = N;
            for (size_t i_0__ = 0; i_0__ < y_int_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < y_int_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "y_int[i_0__][i_1__]", y_int[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 534;
            validate_non_negative_index("y", "N", N);
            validate_non_negative_index("y", "logical_eq(obs_model, 1)", logical_eq(obs_model, 1));
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(logical_eq(obs_model, 1),N));
            y = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(logical_eq(obs_model, 1), Eigen::Matrix<double, Eigen::Dynamic, 1>(N));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            size_t y_k_0_max__ = logical_eq(obs_model, 1);
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                    y[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 535;
            validate_non_negative_index("c_hat", "N", N);
            validate_non_negative_index("c_hat", "logical_gt(obs_model, 1)", logical_gt(obs_model, 1));
            context__.validate_dims("data initialization", "c_hat", "vector_d", context__.to_vec(logical_gt(obs_model, 1),N));
            c_hat = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(logical_gt(obs_model, 1), Eigen::Matrix<double, Eigen::Dynamic, 1>(N));
            vals_r__ = context__.vals_r("c_hat");
            pos__ = 0;
            size_t c_hat_j_1_max__ = N;
            size_t c_hat_k_0_max__ = logical_gt(obs_model, 1);
            for (size_t j_1__ = 0; j_1__ < c_hat_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < c_hat_k_0_max__; ++k_0__) {
                    c_hat[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 536;
            validate_non_negative_index("y_num_trials", "logical_gt(obs_model, 3)", logical_gt(obs_model, 3));
            validate_non_negative_index("y_num_trials", "N", N);
            context__.validate_dims("data initialization", "y_num_trials", "int", context__.to_vec(logical_gt(obs_model, 3),N));
            y_num_trials = std::vector<std::vector<int> >(logical_gt(obs_model, 3), std::vector<int>(N, int(0)));
            vals_i__ = context__.vals_i("y_num_trials");
            pos__ = 0;
            size_t y_num_trials_k_0_max__ = logical_gt(obs_model, 3);
            size_t y_num_trials_k_1_max__ = N;
            for (size_t k_1__ = 0; k_1__ < y_num_trials_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < y_num_trials_k_0_max__; ++k_0__) {
                    y_num_trials[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t y_num_trials_i_0_max__ = logical_gt(obs_model, 3);
            size_t y_num_trials_i_1_max__ = N;
            for (size_t i_0__ = 0; i_0__ < y_num_trials_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < y_num_trials_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "y_num_trials[i_0__][i_1__]", y_num_trials[i_0__][i_1__], 1);
                }
            }
            current_statement_begin__ = 539;
            context__.validate_dims("data initialization", "len_eigvals", "int", context__.to_vec());
            len_eigvals = int(0);
            vals_i__ = context__.vals_i("len_eigvals");
            pos__ = 0;
            len_eigvals = vals_i__[pos__++];
            check_greater_or_equal(function__, "len_eigvals", len_eigvals, 1);
            current_statement_begin__ = 540;
            context__.validate_dims("data initialization", "len_eigvecs", "int", context__.to_vec());
            len_eigvecs = int(0);
            vals_i__ = context__.vals_i("len_eigvecs");
            pos__ = 0;
            len_eigvecs = vals_i__[pos__++];
            check_greater_or_equal(function__, "len_eigvecs", len_eigvecs, 1);
            current_statement_begin__ = 541;
            validate_non_negative_index("C_sizes", "J", J);
            context__.validate_dims("data initialization", "C_sizes", "int", context__.to_vec(J));
            C_sizes = std::vector<int>(J, int(0));
            vals_i__ = context__.vals_i("C_sizes");
            pos__ = 0;
            size_t C_sizes_k_0_max__ = J;
            for (size_t k_0__ = 0; k_0__ < C_sizes_k_0_max__; ++k_0__) {
                C_sizes[k_0__] = vals_i__[pos__++];
            }
            size_t C_sizes_i_0_max__ = J;
            for (size_t i_0__ = 0; i_0__ < C_sizes_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "C_sizes[i_0__]", C_sizes[i_0__], 0);
            }
            current_statement_begin__ = 542;
            validate_non_negative_index("C_eigvals", "len_eigvals", len_eigvals);
            context__.validate_dims("data initialization", "C_eigvals", "vector_d", context__.to_vec(len_eigvals));
            C_eigvals = Eigen::Matrix<double, Eigen::Dynamic, 1>(len_eigvals);
            vals_r__ = context__.vals_r("C_eigvals");
            pos__ = 0;
            size_t C_eigvals_j_1_max__ = len_eigvals;
            for (size_t j_1__ = 0; j_1__ < C_eigvals_j_1_max__; ++j_1__) {
                C_eigvals(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "C_eigvals", C_eigvals, 0);
            current_statement_begin__ = 543;
            validate_non_negative_index("C_eigvecs", "len_eigvecs", len_eigvecs);
            context__.validate_dims("data initialization", "C_eigvecs", "vector_d", context__.to_vec(len_eigvecs));
            C_eigvecs = Eigen::Matrix<double, Eigen::Dynamic, 1>(len_eigvecs);
            vals_r__ = context__.vals_r("C_eigvecs");
            pos__ = 0;
            size_t C_eigvecs_j_1_max__ = len_eigvecs;
            for (size_t j_1__ = 0; j_1__ < C_eigvecs_j_1_max__; ++j_1__) {
                C_eigvecs(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 546;
            context__.validate_dims("data initialization", "scale_bf", "double", context__.to_vec());
            scale_bf = double(0);
            vals_r__ = context__.vals_r("scale_bf");
            pos__ = 0;
            scale_bf = vals_r__[pos__++];
            check_greater_or_equal(function__, "scale_bf", scale_bf, 0);
            current_statement_begin__ = 547;
            context__.validate_dims("data initialization", "num_bf", "int", context__.to_vec());
            num_bf = int(0);
            vals_i__ = context__.vals_i("num_bf");
            pos__ = 0;
            num_bf = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_bf", num_bf, 1);
            current_statement_begin__ = 548;
            context__.validate_dims("data initialization", "num_xi", "int", context__.to_vec());
            num_xi = int(0);
            vals_i__ = context__.vals_i("num_xi");
            pos__ = 0;
            num_xi = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_xi", num_xi, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 555;
            validate_non_negative_index("alpha", "J", J);
            num_params_r__ += (1 * J);
            current_statement_begin__ = 556;
            validate_non_negative_index("ell", "num_ell", num_ell);
            num_params_r__ += (1 * num_ell);
            current_statement_begin__ = 557;
            validate_non_negative_index("wrp", "num_wrp", num_wrp);
            num_params_r__ += (1 * num_wrp);
            current_statement_begin__ = 558;
            validate_non_negative_index("beta", "num_beta", num_beta);
            validate_non_negative_index("beta", "logical_gt(num_het, 0)", logical_gt(num_het, 0));
            num_params_r__ += (num_beta * logical_gt(num_het, 0));
            current_statement_begin__ = 559;
            validate_non_negative_index("teff_raw", "num_teff", num_teff);
            validate_non_negative_index("teff_raw", "logical_gt(num_unc, 0)", logical_gt(num_unc, 0));
            num_params_r__ += (num_teff * logical_gt(num_unc, 0));
            current_statement_begin__ = 560;
            validate_non_negative_index("sigma", "logical_eq(obs_model, 1)", logical_eq(obs_model, 1));
            num_params_r__ += (1 * logical_eq(obs_model, 1));
            current_statement_begin__ = 561;
            validate_non_negative_index("phi", "logical_eq(obs_model, 3)", logical_eq(obs_model, 3));
            num_params_r__ += (1 * logical_eq(obs_model, 3));
            current_statement_begin__ = 562;
            validate_non_negative_index("gamma", "logical_eq(obs_model, 5)", logical_eq(obs_model, 5));
            num_params_r__ += (1 * logical_eq(obs_model, 5));
            current_statement_begin__ = 563;
            validate_non_negative_index("xi", "num_xi", num_xi);
            num_params_r__ += num_xi;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_lgp_latent_approx() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 555;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "J", J);
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec(J));
        std::vector<double> alpha(J, double(0));
        size_t alpha_k_0_max__ = J;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            alpha[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_i_0_max__ = J;
        for (size_t i_0__ = 0; i_0__ < alpha_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(1e-12, alpha[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 556;
        if (!(context__.contains_r("ell")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ell missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ell");
        pos__ = 0U;
        validate_non_negative_index("ell", "num_ell", num_ell);
        context__.validate_dims("parameter initialization", "ell", "double", context__.to_vec(num_ell));
        std::vector<double> ell(num_ell, double(0));
        size_t ell_k_0_max__ = num_ell;
        for (size_t k_0__ = 0; k_0__ < ell_k_0_max__; ++k_0__) {
            ell[k_0__] = vals_r__[pos__++];
        }
        size_t ell_i_0_max__ = num_ell;
        for (size_t i_0__ = 0; i_0__ < ell_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(1e-12, ell[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ell: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 557;
        if (!(context__.contains_r("wrp")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable wrp missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("wrp");
        pos__ = 0U;
        validate_non_negative_index("wrp", "num_wrp", num_wrp);
        context__.validate_dims("parameter initialization", "wrp", "double", context__.to_vec(num_wrp));
        std::vector<double> wrp(num_wrp, double(0));
        size_t wrp_k_0_max__ = num_wrp;
        for (size_t k_0__ = 0; k_0__ < wrp_k_0_max__; ++k_0__) {
            wrp[k_0__] = vals_r__[pos__++];
        }
        size_t wrp_i_0_max__ = num_wrp;
        for (size_t i_0__ = 0; i_0__ < wrp_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(1e-12, wrp[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable wrp: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 558;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "num_beta", num_beta);
        validate_non_negative_index("beta", "logical_gt(num_het, 0)", logical_gt(num_het, 0));
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(logical_gt(num_het, 0),num_beta));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta(logical_gt(num_het, 0), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_beta));
        size_t beta_j_1_max__ = num_beta;
        size_t beta_k_0_max__ = logical_gt(num_het, 0);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                beta[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t beta_i_0_max__ = logical_gt(num_het, 0);
        for (size_t i_0__ = 0; i_0__ < beta_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lub_unconstrain(1e-12, (1 - 1e-12), beta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 559;
        if (!(context__.contains_r("teff_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable teff_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("teff_raw");
        pos__ = 0U;
        validate_non_negative_index("teff_raw", "num_teff", num_teff);
        validate_non_negative_index("teff_raw", "logical_gt(num_unc, 0)", logical_gt(num_unc, 0));
        context__.validate_dims("parameter initialization", "teff_raw", "vector_d", context__.to_vec(logical_gt(num_unc, 0),num_teff));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > teff_raw(logical_gt(num_unc, 0), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_teff));
        size_t teff_raw_j_1_max__ = num_teff;
        size_t teff_raw_k_0_max__ = logical_gt(num_unc, 0);
        for (size_t j_1__ = 0; j_1__ < teff_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < teff_raw_k_0_max__; ++k_0__) {
                teff_raw[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t teff_raw_i_0_max__ = logical_gt(num_unc, 0);
        for (size_t i_0__ = 0; i_0__ < teff_raw_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lub_unconstrain(1e-12, (1 - 1e-12), teff_raw[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable teff_raw: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 560;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "logical_eq(obs_model, 1)", logical_eq(obs_model, 1));
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec(logical_eq(obs_model, 1)));
        std::vector<double> sigma(logical_eq(obs_model, 1), double(0));
        size_t sigma_k_0_max__ = logical_eq(obs_model, 1);
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            sigma[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_i_0_max__ = logical_eq(obs_model, 1);
        for (size_t i_0__ = 0; i_0__ < sigma_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(1e-12, sigma[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 561;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "logical_eq(obs_model, 3)", logical_eq(obs_model, 3));
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec(logical_eq(obs_model, 3)));
        std::vector<double> phi(logical_eq(obs_model, 3), double(0));
        size_t phi_k_0_max__ = logical_eq(obs_model, 3);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            phi[k_0__] = vals_r__[pos__++];
        }
        size_t phi_i_0_max__ = logical_eq(obs_model, 3);
        for (size_t i_0__ = 0; i_0__ < phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(1e-12, phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 562;
        if (!(context__.contains_r("gamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        validate_non_negative_index("gamma", "logical_eq(obs_model, 5)", logical_eq(obs_model, 5));
        context__.validate_dims("parameter initialization", "gamma", "double", context__.to_vec(logical_eq(obs_model, 5)));
        std::vector<double> gamma(logical_eq(obs_model, 5), double(0));
        size_t gamma_k_0_max__ = logical_eq(obs_model, 5);
        for (size_t k_0__ = 0; k_0__ < gamma_k_0_max__; ++k_0__) {
            gamma[k_0__] = vals_r__[pos__++];
        }
        size_t gamma_i_0_max__ = logical_eq(obs_model, 5);
        for (size_t i_0__ = 0; i_0__ < gamma_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(1e-12, (1 - 1e-12), gamma[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 563;
        if (!(context__.contains_r("xi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable xi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("xi");
        pos__ = 0U;
        validate_non_negative_index("xi", "num_xi", num_xi);
        context__.validate_dims("parameter initialization", "xi", "vector_d", context__.to_vec(num_xi));
        Eigen::Matrix<double, Eigen::Dynamic, 1> xi(num_xi);
        size_t xi_j_1_max__ = num_xi;
        for (size_t j_1__ = 0; j_1__ < xi_j_1_max__; ++j_1__) {
            xi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(xi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable xi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 555;
            std::vector<local_scalar_t__> alpha;
            size_t alpha_d_0_max__ = J;
            alpha.reserve(alpha_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha.push_back(in__.scalar_lb_constrain(1e-12, lp__));
                else
                    alpha.push_back(in__.scalar_lb_constrain(1e-12));
            }
            current_statement_begin__ = 556;
            std::vector<local_scalar_t__> ell;
            size_t ell_d_0_max__ = num_ell;
            ell.reserve(ell_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ell_d_0_max__; ++d_0__) {
                if (jacobian__)
                    ell.push_back(in__.scalar_lb_constrain(1e-12, lp__));
                else
                    ell.push_back(in__.scalar_lb_constrain(1e-12));
            }
            current_statement_begin__ = 557;
            std::vector<local_scalar_t__> wrp;
            size_t wrp_d_0_max__ = num_wrp;
            wrp.reserve(wrp_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < wrp_d_0_max__; ++d_0__) {
                if (jacobian__)
                    wrp.push_back(in__.scalar_lb_constrain(1e-12, lp__));
                else
                    wrp.push_back(in__.scalar_lb_constrain(1e-12));
            }
            current_statement_begin__ = 558;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > beta;
            size_t beta_d_0_max__ = logical_gt(num_het, 0);
            beta.reserve(beta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta.push_back(in__.vector_lub_constrain(1e-12, (1 - 1e-12), num_beta, lp__));
                else
                    beta.push_back(in__.vector_lub_constrain(1e-12, (1 - 1e-12), num_beta));
            }
            current_statement_begin__ = 559;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > teff_raw;
            size_t teff_raw_d_0_max__ = logical_gt(num_unc, 0);
            teff_raw.reserve(teff_raw_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < teff_raw_d_0_max__; ++d_0__) {
                if (jacobian__)
                    teff_raw.push_back(in__.vector_lub_constrain(1e-12, (1 - 1e-12), num_teff, lp__));
                else
                    teff_raw.push_back(in__.vector_lub_constrain(1e-12, (1 - 1e-12), num_teff));
            }
            current_statement_begin__ = 560;
            std::vector<local_scalar_t__> sigma;
            size_t sigma_d_0_max__ = logical_eq(obs_model, 1);
            sigma.reserve(sigma_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma.push_back(in__.scalar_lb_constrain(1e-12, lp__));
                else
                    sigma.push_back(in__.scalar_lb_constrain(1e-12));
            }
            current_statement_begin__ = 561;
            std::vector<local_scalar_t__> phi;
            size_t phi_d_0_max__ = logical_eq(obs_model, 3);
            phi.reserve(phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    phi.push_back(in__.scalar_lb_constrain(1e-12, lp__));
                else
                    phi.push_back(in__.scalar_lb_constrain(1e-12));
            }
            current_statement_begin__ = 562;
            std::vector<local_scalar_t__> gamma;
            size_t gamma_d_0_max__ = logical_eq(obs_model, 5);
            gamma.reserve(gamma_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < gamma_d_0_max__; ++d_0__) {
                if (jacobian__)
                    gamma.push_back(in__.scalar_lub_constrain(1e-12, (1 - 1e-12), lp__));
                else
                    gamma.push_back(in__.scalar_lub_constrain(1e-12, (1 - 1e-12)));
            }
            current_statement_begin__ = 563;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> xi;
            (void) xi;  // dummy to suppress unused var warning
            if (jacobian__)
                xi = in__.vector_constrain(num_xi, lp__);
            else
                xi = in__.vector_constrain(num_xi);
            // transformed parameters
            current_statement_begin__ = 567;
            validate_non_negative_index("f_latent", "N", N);
            validate_non_negative_index("f_latent", "J", J);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > f_latent(J, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(N));
            stan::math::initialize(f_latent, DUMMY_VAR__);
            stan::math::fill(f_latent, DUMMY_VAR__);
            current_statement_begin__ = 569;
            validate_non_negative_index("teff", "num_teff", num_teff);
            validate_non_negative_index("teff", "logical_gt(num_unc, 0)", logical_gt(num_unc, 0));
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > teff(logical_gt(num_unc, 0), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(num_teff));
            stan::math::initialize(teff, DUMMY_VAR__);
            stan::math::fill(teff, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 570;
            if (as_bool(logical_gt(num_unc, 0))) {
                current_statement_begin__ = 571;
                stan::model::assign(teff, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            add(get_base1(teff_lb, 1, "teff_lb", 1), elt_multiply(subtract(get_base1(teff_ub, 1, "teff_ub", 1), get_base1(teff_lb, 1, "teff_lb", 1)), get_base1(teff_raw, 1, "teff_raw", 1))), 
                            "assigning variable teff");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 567;
            size_t f_latent_k_0_max__ = J;
            size_t f_latent_j_1_max__ = N;
            for (size_t k_0__ = 0; k_0__ < f_latent_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < f_latent_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(f_latent[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: f_latent" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable f_latent: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 569;
            size_t teff_k_0_max__ = logical_gt(num_unc, 0);
            size_t teff_j_1_max__ = num_teff;
            for (size_t k_0__ = 0; k_0__ < teff_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < teff_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(teff[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: teff" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable teff: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            {
            current_statement_begin__ = 576;
            validate_non_negative_index("f_sum", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> f_sum(N);
            stan::math::initialize(f_sum, DUMMY_VAR__);
            stan::math::fill(f_sum, DUMMY_VAR__);
            stan::math::assign(f_sum,rep_vector(0.0, N));
            current_statement_begin__ = 578;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 579;
                lp_accum__.add(STAN_log_prior(get_base1(alpha, j, "alpha", 1), get_base1(prior_alpha, j, "prior_alpha", 1), get_base1(hyper_alpha, j, "hyper_alpha", 1), pstream__));
            }
            current_statement_begin__ = 583;
            for (int j = 1; j <= num_ell; ++j) {
                current_statement_begin__ = 584;
                lp_accum__.add(STAN_log_prior(get_base1(ell, j, "ell", 1), get_base1(prior_ell, j, "prior_ell", 1), get_base1(hyper_ell, j, "hyper_ell", 1), pstream__));
            }
            current_statement_begin__ = 588;
            for (int j = 1; j <= num_wrp; ++j) {
                current_statement_begin__ = 589;
                lp_accum__.add(STAN_log_prior(get_base1(wrp, j, "wrp", 1), get_base1(prior_wrp, j, "prior_wrp", 1), get_base1(hyper_wrp, j, "hyper_wrp", 1), pstream__));
            }
            current_statement_begin__ = 593;
            if (as_bool(logical_gt(num_het, 0))) {
                current_statement_begin__ = 594;
                lp_accum__.add(beta_log(get_base1(beta, 1, "beta", 1), get_base1(get_base1(hyper_beta, 1, "hyper_beta", 1), 1, "hyper_beta", 2), get_base1(get_base1(hyper_beta, 1, "hyper_beta", 1), 2, "hyper_beta", 2)));
            }
            current_statement_begin__ = 598;
            if (as_bool(logical_gt(num_unc, 0))) {
                {
                current_statement_begin__ = 599;
                int ptype(0);
                (void) ptype;  // dummy to suppress unused var warning
                stan::math::fill(ptype, std::numeric_limits<int>::min());
                stan::math::assign(ptype,get_base1(get_base1(prior_teff, 1, "prior_teff", 1), 1, "prior_teff", 2));
                current_statement_begin__ = 600;
                int is_backwards(0);
                (void) is_backwards;  // dummy to suppress unused var warning
                stan::math::fill(is_backwards, std::numeric_limits<int>::min());
                stan::math::assign(is_backwards,get_base1(get_base1(prior_teff, 1, "prior_teff", 1), 2, "prior_teff", 2));
                current_statement_begin__ = 601;
                local_scalar_t__ direction(DUMMY_VAR__);
                (void) direction;  // dummy to suppress unused var warning
                stan::math::initialize(direction, DUMMY_VAR__);
                stan::math::fill(direction, DUMMY_VAR__);
                stan::math::assign(direction,pow(-(1.0), is_backwards));
                current_statement_begin__ = 602;
                validate_non_negative_index("tx", "num_teff", num_teff);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tx(num_teff);
                stan::math::initialize(tx, DUMMY_VAR__);
                stan::math::fill(tx, DUMMY_VAR__);
                stan::math::assign(tx,multiply(direction, subtract(get_base1(teff, 1, "teff", 1), get_base1(teff_zero, 1, "teff_zero", 1))));
                current_statement_begin__ = 603;
                for (int k = 1; k <= num_teff; ++k) {
                    current_statement_begin__ = 604;
                    lp_accum__.add(STAN_log_prior(get_base1(tx, k, "tx", 1), static_cast<std::vector<int> >(stan::math::array_builder<int >().add(ptype).add(0).array()), get_base1(hyper_teff, 1, "hyper_teff", 1), pstream__));
                }
                }
            }
            current_statement_begin__ = 608;
            if (as_bool(logical_eq(obs_model, 1))) {
                current_statement_begin__ = 609;
                lp_accum__.add(STAN_log_prior(get_base1(sigma, 1, "sigma", 1), get_base1(prior_sigma, 1, "prior_sigma", 1), get_base1(hyper_sigma, 1, "hyper_sigma", 1), pstream__));
            } else if (as_bool(logical_eq(obs_model, 3))) {
                current_statement_begin__ = 611;
                lp_accum__.add(STAN_log_prior(get_base1(phi, 1, "phi", 1), get_base1(prior_phi, 1, "prior_phi", 1), get_base1(hyper_phi, 1, "hyper_phi", 1), pstream__));
            } else if (as_bool(logical_eq(obs_model, 5))) {
                current_statement_begin__ = 613;
                lp_accum__.add(beta_log(get_base1(gamma, 1, "gamma", 1), get_base1(get_base1(hyper_gamma, 1, "hyper_gamma", 1), 2, "hyper_gamma", 2), get_base1(get_base1(hyper_gamma, 1, "hyper_gamma", 1), 2, "hyper_gamma", 2)));
            }
            current_statement_begin__ = 615;
            if (as_bool((primitive_value(logical_eq(obs_model, 1)) && primitive_value(logical_eq(is_likelihood_skipped, 0))))) {
                current_statement_begin__ = 617;
                lp_accum__.add(normal_log(get_base1(y, 1, "y", 1), f_sum, get_base1(sigma, 1, "sigma", 1)));
            } else if (as_bool((primitive_value(logical_eq(obs_model, 2)) && primitive_value(logical_eq(is_likelihood_skipped, 0))))) {
                {
                current_statement_begin__ = 620;
                validate_non_negative_index("LOG_MU", "N", N);
                std::vector<local_scalar_t__  > LOG_MU(N, local_scalar_t__(DUMMY_VAR__));
                stan::math::initialize(LOG_MU, DUMMY_VAR__);
                stan::math::fill(LOG_MU, DUMMY_VAR__);
                stan::math::assign(LOG_MU,to_array_1d(f_sum));
                current_statement_begin__ = 621;
                lp_accum__.add(poisson_log_log(get_base1(y_int, 1, "y_int", 1), LOG_MU));
                }
            } else if (as_bool((primitive_value(logical_eq(obs_model, 3)) && primitive_value(logical_eq(is_likelihood_skipped, 0))))) {
                {
                current_statement_begin__ = 624;
                validate_non_negative_index("LOG_MU", "N", N);
                std::vector<local_scalar_t__  > LOG_MU(N, local_scalar_t__(DUMMY_VAR__));
                stan::math::initialize(LOG_MU, DUMMY_VAR__);
                stan::math::fill(LOG_MU, DUMMY_VAR__);
                stan::math::assign(LOG_MU,to_array_1d(f_sum));
                current_statement_begin__ = 625;
                validate_non_negative_index("PHI", "N", N);
                std::vector<local_scalar_t__  > PHI(N, local_scalar_t__(DUMMY_VAR__));
                stan::math::initialize(PHI, DUMMY_VAR__);
                stan::math::fill(PHI, DUMMY_VAR__);
                stan::math::assign(PHI,to_array_1d(rep_vector(get_base1(phi, 1, "phi", 1), N)));
                current_statement_begin__ = 626;
                lp_accum__.add(neg_binomial_2_log_log(get_base1(y_int, 1, "y_int", 1), LOG_MU, PHI));
                }
            } else if (as_bool((primitive_value(logical_eq(obs_model, 4)) && primitive_value(logical_eq(is_likelihood_skipped, 0))))) {
                {
                current_statement_begin__ = 629;
                validate_non_negative_index("LOGIT_P", "N", N);
                std::vector<local_scalar_t__  > LOGIT_P(N, local_scalar_t__(DUMMY_VAR__));
                stan::math::initialize(LOGIT_P, DUMMY_VAR__);
                stan::math::fill(LOGIT_P, DUMMY_VAR__);
                stan::math::assign(LOGIT_P,to_array_1d(f_sum));
                current_statement_begin__ = 630;
                lp_accum__.add(binomial_logit_log(get_base1(y_int, 1, "y_int", 1), get_base1(y_num_trials, 1, "y_num_trials", 1), LOGIT_P));
                }
            } else if (as_bool((primitive_value(logical_eq(obs_model, 5)) && primitive_value(logical_eq(is_likelihood_skipped, 0))))) {
                {
                current_statement_begin__ = 633;
                local_scalar_t__ tgam(DUMMY_VAR__);
                (void) tgam;  // dummy to suppress unused var warning
                stan::math::initialize(tgam, DUMMY_VAR__);
                stan::math::fill(tgam, DUMMY_VAR__);
                stan::math::assign(tgam,(inv(get_base1(gamma, 1, "gamma", 1)) - 1.0));
                current_statement_begin__ = 634;
                validate_non_negative_index("P", "N", N);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> P(N);
                stan::math::initialize(P, DUMMY_VAR__);
                stan::math::fill(P, DUMMY_VAR__);
                stan::math::assign(P,inv_logit(f_sum));
                current_statement_begin__ = 635;
                validate_non_negative_index("aa", "N", N);
                std::vector<local_scalar_t__  > aa(N, local_scalar_t__(DUMMY_VAR__));
                stan::math::initialize(aa, DUMMY_VAR__);
                stan::math::fill(aa, DUMMY_VAR__);
                stan::math::assign(aa,to_array_1d(multiply(P, tgam)));
                current_statement_begin__ = 636;
                validate_non_negative_index("bb", "N", N);
                std::vector<local_scalar_t__  > bb(N, local_scalar_t__(DUMMY_VAR__));
                stan::math::initialize(bb, DUMMY_VAR__);
                stan::math::fill(bb, DUMMY_VAR__);
                stan::math::assign(bb,to_array_1d(multiply(subtract(1.0, P), tgam)));
                current_statement_begin__ = 637;
                lp_accum__.add(beta_binomial_log(get_base1(y_int, 1, "y_int", 1), get_base1(y_num_trials, 1, "y_num_trials", 1), aa, bb));
                }
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("ell");
        names__.push_back("wrp");
        names__.push_back("beta");
        names__.push_back("teff_raw");
        names__.push_back("sigma");
        names__.push_back("phi");
        names__.push_back("gamma");
        names__.push_back("xi");
        names__.push_back("f_latent");
        names__.push_back("teff");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_ell);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_wrp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(num_het, 0));
        dims__.push_back(num_beta);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(num_unc, 0));
        dims__.push_back(num_teff);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(obs_model, 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(obs_model, 3));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(obs_model, 5));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_xi);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(num_unc, 0));
        dims__.push_back(num_teff);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_lgp_latent_approx_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> alpha;
        size_t alpha_d_0_max__ = J;
        alpha.reserve(alpha_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
            alpha.push_back(in__.scalar_lb_constrain(1e-12));
        }
        size_t alpha_k_0_max__ = J;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }
        std::vector<double> ell;
        size_t ell_d_0_max__ = num_ell;
        ell.reserve(ell_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ell_d_0_max__; ++d_0__) {
            ell.push_back(in__.scalar_lb_constrain(1e-12));
        }
        size_t ell_k_0_max__ = num_ell;
        for (size_t k_0__ = 0; k_0__ < ell_k_0_max__; ++k_0__) {
            vars__.push_back(ell[k_0__]);
        }
        std::vector<double> wrp;
        size_t wrp_d_0_max__ = num_wrp;
        wrp.reserve(wrp_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < wrp_d_0_max__; ++d_0__) {
            wrp.push_back(in__.scalar_lb_constrain(1e-12));
        }
        size_t wrp_k_0_max__ = num_wrp;
        for (size_t k_0__ = 0; k_0__ < wrp_k_0_max__; ++k_0__) {
            vars__.push_back(wrp[k_0__]);
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta;
        size_t beta_d_0_max__ = logical_gt(num_het, 0);
        beta.reserve(beta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_d_0_max__; ++d_0__) {
            beta.push_back(in__.vector_lub_constrain(1e-12, (1 - 1e-12), num_beta));
        }
        size_t beta_j_1_max__ = num_beta;
        size_t beta_k_0_max__ = logical_gt(num_het, 0);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                vars__.push_back(beta[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > teff_raw;
        size_t teff_raw_d_0_max__ = logical_gt(num_unc, 0);
        teff_raw.reserve(teff_raw_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < teff_raw_d_0_max__; ++d_0__) {
            teff_raw.push_back(in__.vector_lub_constrain(1e-12, (1 - 1e-12), num_teff));
        }
        size_t teff_raw_j_1_max__ = num_teff;
        size_t teff_raw_k_0_max__ = logical_gt(num_unc, 0);
        for (size_t j_1__ = 0; j_1__ < teff_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < teff_raw_k_0_max__; ++k_0__) {
                vars__.push_back(teff_raw[k_0__](j_1__));
            }
        }
        std::vector<double> sigma;
        size_t sigma_d_0_max__ = logical_eq(obs_model, 1);
        sigma.reserve(sigma_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
            sigma.push_back(in__.scalar_lb_constrain(1e-12));
        }
        size_t sigma_k_0_max__ = logical_eq(obs_model, 1);
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        std::vector<double> phi;
        size_t phi_d_0_max__ = logical_eq(obs_model, 3);
        phi.reserve(phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
            phi.push_back(in__.scalar_lb_constrain(1e-12));
        }
        size_t phi_k_0_max__ = logical_eq(obs_model, 3);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            vars__.push_back(phi[k_0__]);
        }
        std::vector<double> gamma;
        size_t gamma_d_0_max__ = logical_eq(obs_model, 5);
        gamma.reserve(gamma_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < gamma_d_0_max__; ++d_0__) {
            gamma.push_back(in__.scalar_lub_constrain(1e-12, (1 - 1e-12)));
        }
        size_t gamma_k_0_max__ = logical_eq(obs_model, 5);
        for (size_t k_0__ = 0; k_0__ < gamma_k_0_max__; ++k_0__) {
            vars__.push_back(gamma[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> xi = in__.vector_constrain(num_xi);
        size_t xi_j_1_max__ = num_xi;
        for (size_t j_1__ = 0; j_1__ < xi_j_1_max__; ++j_1__) {
            vars__.push_back(xi(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 567;
            validate_non_negative_index("f_latent", "N", N);
            validate_non_negative_index("f_latent", "J", J);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > f_latent(J, Eigen::Matrix<double, Eigen::Dynamic, 1>(N));
            stan::math::initialize(f_latent, DUMMY_VAR__);
            stan::math::fill(f_latent, DUMMY_VAR__);
            current_statement_begin__ = 569;
            validate_non_negative_index("teff", "num_teff", num_teff);
            validate_non_negative_index("teff", "logical_gt(num_unc, 0)", logical_gt(num_unc, 0));
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > teff(logical_gt(num_unc, 0), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_teff));
            stan::math::initialize(teff, DUMMY_VAR__);
            stan::math::fill(teff, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 570;
            if (as_bool(logical_gt(num_unc, 0))) {
                current_statement_begin__ = 571;
                stan::model::assign(teff, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            add(get_base1(teff_lb, 1, "teff_lb", 1), elt_multiply(subtract(get_base1(teff_ub, 1, "teff_ub", 1), get_base1(teff_lb, 1, "teff_lb", 1)), get_base1(teff_raw, 1, "teff_raw", 1))), 
                            "assigning variable teff");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t f_latent_j_1_max__ = N;
                size_t f_latent_k_0_max__ = J;
                for (size_t j_1__ = 0; j_1__ < f_latent_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < f_latent_k_0_max__; ++k_0__) {
                        vars__.push_back(f_latent[k_0__](j_1__));
                    }
                }
                size_t teff_j_1_max__ = num_teff;
                size_t teff_k_0_max__ = logical_gt(num_unc, 0);
                for (size_t j_1__ = 0; j_1__ < teff_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < teff_k_0_max__; ++k_0__) {
                        vars__.push_back(teff[k_0__](j_1__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_lgp_latent_approx";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_k_0_max__ = J;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ell_k_0_max__ = num_ell;
        for (size_t k_0__ = 0; k_0__ < ell_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ell" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t wrp_k_0_max__ = num_wrp;
        for (size_t k_0__ = 0; k_0__ < wrp_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "wrp" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = num_beta;
        size_t beta_k_0_max__ = logical_gt(num_het, 0);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t teff_raw_j_1_max__ = num_teff;
        size_t teff_raw_k_0_max__ = logical_gt(num_unc, 0);
        for (size_t j_1__ = 0; j_1__ < teff_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < teff_raw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "teff_raw" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_k_0_max__ = logical_eq(obs_model, 1);
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = logical_eq(obs_model, 3);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_k_0_max__ = logical_eq(obs_model, 5);
        for (size_t k_0__ = 0; k_0__ < gamma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t xi_j_1_max__ = num_xi;
        for (size_t j_1__ = 0; j_1__ < xi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t f_latent_j_1_max__ = N;
            size_t f_latent_k_0_max__ = J;
            for (size_t j_1__ = 0; j_1__ < f_latent_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < f_latent_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "f_latent" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t teff_j_1_max__ = num_teff;
            size_t teff_k_0_max__ = logical_gt(num_unc, 0);
            for (size_t j_1__ = 0; j_1__ < teff_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < teff_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "teff" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_k_0_max__ = J;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ell_k_0_max__ = num_ell;
        for (size_t k_0__ = 0; k_0__ < ell_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ell" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t wrp_k_0_max__ = num_wrp;
        for (size_t k_0__ = 0; k_0__ < wrp_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "wrp" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = num_beta;
        size_t beta_k_0_max__ = logical_gt(num_het, 0);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t teff_raw_j_1_max__ = num_teff;
        size_t teff_raw_k_0_max__ = logical_gt(num_unc, 0);
        for (size_t j_1__ = 0; j_1__ < teff_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < teff_raw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "teff_raw" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_k_0_max__ = logical_eq(obs_model, 1);
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = logical_eq(obs_model, 3);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_k_0_max__ = logical_eq(obs_model, 5);
        for (size_t k_0__ = 0; k_0__ < gamma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t xi_j_1_max__ = num_xi;
        for (size_t j_1__ = 0; j_1__ < xi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t f_latent_j_1_max__ = N;
            size_t f_latent_k_0_max__ = J;
            for (size_t j_1__ = 0; j_1__ < f_latent_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < f_latent_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "f_latent" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t teff_j_1_max__ = num_teff;
            size_t teff_k_0_max__ = logical_gt(num_unc, 0);
            for (size_t j_1__ = 0; j_1__ < teff_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < teff_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "teff" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_lgp_latent_approx_namespace::model_lgp_latent_approx stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
