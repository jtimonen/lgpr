// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_lgp_predict_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_lgp_predict");
    reader.add_event(0, 0, "include", "_common/licence.stan");
    reader.add_event(0, 0, "start", "_common/licence.stan");
    reader.add_event(15, 15, "end", "_common/licence.stan");
    reader.add_event(15, 1, "restart", "model_lgp_predict");
    reader.add_event(17, 3, "include", "_common/functions-utils.stan");
    reader.add_event(17, 0, "start", "_common/functions-utils.stan");
    reader.add_event(117, 100, "end", "_common/functions-utils.stan");
    reader.add_event(117, 4, "restart", "model_lgp_predict");
    reader.add_event(117, 4, "include", "_common/functions-kernels.stan");
    reader.add_event(117, 0, "start", "_common/functions-kernels.stan");
    reader.add_event(330, 213, "end", "_common/functions-kernels.stan");
    reader.add_event(330, 5, "restart", "model_lgp_predict");
    reader.add_event(330, 5, "include", "_common/functions-posterior.stan");
    reader.add_event(330, 0, "start", "_common/functions-posterior.stan");
    reader.add_event(421, 91, "end", "_common/functions-posterior.stan");
    reader.add_event(421, 6, "restart", "model_lgp_predict");
    reader.add_event(424, 9, "include", "_common/data-general.stan");
    reader.add_event(424, 0, "start", "_common/data-general.stan");
    reader.add_event(475, 51, "end", "_common/data-general.stan");
    reader.add_event(475, 10, "restart", "model_lgp_predict");
    reader.add_event(475, 10, "include", "_common/data-covariates.stan");
    reader.add_event(475, 0, "start", "_common/data-covariates.stan");
    reader.add_event(481, 6, "end", "_common/data-covariates.stan");
    reader.add_event(481, 11, "restart", "model_lgp_predict");
    reader.add_event(481, 11, "include", "_common/data-pred.stan");
    reader.add_event(481, 0, "start", "_common/data-pred.stan");
    reader.add_event(488, 7, "end", "_common/data-pred.stan");
    reader.add_event(488, 12, "restart", "model_lgp_predict");
    reader.add_event(488, 12, "include", "_common/data-draws.stan");
    reader.add_event(488, 0, "start", "_common/data-draws.stan");
    reader.add_event(495, 7, "end", "_common/data-draws.stan");
    reader.add_event(495, 13, "restart", "model_lgp_predict");
    reader.add_event(500, 18, "include", "_common/tdata.stan");
    reader.add_event(500, 0, "start", "_common/tdata.stan");
    reader.add_event(508, 8, "end", "_common/tdata.stan");
    reader.add_event(508, 19, "restart", "model_lgp_predict");
    reader.add_event(508, 19, "include", "_common/tdata-pred.stan");
    reader.add_event(508, 0, "start", "_common/tdata-pred.stan");
    reader.add_event(519, 11, "end", "_common/tdata-pred.stan");
    reader.add_event(519, 20, "restart", "model_lgp_predict");
    reader.add_event(548, 47, "end", "model_lgp_predict");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_vectorsum(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& vecs,
                   const int& L, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 20;
        int num_vecs(0);
        (void) num_vecs;  // dummy to suppress unused var warning
        stan::math::fill(num_vecs, std::numeric_limits<int>::min());
        stan::math::assign(num_vecs,size(vecs));
        current_statement_begin__ = 21;
        validate_non_negative_index("s", "L", L);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> s(L);
        stan::math::initialize(s, DUMMY_VAR__);
        stan::math::fill(s, DUMMY_VAR__);
        stan::math::assign(s,rep_vector(0, L));
        current_statement_begin__ = 22;
        for (int j = 1; j <= num_vecs; ++j) {
            current_statement_begin__ = 23;
            stan::math::assign(s, add(s, get_base1(vecs, j, "vecs", 1)));
        }
        current_statement_begin__ = 25;
        return stan::math::promote_scalar<fun_return_scalar_t__>(s);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_vectorsum_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& vecs,
                   const int& L, std::ostream* pstream__) const {
        return STAN_vectorsum(vecs, L, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
STAN_warp_input(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                    const T1__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 30;
        return stan::math::promote_scalar<fun_return_scalar_t__>(add(-(1), multiply(2, inv(add(1, stan::math::exp(multiply(-(a), x)))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_warp_input_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                    const T1__& a, std::ostream* pstream__) const {
        return STAN_warp_input(x, a, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
STAN_var_mask(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                  const T1__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 35;
        return stan::math::promote_scalar<fun_return_scalar_t__>(inv(add(1, stan::math::exp(multiply(-(a), x)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_var_mask_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                  const T1__& a, std::ostream* pstream__) const {
        return STAN_var_mask(x, a, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_expand(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                const std::vector<int>& idx_expand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 40;
        int L(0);
        (void) L;  // dummy to suppress unused var warning
        stan::math::fill(L, std::numeric_limits<int>::min());
        stan::math::assign(L,num_elements(v));
        current_statement_begin__ = 41;
        validate_non_negative_index("v_add0", "(L + 1)", (L + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v_add0((L + 1));
        stan::math::initialize(v_add0, DUMMY_VAR__);
        stan::math::fill(v_add0, DUMMY_VAR__);
        stan::math::assign(v_add0,rep_vector(0.0, (L + 1)));
        current_statement_begin__ = 42;
        stan::model::assign(v_add0, 
                    stan::model::cons_list(stan::model::index_min_max(2, (L + 1)), stan::model::nil_index_list()), 
                    v, 
                    "assigning variable v_add0");
        current_statement_begin__ = 43;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::model::rvalue(v_add0, stan::model::cons_list(stan::model::index_multi(idx_expand), stan::model::nil_index_list()), "v_add0"));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_expand_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                const std::vector<int>& idx_expand, std::ostream* pstream__) const {
        return STAN_expand(v, idx_expand, pstream__);
    }
};
template <typename T0__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic, 1>
STAN_edit_x_cont(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_cont,
                     const std::vector<int>& idx_expand,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& teff_obs,
                     const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& teff, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 53;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(x_cont));
        current_statement_begin__ = 54;
        validate_non_negative_index("x_teff_obs", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_teff_obs(n);
        stan::math::initialize(x_teff_obs, DUMMY_VAR__);
        stan::math::fill(x_teff_obs, DUMMY_VAR__);
        stan::math::assign(x_teff_obs,STAN_expand(teff_obs, idx_expand, pstream__));
        current_statement_begin__ = 55;
        validate_non_negative_index("x_teff", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_teff(n);
        stan::math::initialize(x_teff, DUMMY_VAR__);
        stan::math::fill(x_teff, DUMMY_VAR__);
        stan::math::assign(x_teff,STAN_expand(teff, idx_expand, pstream__));
        current_statement_begin__ = 56;
        return stan::math::promote_scalar<fun_return_scalar_t__>(subtract(add(x_cont, x_teff_obs), x_teff));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_edit_x_cont_functor__ {
    template <typename T0__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_cont,
                     const std::vector<int>& idx_expand,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& teff_obs,
                     const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& teff, std::ostream* pstream__) const {
        return STAN_edit_x_cont(x_cont, idx_expand, teff_obs, teff, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_rep_vector_times(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                          const int& J, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 61;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,num_elements(x));
        current_statement_begin__ = 62;
        validate_non_negative_index("y", "(J * N)", (J * N));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y((J * N));
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        stan::math::assign(y,rep_vector(0.0, (J * N)));
        current_statement_begin__ = 63;
        int idx(0);
        (void) idx;  // dummy to suppress unused var warning
        stan::math::fill(idx, std::numeric_limits<int>::min());
        stan::math::assign(idx,1);
        current_statement_begin__ = 64;
        for (int j = 1; j <= J; ++j) {
            current_statement_begin__ = 65;
            stan::model::assign(y, 
                        stan::model::cons_list(stan::model::index_min_max(idx, ((idx + N) - 1)), stan::model::nil_index_list()), 
                        x, 
                        "assigning variable y");
            current_statement_begin__ = 66;
            stan::math::assign(idx, (idx + N));
        }
        current_statement_begin__ = 68;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_rep_vector_times_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                          const int& J, std::ostream* pstream__) const {
        return STAN_rep_vector_times(x, J, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_rep_vector_each(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                         const int& J, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 73;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,num_elements(x));
        current_statement_begin__ = 74;
        validate_non_negative_index("y", "(J * N)", (J * N));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y((J * N));
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        stan::math::assign(y,rep_vector(0.0, (J * N)));
        current_statement_begin__ = 75;
        int idx(0);
        (void) idx;  // dummy to suppress unused var warning
        stan::math::fill(idx, std::numeric_limits<int>::min());
        stan::math::assign(idx,1);
        current_statement_begin__ = 76;
        for (int n = 1; n <= N; ++n) {
            current_statement_begin__ = 77;
            stan::model::assign(y, 
                        stan::model::cons_list(stan::model::index_min_max(idx, ((idx + J) - 1)), stan::model::nil_index_list()), 
                        rep_vector(get_base1(x, n, "x", 1), J), 
                        "assigning variable y");
            current_statement_begin__ = 78;
            stan::math::assign(idx, (idx + J));
        }
        current_statement_begin__ = 80;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_rep_vector_each_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                         const int& J, std::ostream* pstream__) const {
        return STAN_rep_vector_each(x, J, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_rep_cols_times(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X,
                        const int& J, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 85;
        int R(0);
        (void) R;  // dummy to suppress unused var warning
        stan::math::fill(R, std::numeric_limits<int>::min());
        stan::math::assign(R,rows(X));
        current_statement_begin__ = 86;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,cols(X));
        current_statement_begin__ = 87;
        validate_non_negative_index("Y", "R", R);
        validate_non_negative_index("Y", "(J * N)", (J * N));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Y(R, (J * N));
        stan::math::initialize(Y, DUMMY_VAR__);
        stan::math::fill(Y, DUMMY_VAR__);
        stan::math::assign(Y,rep_matrix(0.0, R, (J * N)));
        current_statement_begin__ = 88;
        int idx(0);
        (void) idx;  // dummy to suppress unused var warning
        stan::math::fill(idx, std::numeric_limits<int>::min());
        stan::math::assign(idx,1);
        current_statement_begin__ = 89;
        for (int j = 1; j <= J; ++j) {
            current_statement_begin__ = 90;
            stan::model::assign(Y, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(idx, ((idx + N) - 1)), stan::model::nil_index_list())), 
                        X, 
                        "assigning variable Y");
            current_statement_begin__ = 91;
            stan::math::assign(idx, (idx + N));
        }
        current_statement_begin__ = 93;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_rep_cols_times_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X,
                        const int& J, std::ostream* pstream__) const {
        return STAN_rep_cols_times(X, J, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_rep_cols_each(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X,
                       const int& J, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 98;
        int R(0);
        (void) R;  // dummy to suppress unused var warning
        stan::math::fill(R, std::numeric_limits<int>::min());
        stan::math::assign(R,rows(X));
        current_statement_begin__ = 99;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,cols(X));
        current_statement_begin__ = 100;
        validate_non_negative_index("Y", "R", R);
        validate_non_negative_index("Y", "(J * N)", (J * N));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Y(R, (J * N));
        stan::math::initialize(Y, DUMMY_VAR__);
        stan::math::fill(Y, DUMMY_VAR__);
        stan::math::assign(Y,rep_matrix(0.0, R, (J * N)));
        current_statement_begin__ = 101;
        int idx(0);
        (void) idx;  // dummy to suppress unused var warning
        stan::math::fill(idx, std::numeric_limits<int>::min());
        stan::math::assign(idx,1);
        current_statement_begin__ = 102;
        for (int n = 1; n <= N; ++n) {
            current_statement_begin__ = 103;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 104;
                stan::model::assign(Y, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(((idx + j) - 1)), stan::model::nil_index_list())), 
                            stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "X"), 
                            "assigning variable Y");
            }
            current_statement_begin__ = 106;
            stan::math::assign(idx, (idx + J));
        }
        current_statement_begin__ = 108;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_rep_cols_each_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X,
                       const int& J, std::ostream* pstream__) const {
        return STAN_rep_cols_each(X, J, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
STAN_quad_form_inv(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                       const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& A, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 113;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(x));
        current_statement_begin__ = 114;
        validate_non_negative_index("L", "n", n);
        validate_non_negative_index("L", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L(n, n);
        stan::math::initialize(L, DUMMY_VAR__);
        stan::math::fill(L, DUMMY_VAR__);
        stan::math::assign(L,cholesky_decompose(A));
        current_statement_begin__ = 115;
        validate_non_negative_index("a", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> a(n);
        stan::math::initialize(a, DUMMY_VAR__);
        stan::math::fill(a, DUMMY_VAR__);
        stan::math::assign(a,mdivide_left_tri_low(L, x));
        current_statement_begin__ = 116;
        return stan::math::promote_scalar<fun_return_scalar_t__>(dot_self(a));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_quad_form_inv_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                       const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& A, std::ostream* pstream__) const {
        return STAN_quad_form_inv(x, A, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_zerosum(const std::vector<int>& x1,
                             const std::vector<int>& x2,
                             const int& ncat, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 120;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));
        current_statement_begin__ = 121;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));
        current_statement_begin__ = 122;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 123;
        for (int i = 1; i <= n1; ++i) {
            current_statement_begin__ = 124;
            for (int j = 1; j <= n2; ++j) {
                current_statement_begin__ = 125;
                if (as_bool(logical_eq(get_base1(x1, i, "x1", 1), get_base1(x2, j, "x2", 1)))) {
                    current_statement_begin__ = 126;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                1, 
                                "assigning variable K");
                } else {
                    current_statement_begin__ = 128;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                -(inv((ncat - 1))), 
                                "assigning variable K");
                }
            }
        }
        current_statement_begin__ = 132;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_base_zerosum_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                             const std::vector<int>& x2,
                             const int& ncat, std::ostream* pstream__) const {
        return STAN_kernel_base_zerosum(x1, x2, ncat, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_cat(const std::vector<int>& x1,
                         const std::vector<int>& x2, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 137;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));
        current_statement_begin__ = 138;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));
        current_statement_begin__ = 139;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 140;
        for (int i = 1; i <= n1; ++i) {
            current_statement_begin__ = 141;
            for (int j = 1; j <= n2; ++j) {
                current_statement_begin__ = 142;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            logical_eq(get_base1(x1, i, "x1", 1), get_base1(x2, j, "x2", 1)), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 145;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_base_cat_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                         const std::vector<int>& x2, std::ostream* pstream__) const {
        return STAN_kernel_base_cat(x1, x2, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_bin_mask(const std::vector<int>& x1,
                              const std::vector<int>& x2, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 150;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));
        current_statement_begin__ = 151;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));
        current_statement_begin__ = 152;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 153;
        for (int i = 1; i <= n1; ++i) {
            current_statement_begin__ = 154;
            for (int j = 1; j <= n2; ++j) {
                current_statement_begin__ = 155;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            (logical_eq(get_base1(x1, i, "x1", 1), 0) * logical_eq(get_base1(x2, j, "x2", 1), 0)), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 158;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_base_bin_mask_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                              const std::vector<int>& x2, std::ostream* pstream__) const {
        return STAN_kernel_base_bin_mask(x1, x2, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_const(const std::vector<int>& x1,
                      const std::vector<int>& x2,
                      const int& kernel_type,
                      const int& ncat, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 166;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));
        current_statement_begin__ = 167;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));
        current_statement_begin__ = 168;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 169;
        if (as_bool(logical_eq(kernel_type, 1))) {
            current_statement_begin__ = 170;
            stan::math::assign(K, STAN_kernel_base_cat(x1, x2, pstream__));
        } else if (as_bool(logical_eq(kernel_type, 2))) {
            current_statement_begin__ = 172;
            stan::math::assign(K, STAN_kernel_base_bin_mask(x1, x2, pstream__));
        } else {
            current_statement_begin__ = 175;
            stan::math::assign(K, STAN_kernel_base_zerosum(x1, x2, ncat, pstream__));
        }
        current_statement_begin__ = 177;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_const_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                      const std::vector<int>& x2,
                      const int& kernel_type,
                      const int& ncat, std::ostream* pstream__) const {
        return STAN_kernel_const(x1, x2, kernel_type, ncat, pstream__);
    }
};
std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_const_all(const int& n1,
                          const int& n2,
                          const std::vector<std::vector<int> >& x1,
                          const std::vector<std::vector<int> >& x2,
                          const std::vector<std::vector<int> >& x1_mask,
                          const std::vector<std::vector<int> >& x2_mask,
                          const std::vector<int>& num_levels,
                          const std::vector<std::vector<int> >& components, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 188;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(components));
        current_statement_begin__ = 189;
        validate_non_negative_index("K_const", "n1", n1);
        validate_non_negative_index("K_const", "n2", n2);
        validate_non_negative_index("K_const", "num_comps", num_comps);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > K_const(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n1, n2));
        stan::math::initialize(K_const, DUMMY_VAR__);
        stan::math::fill(K_const, DUMMY_VAR__);
        current_statement_begin__ = 190;
        for (int j = 1; j <= num_comps; ++j) {
            {
            current_statement_begin__ = 191;
            validate_non_negative_index("K", "n1", n1);
            validate_non_negative_index("K", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K, DUMMY_VAR__);
            current_statement_begin__ = 192;
            validate_non_negative_index("opts", "9", 9);
            std::vector<int  > opts(9, int(0));
            stan::math::fill(opts, std::numeric_limits<int>::min());
            stan::math::assign(opts,get_base1(components, j, "components", 1));
            current_statement_begin__ = 193;
            int ctype(0);
            (void) ctype;  // dummy to suppress unused var warning
            stan::math::fill(ctype, std::numeric_limits<int>::min());
            stan::math::assign(ctype,get_base1(opts, 1, "opts", 1));
            current_statement_begin__ = 194;
            int ktype(0);
            (void) ktype;  // dummy to suppress unused var warning
            stan::math::fill(ktype, std::numeric_limits<int>::min());
            stan::math::assign(ktype,get_base1(opts, 2, "opts", 1));
            current_statement_begin__ = 195;
            int idx_cat(0);
            (void) idx_cat;  // dummy to suppress unused var warning
            stan::math::fill(idx_cat, std::numeric_limits<int>::min());
            stan::math::assign(idx_cat,get_base1(opts, 8, "opts", 1));
            current_statement_begin__ = 196;
            int idx_cont(0);
            (void) idx_cont;  // dummy to suppress unused var warning
            stan::math::fill(idx_cont, std::numeric_limits<int>::min());
            stan::math::assign(idx_cont,get_base1(opts, 9, "opts", 1));
            current_statement_begin__ = 199;
            if (as_bool(logical_neq(idx_cont, 0))) {
                current_statement_begin__ = 200;
                stan::math::assign(K, STAN_kernel_const(get_base1(x1_mask, idx_cont, "x1_mask", 1), get_base1(x2_mask, idx_cont, "x2_mask", 1), 2, 0, pstream__));
            } else {
                current_statement_begin__ = 202;
                stan::math::assign(K, rep_matrix(1, n1, n2));
            }
            current_statement_begin__ = 206;
            if (as_bool((primitive_value(logical_eq(ctype, 0)) || primitive_value(logical_eq(ctype, 2))))) {
                {
                current_statement_begin__ = 207;
                int M(0);
                (void) M;  // dummy to suppress unused var warning
                stan::math::fill(M, std::numeric_limits<int>::min());
                stan::math::assign(M,get_base1(num_levels, idx_cat, "num_levels", 1));
                current_statement_begin__ = 208;
                stan::math::assign(K, elt_multiply(K, STAN_kernel_const(get_base1(x1, idx_cat, "x1", 1), get_base1(x2, idx_cat, "x2", 1), ktype, M, pstream__)));
                }
            }
            current_statement_begin__ = 210;
            stan::model::assign(K_const, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        K, 
                        "assigning variable K_const");
            }
        }
        current_statement_begin__ = 212;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K_const);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_const_all_functor__ {
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const int& n1,
                          const int& n2,
                          const std::vector<std::vector<int> >& x1,
                          const std::vector<std::vector<int> >& x2,
                          const std::vector<std::vector<int> >& x1_mask,
                          const std::vector<std::vector<int> >& x2_mask,
                          const std::vector<int>& num_levels,
                          const std::vector<std::vector<int> >& components, std::ostream* pstream__) const {
        return STAN_kernel_const_all(n1, n2, x1, x2, x1_mask, x2_mask, num_levels, components, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_var_mask(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                              const T2__& steepness,
                              const std::vector<T3__>& vm_params, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 219;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));
        current_statement_begin__ = 220;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));
        current_statement_begin__ = 221;
        local_scalar_t__ a(DUMMY_VAR__);
        (void) a;  // dummy to suppress unused var warning
        stan::math::initialize(a, DUMMY_VAR__);
        stan::math::fill(a, DUMMY_VAR__);
        stan::math::assign(a,(steepness * get_base1(vm_params, 2, "vm_params", 1)));
        current_statement_begin__ = 222;
        local_scalar_t__ r(DUMMY_VAR__);
        (void) r;  // dummy to suppress unused var warning
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);
        stan::math::assign(r,(inv(a) * logit(get_base1(vm_params, 1, "vm_params", 1))));
        current_statement_begin__ = 223;
        validate_non_negative_index("s1", "n1", n1);
        validate_non_negative_index("s1", "1", 1);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> s1(n1, 1);
        stan::math::initialize(s1, DUMMY_VAR__);
        stan::math::fill(s1, DUMMY_VAR__);
        stan::math::assign(s1,to_matrix(STAN_var_mask(subtract(x1, r), a, pstream__)));
        current_statement_begin__ = 224;
        validate_non_negative_index("s2", "n2", n2);
        validate_non_negative_index("s2", "1", 1);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> s2(n2, 1);
        stan::math::initialize(s2, DUMMY_VAR__);
        stan::math::fill(s2, DUMMY_VAR__);
        stan::math::assign(s2,to_matrix(STAN_var_mask(subtract(x2, r), a, pstream__)));
        current_statement_begin__ = 225;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        stan::math::assign(K,multiply(s1, transpose(s2)));
        current_statement_begin__ = 226;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_base_var_mask_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                              const T2__& steepness,
                              const std::vector<T3__>& vm_params, std::ostream* pstream__) const {
        return STAN_kernel_base_var_mask(x1, x2, steepness, vm_params, pstream__);
    }
};
template <typename T2__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T16__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T9__, T10__, typename boost::math::tools::promote_args<T11__, T12__, T13__, T16__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_all(const int& n1,
                    const int& n2,
                    const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                    const std::vector<std::vector<int> >& components,
                    const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, 1> >& x1,
                    const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic, 1> >& x2,
                    const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic, 1> >& x1_unnorm,
                    const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic, 1> >& x2_unnorm,
                    const std::vector<T8__>& alpha,
                    const std::vector<T9__>& ell,
                    const std::vector<T10__>& wrp,
                    const std::vector<Eigen::Matrix<T11__, Eigen::Dynamic, 1> >& beta,
                    const std::vector<Eigen::Matrix<T12__, Eigen::Dynamic, 1> >& teff,
                    const std::vector<T13__>& vm_params,
                    const std::vector<int>& idx1_expand,
                    const std::vector<int>& idx2_expand,
                    const std::vector<Eigen::Matrix<T16__, Eigen::Dynamic, 1> >& teff_zero, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T9__, T10__, typename boost::math::tools::promote_args<T11__, T12__, T13__, T16__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 252;
        int idx_ell(0);
        (void) idx_ell;  // dummy to suppress unused var warning
        stan::math::fill(idx_ell, std::numeric_limits<int>::min());
        stan::math::assign(idx_ell,0);
        current_statement_begin__ = 253;
        int idx_wrp(0);
        (void) idx_wrp;  // dummy to suppress unused var warning
        stan::math::fill(idx_wrp, std::numeric_limits<int>::min());
        stan::math::assign(idx_wrp,0);
        current_statement_begin__ = 254;
        int idx_alpha(0);
        (void) idx_alpha;  // dummy to suppress unused var warning
        stan::math::fill(idx_alpha, std::numeric_limits<int>::min());
        stan::math::assign(idx_alpha,0);
        current_statement_begin__ = 255;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(components));
        current_statement_begin__ = 256;
        validate_non_negative_index("KX", "n1", n1);
        validate_non_negative_index("KX", "n2", n2);
        validate_non_negative_index("KX", "num_comps", num_comps);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n1, n2));
        stan::math::initialize(KX, DUMMY_VAR__);
        stan::math::fill(KX, DUMMY_VAR__);
        current_statement_begin__ = 259;
        for (int j = 1; j <= num_comps; ++j) {
            {
            current_statement_begin__ = 262;
            validate_non_negative_index("K", "n1", n1);
            validate_non_negative_index("K", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K, DUMMY_VAR__);
            stan::math::assign(K,get_base1(K_const, j, "K_const", 1));
            current_statement_begin__ = 263;
            validate_non_negative_index("X1", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> X1(n1);
            stan::math::initialize(X1, DUMMY_VAR__);
            stan::math::fill(X1, DUMMY_VAR__);
            current_statement_begin__ = 264;
            validate_non_negative_index("X2", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> X2(n2);
            stan::math::initialize(X2, DUMMY_VAR__);
            stan::math::fill(X2, DUMMY_VAR__);
            current_statement_begin__ = 267;
            validate_non_negative_index("opts", "9", 9);
            std::vector<int  > opts(9, int(0));
            stan::math::fill(opts, std::numeric_limits<int>::min());
            stan::math::assign(opts,get_base1(components, j, "components", 1));
            current_statement_begin__ = 268;
            int ctype(0);
            (void) ctype;  // dummy to suppress unused var warning
            stan::math::fill(ctype, std::numeric_limits<int>::min());
            stan::math::assign(ctype,get_base1(opts, 1, "opts", 1));
            current_statement_begin__ = 269;
            int idx_cont(0);
            (void) idx_cont;  // dummy to suppress unused var warning
            stan::math::fill(idx_cont, std::numeric_limits<int>::min());
            stan::math::assign(idx_cont,get_base1(opts, 9, "opts", 1));
            current_statement_begin__ = 270;
            int is_heter(0);
            (void) is_heter;  // dummy to suppress unused var warning
            stan::math::fill(is_heter, std::numeric_limits<int>::min());
            stan::math::assign(is_heter,get_base1(opts, 4, "opts", 1));
            current_statement_begin__ = 271;
            int is_warped(0);
            (void) is_warped;  // dummy to suppress unused var warning
            stan::math::fill(is_warped, std::numeric_limits<int>::min());
            stan::math::assign(is_warped,get_base1(opts, 5, "opts", 1));
            current_statement_begin__ = 272;
            int is_var_masked(0);
            (void) is_var_masked;  // dummy to suppress unused var warning
            stan::math::fill(is_var_masked, std::numeric_limits<int>::min());
            stan::math::assign(is_var_masked,get_base1(opts, 6, "opts", 1));
            current_statement_begin__ = 273;
            int is_uncrt(0);
            (void) is_uncrt;  // dummy to suppress unused var warning
            stan::math::fill(is_uncrt, std::numeric_limits<int>::min());
            stan::math::assign(is_uncrt,get_base1(opts, 7, "opts", 1));
            current_statement_begin__ = 276;
            if (as_bool(logical_neq(ctype, 0))) {
                current_statement_begin__ = 277;
                if (as_bool(is_warped)) {
                    current_statement_begin__ = 278;
                    stan::math::assign(X1, get_base1(x1_unnorm, idx_cont, "x1_unnorm", 1));
                    current_statement_begin__ = 279;
                    stan::math::assign(X2, get_base1(x2_unnorm, idx_cont, "x2_unnorm", 1));
                } else {
                    current_statement_begin__ = 281;
                    stan::math::assign(X1, get_base1(x1, idx_cont, "x1", 1));
                    current_statement_begin__ = 282;
                    stan::math::assign(X2, get_base1(x2, idx_cont, "x2", 1));
                }
            }
            current_statement_begin__ = 287;
            if (as_bool(is_warped)) {
                {
                current_statement_begin__ = 288;
                local_scalar_t__ s(DUMMY_VAR__);
                (void) s;  // dummy to suppress unused var warning
                stan::math::initialize(s, DUMMY_VAR__);
                stan::math::fill(s, DUMMY_VAR__);
                current_statement_begin__ = 289;
                stan::math::assign(idx_wrp, (idx_wrp + 1));
                current_statement_begin__ = 292;
                if (as_bool(is_uncrt)) {
                    current_statement_begin__ = 293;
                    stan::math::assign(X1, STAN_edit_x_cont(X1, idx1_expand, get_base1(teff_zero, 1, "teff_zero", 1), get_base1(teff, 1, "teff", 1), pstream__));
                    current_statement_begin__ = 294;
                    stan::math::assign(X2, STAN_edit_x_cont(X2, idx2_expand, get_base1(teff_zero, 1, "teff_zero", 1), get_base1(teff, 1, "teff", 1), pstream__));
                }
                current_statement_begin__ = 298;
                stan::math::assign(s, get_base1(wrp, idx_wrp, "wrp", 1));
                current_statement_begin__ = 299;
                if (as_bool(is_var_masked)) {
                    current_statement_begin__ = 300;
                    stan::math::assign(K, elt_multiply(K, STAN_kernel_base_var_mask(X1, X2, s, vm_params, pstream__)));
                }
                current_statement_begin__ = 304;
                stan::math::assign(X1, STAN_warp_input(X1, s, pstream__));
                current_statement_begin__ = 305;
                stan::math::assign(X2, STAN_warp_input(X2, s, pstream__));
                }
            }
            current_statement_begin__ = 309;
            stan::math::assign(idx_alpha, (idx_alpha + 1));
            current_statement_begin__ = 310;
            if (as_bool(logical_neq(ctype, 0))) {
                current_statement_begin__ = 311;
                stan::math::assign(idx_ell, (idx_ell + 1));
                current_statement_begin__ = 312;
                stan::math::assign(K, elt_multiply(K, cov_exp_quad(to_array_1d(X1), to_array_1d(X2), get_base1(alpha, idx_alpha, "alpha", 1), get_base1(ell, idx_ell, "ell", 1))));
            } else {
                current_statement_begin__ = 315;
                stan::math::assign(K, multiply(square(get_base1(alpha, idx_alpha, "alpha", 1)), K));
            }
            current_statement_begin__ = 319;
            if (as_bool(is_heter)) {
                {
                current_statement_begin__ = 320;
                validate_non_negative_index("b1", "n1", n1);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b1(n1);
                stan::math::initialize(b1, DUMMY_VAR__);
                stan::math::fill(b1, DUMMY_VAR__);
                stan::math::assign(b1,STAN_expand(get_base1(beta, 1, "beta", 1), idx1_expand, pstream__));
                current_statement_begin__ = 321;
                validate_non_negative_index("b2", "n2", n2);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b2(n2);
                stan::math::initialize(b2, DUMMY_VAR__);
                stan::math::fill(b2, DUMMY_VAR__);
                stan::math::assign(b2,STAN_expand(get_base1(beta, 1, "beta", 1), idx2_expand, pstream__));
                current_statement_begin__ = 322;
                validate_non_negative_index("K_beta", "n1", n1);
                validate_non_negative_index("K_beta", "n2", n2);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K_beta(n1, n2);
                stan::math::initialize(K_beta, DUMMY_VAR__);
                stan::math::fill(K_beta, DUMMY_VAR__);
                stan::math::assign(K_beta,multiply(to_matrix(b1), transpose(to_matrix(b2))));
                current_statement_begin__ = 323;
                stan::math::assign(K, elt_multiply(K, K_beta));
                }
            }
            current_statement_begin__ = 326;
            stan::model::assign(KX, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        K, 
                        "assigning variable KX");
            }
        }
        current_statement_begin__ = 329;
        return stan::math::promote_scalar<fun_return_scalar_t__>(KX);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_all_functor__ {
    template <typename T2__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T16__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T9__, T10__, typename boost::math::tools::promote_args<T11__, T12__, T13__, T16__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const int& n1,
                    const int& n2,
                    const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                    const std::vector<std::vector<int> >& components,
                    const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, 1> >& x1,
                    const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic, 1> >& x2,
                    const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic, 1> >& x1_unnorm,
                    const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic, 1> >& x2_unnorm,
                    const std::vector<T8__>& alpha,
                    const std::vector<T9__>& ell,
                    const std::vector<T10__>& wrp,
                    const std::vector<Eigen::Matrix<T11__, Eigen::Dynamic, 1> >& beta,
                    const std::vector<Eigen::Matrix<T12__, Eigen::Dynamic, 1> >& teff,
                    const std::vector<T13__>& vm_params,
                    const std::vector<int>& idx1_expand,
                    const std::vector<int>& idx2_expand,
                    const std::vector<Eigen::Matrix<T16__, Eigen::Dynamic, 1> >& teff_zero, std::ostream* pstream__) const {
        return STAN_kernel_all(n1, n2, K_const, components, x1, x2, x1_unnorm, x2_unnorm, alpha, ell, wrp, beta, teff, vm_params, idx1_expand, idx2_expand, teff_zero, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_vector_array_sum(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& k, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 333;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(get_base1(k, 1, "k", 1)));
        current_statement_begin__ = 334;
        validate_non_negative_index("k_sum", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> k_sum(n);
        stan::math::initialize(k_sum, DUMMY_VAR__);
        stan::math::fill(k_sum, DUMMY_VAR__);
        stan::math::assign(k_sum,get_base1(k, 1, "k", 1));
        current_statement_begin__ = 335;
        for (int j = 2; j <= size(k); ++j) {
            current_statement_begin__ = 336;
            stan::math::assign(k_sum, add(k_sum, get_base1(k, j, "k", 1)));
        }
        current_statement_begin__ = 338;
        return stan::math::promote_scalar<fun_return_scalar_t__>(k_sum);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_vector_array_sum_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& k, std::ostream* pstream__) const {
        return STAN_vector_array_sum(k, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_matrix_array_sum(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 343;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,rows(get_base1(K, 1, "K", 1)));
        current_statement_begin__ = 344;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,cols(get_base1(K, 1, "K", 1)));
        current_statement_begin__ = 345;
        validate_non_negative_index("K_sum", "n1", n1);
        validate_non_negative_index("K_sum", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K_sum(n1, n2);
        stan::math::initialize(K_sum, DUMMY_VAR__);
        stan::math::fill(K_sum, DUMMY_VAR__);
        stan::math::assign(K_sum,get_base1(K, 1, "K", 1));
        current_statement_begin__ = 346;
        for (int j = 2; j <= size(K); ++j) {
            current_statement_begin__ = 347;
            stan::math::assign(K_sum, add(K_sum, get_base1(K, j, "K", 1)));
        }
        current_statement_begin__ = 349;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K_sum);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_matrix_array_sum_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K, std::ostream* pstream__) const {
        return STAN_matrix_array_sum(K, pstream__);
    }
};
template <typename T0__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1> >
STAN_matrix_array_diagonals(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 354;
        int L(0);
        (void) L;  // dummy to suppress unused var warning
        stan::math::fill(L, std::numeric_limits<int>::min());
        stan::math::assign(L,size(K));
        current_statement_begin__ = 355;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,rows(get_base1(K, 1, "K", 1)));
        current_statement_begin__ = 356;
        validate_non_negative_index("k", "n", n);
        validate_non_negative_index("k", "L", L);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > k(L, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(n));
        stan::math::initialize(k, DUMMY_VAR__);
        stan::math::fill(k, DUMMY_VAR__);
        current_statement_begin__ = 357;
        for (int j = 1; j <= L; ++j) {
            current_statement_begin__ = 358;
            stan::model::assign(k, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        diagonal(get_base1(K, j, "K", 1)), 
                        "assigning variable k");
        }
        current_statement_begin__ = 360;
        return stan::math::promote_scalar<fun_return_scalar_t__>(k);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_matrix_array_diagonals_functor__ {
    template <typename T0__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1> >
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K, std::ostream* pstream__) const {
        return STAN_matrix_array_diagonals(K, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, 1> >
STAN_gp_posterior_helper(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& Ly,
                             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& K_s,
                             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& k_ss,
                             const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& v, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 367;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(v));
        current_statement_begin__ = 368;
        int p(0);
        (void) p;  // dummy to suppress unused var warning
        stan::math::fill(p, std::numeric_limits<int>::min());
        stan::math::assign(p,num_elements(k_ss));
        current_statement_begin__ = 369;
        validate_non_negative_index("A", "p", p);
        validate_non_negative_index("A", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> A(p, n);
        stan::math::initialize(A, DUMMY_VAR__);
        stan::math::fill(A, DUMMY_VAR__);
        stan::math::assign(A,transpose(mdivide_left_tri_low(Ly, transpose(K_s))));
        current_statement_begin__ = 370;
        validate_non_negative_index("f_post", "p", p);
        validate_non_negative_index("f_post", "2", 2);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > f_post(2, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(p));
        stan::math::initialize(f_post, DUMMY_VAR__);
        stan::math::fill(f_post, DUMMY_VAR__);
        current_statement_begin__ = 371;
        stan::model::assign(f_post, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    multiply(A, v), 
                    "assigning variable f_post");
        current_statement_begin__ = 372;
        stan::model::assign(f_post, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    stan::math::sqrt(subtract(k_ss, rows_dot_self(A))), 
                    "assigning variable f_post");
        current_statement_begin__ = 373;
        return stan::math::promote_scalar<fun_return_scalar_t__>(f_post);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_gp_posterior_helper_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, 1> >
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& Ly,
                             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& K_s,
                             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& k_ss,
                             const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& v, std::ostream* pstream__) const {
        return STAN_gp_posterior_helper(Ly, K_s, k_ss, v, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic, 1> >
STAN_gp_posterior(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& KX,
                      const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic> >& KX_s,
                      const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic> >& KX_ss,
                      const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& y,
                      const T4__& delta,
                      const T5__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 386;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(KX));
        current_statement_begin__ = 387;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,rows(get_base1(KX, 1, "KX", 1)));
        current_statement_begin__ = 388;
        int p(0);
        (void) p;  // dummy to suppress unused var warning
        stan::math::fill(p, std::numeric_limits<int>::min());
        stan::math::assign(p,rows(get_base1(KX_s, 1, "KX_s", 1)));
        current_statement_begin__ = 389;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,(num_comps + 1));
        current_statement_begin__ = 390;
        validate_non_negative_index("inds", "2", 2);
        std::vector<int  > inds(2, int(0));
        stan::math::fill(inds, std::numeric_limits<int>::min());
        current_statement_begin__ = 391;
        validate_non_negative_index("F_POST", "p", p);
        validate_non_negative_index("F_POST", "(2 * J)", (2 * J));
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > F_POST((2 * J), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(p));
        stan::math::initialize(F_POST, DUMMY_VAR__);
        stan::math::fill(F_POST, DUMMY_VAR__);
        current_statement_begin__ = 392;
        validate_non_negative_index("v", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v(n);
        stan::math::initialize(v, DUMMY_VAR__);
        stan::math::fill(v, DUMMY_VAR__);
        current_statement_begin__ = 393;
        validate_non_negative_index("Ly", "n", n);
        validate_non_negative_index("Ly", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Ly(n, n);
        stan::math::initialize(Ly, DUMMY_VAR__);
        stan::math::fill(Ly, DUMMY_VAR__);
        current_statement_begin__ = 396;
        validate_non_negative_index("kX_ss", "p", p);
        validate_non_negative_index("kX_ss", "num_comps", num_comps);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > kX_ss(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(p));
        stan::math::initialize(kX_ss, DUMMY_VAR__);
        stan::math::fill(kX_ss, DUMMY_VAR__);
        stan::math::assign(kX_ss,STAN_matrix_array_diagonals(KX_ss, pstream__));
        current_statement_begin__ = 399;
        validate_non_negative_index("delta_vec", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta_vec(n);
        stan::math::initialize(delta_vec, DUMMY_VAR__);
        stan::math::fill(delta_vec, DUMMY_VAR__);
        stan::math::assign(delta_vec,rep_vector(delta, n));
        current_statement_begin__ = 400;
        validate_non_negative_index("sigma2_vec", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma2_vec(n);
        stan::math::initialize(sigma2_vec, DUMMY_VAR__);
        stan::math::fill(sigma2_vec, DUMMY_VAR__);
        stan::math::assign(sigma2_vec,rep_vector(square(sigma), n));
        current_statement_begin__ = 401;
        validate_non_negative_index("Ky", "n", n);
        validate_non_negative_index("Ky", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Ky(n, n);
        stan::math::initialize(Ky, DUMMY_VAR__);
        stan::math::fill(Ky, DUMMY_VAR__);
        stan::math::assign(Ky,add(add(STAN_matrix_array_sum(KX, pstream__), diag_matrix(sigma2_vec)), diag_matrix(multiply(num_comps, delta_vec))));
        current_statement_begin__ = 405;
        stan::math::assign(Ly, cholesky_decompose(Ky));
        current_statement_begin__ = 406;
        stan::math::assign(v, mdivide_left_tri_low(Ly, y));
        current_statement_begin__ = 409;
        for (int j = 1; j <= num_comps; ++j) {
            current_statement_begin__ = 410;
            stan::math::assign(inds, static_cast<std::vector<int> >(stan::math::array_builder<int >().add(j).add((J + j)).array()));
            current_statement_begin__ = 411;
            stan::model::assign(F_POST, 
                        stan::model::cons_list(stan::model::index_multi(inds), stan::model::nil_index_list()), 
                        STAN_gp_posterior_helper(Ly, get_base1(KX_s, j, "KX_s", 1), get_base1(kX_ss, j, "kX_ss", 1), v, pstream__), 
                        "assigning variable F_POST");
        }
        current_statement_begin__ = 415;
        stan::math::assign(inds, static_cast<std::vector<int> >(stan::math::array_builder<int >().add(J).add((2 * J)).array()));
        current_statement_begin__ = 416;
        stan::model::assign(F_POST, 
                    stan::model::cons_list(stan::model::index_multi(inds), stan::model::nil_index_list()), 
                    STAN_gp_posterior_helper(Ly, STAN_matrix_array_sum(KX_s, pstream__), STAN_vector_array_sum(kX_ss, pstream__), v, pstream__), 
                    "assigning variable F_POST");
        current_statement_begin__ = 419;
        return stan::math::promote_scalar<fun_return_scalar_t__>(F_POST);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_gp_posterior_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic, 1> >
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& KX,
                      const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic> >& KX_s,
                      const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic> >& KX_ss,
                      const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& y,
                      const T4__& delta,
                      const T5__& sigma, std::ostream* pstream__) const {
        return STAN_gp_posterior(KX, KX_s, KX_ss, y, delta, sigma, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_lgp_predict
  : public stan::model::model_base_crtp<model_lgp_predict> {
private:
        int is_verbose;
        int is_likelihood_skipped;
        int num_obs;
        int num_cov_cont;
        int num_cov_cat;
        int num_comps;
        int num_ell;
        int num_ns;
        int num_heter;
        int num_uncrt;
        int num_bt;
        std::vector<std::vector<int> > components;
        std::vector<vector_d> teff_zero;
        std::vector<vector_d> teff_lb;
        std::vector<vector_d> teff_ub;
        std::vector<int> x_cat_num_levels;
        double delta;
        std::vector<double> vm_params;
        std::vector<vector_d> x_cont;
        std::vector<vector_d> x_cont_unnorm;
        std::vector<std::vector<int> > x_cont_mask;
        std::vector<std::vector<int> > x_cat;
        std::vector<int> idx_expand;
        int num_pred;
        std::vector<vector_d> x_cont_PRED;
        std::vector<vector_d> x_cont_unnorm_PRED;
        std::vector<std::vector<int> > x_cont_mask_PRED;
        std::vector<std::vector<int> > x_cat_PRED;
        std::vector<int> idx_expand_PRED;
        int S;
        std::vector<std::vector<double> > d_alpha;
        std::vector<std::vector<double> > d_ell;
        std::vector<std::vector<double> > d_wrp;
        std::vector<std::vector<vector_d> > d_beta;
        std::vector<std::vector<vector_d> > d_teff;
        std::vector<double> d_sigma;
        vector_d y_norm;
        std::vector<matrix_d> K_const;
        vector_d delta_vec;
        std::vector<matrix_d> K_const_s;
        std::vector<matrix_d> K_const_ss;
public:
    model_lgp_predict(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_lgp_predict(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_lgp_predict_namespace::model_lgp_predict";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 426;
            context__.validate_dims("data initialization", "is_verbose", "int", context__.to_vec());
            is_verbose = int(0);
            vals_i__ = context__.vals_i("is_verbose");
            pos__ = 0;
            is_verbose = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_verbose", is_verbose, 0);
            check_less_or_equal(function__, "is_verbose", is_verbose, 1);
            current_statement_begin__ = 427;
            context__.validate_dims("data initialization", "is_likelihood_skipped", "int", context__.to_vec());
            is_likelihood_skipped = int(0);
            vals_i__ = context__.vals_i("is_likelihood_skipped");
            pos__ = 0;
            is_likelihood_skipped = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_likelihood_skipped", is_likelihood_skipped, 0);
            check_less_or_equal(function__, "is_likelihood_skipped", is_likelihood_skipped, 1);
            current_statement_begin__ = 430;
            context__.validate_dims("data initialization", "num_obs", "int", context__.to_vec());
            num_obs = int(0);
            vals_i__ = context__.vals_i("num_obs");
            pos__ = 0;
            num_obs = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_obs", num_obs, 0);
            current_statement_begin__ = 431;
            context__.validate_dims("data initialization", "num_cov_cont", "int", context__.to_vec());
            num_cov_cont = int(0);
            vals_i__ = context__.vals_i("num_cov_cont");
            pos__ = 0;
            num_cov_cont = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_cov_cont", num_cov_cont, 0);
            current_statement_begin__ = 432;
            context__.validate_dims("data initialization", "num_cov_cat", "int", context__.to_vec());
            num_cov_cat = int(0);
            vals_i__ = context__.vals_i("num_cov_cat");
            pos__ = 0;
            num_cov_cat = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_cov_cat", num_cov_cat, 0);
            current_statement_begin__ = 433;
            context__.validate_dims("data initialization", "num_comps", "int", context__.to_vec());
            num_comps = int(0);
            vals_i__ = context__.vals_i("num_comps");
            pos__ = 0;
            num_comps = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_comps", num_comps, 1);
            current_statement_begin__ = 434;
            context__.validate_dims("data initialization", "num_ell", "int", context__.to_vec());
            num_ell = int(0);
            vals_i__ = context__.vals_i("num_ell");
            pos__ = 0;
            num_ell = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_ell", num_ell, 0);
            current_statement_begin__ = 435;
            context__.validate_dims("data initialization", "num_ns", "int", context__.to_vec());
            num_ns = int(0);
            vals_i__ = context__.vals_i("num_ns");
            pos__ = 0;
            num_ns = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_ns", num_ns, 0);
            current_statement_begin__ = 436;
            context__.validate_dims("data initialization", "num_heter", "int", context__.to_vec());
            num_heter = int(0);
            vals_i__ = context__.vals_i("num_heter");
            pos__ = 0;
            num_heter = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_heter", num_heter, 0);
            current_statement_begin__ = 437;
            context__.validate_dims("data initialization", "num_uncrt", "int", context__.to_vec());
            num_uncrt = int(0);
            vals_i__ = context__.vals_i("num_uncrt");
            pos__ = 0;
            num_uncrt = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_uncrt", num_uncrt, 0);
            current_statement_begin__ = 438;
            context__.validate_dims("data initialization", "num_bt", "int", context__.to_vec());
            num_bt = int(0);
            vals_i__ = context__.vals_i("num_bt");
            pos__ = 0;
            num_bt = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_bt", num_bt, 0);
            current_statement_begin__ = 465;
            validate_non_negative_index("components", "num_comps", num_comps);
            validate_non_negative_index("components", "9", 9);
            context__.validate_dims("data initialization", "components", "int", context__.to_vec(num_comps,9));
            components = std::vector<std::vector<int> >(num_comps, std::vector<int>(9, int(0)));
            vals_i__ = context__.vals_i("components");
            pos__ = 0;
            size_t components_k_0_max__ = num_comps;
            size_t components_k_1_max__ = 9;
            for (size_t k_1__ = 0; k_1__ < components_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < components_k_0_max__; ++k_0__) {
                    components[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t components_i_0_max__ = num_comps;
            size_t components_i_1_max__ = 9;
            for (size_t i_0__ = 0; i_0__ < components_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < components_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "components[i_0__][i_1__]", components[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 468;
            validate_non_negative_index("teff_zero", "num_bt", num_bt);
            validate_non_negative_index("teff_zero", "logical_gt(num_uncrt, 0)", logical_gt(num_uncrt, 0));
            context__.validate_dims("data initialization", "teff_zero", "vector_d", context__.to_vec(logical_gt(num_uncrt, 0),num_bt));
            teff_zero = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(logical_gt(num_uncrt, 0), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_bt));
            vals_r__ = context__.vals_r("teff_zero");
            pos__ = 0;
            size_t teff_zero_j_1_max__ = num_bt;
            size_t teff_zero_k_0_max__ = logical_gt(num_uncrt, 0);
            for (size_t j_1__ = 0; j_1__ < teff_zero_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < teff_zero_k_0_max__; ++k_0__) {
                    teff_zero[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 469;
            validate_non_negative_index("teff_lb", "num_bt", num_bt);
            validate_non_negative_index("teff_lb", "logical_gt(num_uncrt, 0)", logical_gt(num_uncrt, 0));
            context__.validate_dims("data initialization", "teff_lb", "vector_d", context__.to_vec(logical_gt(num_uncrt, 0),num_bt));
            teff_lb = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(logical_gt(num_uncrt, 0), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_bt));
            vals_r__ = context__.vals_r("teff_lb");
            pos__ = 0;
            size_t teff_lb_j_1_max__ = num_bt;
            size_t teff_lb_k_0_max__ = logical_gt(num_uncrt, 0);
            for (size_t j_1__ = 0; j_1__ < teff_lb_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < teff_lb_k_0_max__; ++k_0__) {
                    teff_lb[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 470;
            validate_non_negative_index("teff_ub", "num_bt", num_bt);
            validate_non_negative_index("teff_ub", "logical_gt(num_uncrt, 0)", logical_gt(num_uncrt, 0));
            context__.validate_dims("data initialization", "teff_ub", "vector_d", context__.to_vec(logical_gt(num_uncrt, 0),num_bt));
            teff_ub = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(logical_gt(num_uncrt, 0), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_bt));
            vals_r__ = context__.vals_r("teff_ub");
            pos__ = 0;
            size_t teff_ub_j_1_max__ = num_bt;
            size_t teff_ub_k_0_max__ = logical_gt(num_uncrt, 0);
            for (size_t j_1__ = 0; j_1__ < teff_ub_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < teff_ub_k_0_max__; ++k_0__) {
                    teff_ub[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 473;
            validate_non_negative_index("x_cat_num_levels", "num_cov_cat", num_cov_cat);
            context__.validate_dims("data initialization", "x_cat_num_levels", "int", context__.to_vec(num_cov_cat));
            x_cat_num_levels = std::vector<int>(num_cov_cat, int(0));
            vals_i__ = context__.vals_i("x_cat_num_levels");
            pos__ = 0;
            size_t x_cat_num_levels_k_0_max__ = num_cov_cat;
            for (size_t k_0__ = 0; k_0__ < x_cat_num_levels_k_0_max__; ++k_0__) {
                x_cat_num_levels[k_0__] = vals_i__[pos__++];
            }
            size_t x_cat_num_levels_i_0_max__ = num_cov_cat;
            for (size_t i_0__ = 0; i_0__ < x_cat_num_levels_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "x_cat_num_levels[i_0__]", x_cat_num_levels[i_0__], 0);
            }
            current_statement_begin__ = 474;
            context__.validate_dims("data initialization", "delta", "double", context__.to_vec());
            delta = double(0);
            vals_r__ = context__.vals_r("delta");
            pos__ = 0;
            delta = vals_r__[pos__++];
            current_statement_begin__ = 475;
            validate_non_negative_index("vm_params", "2", 2);
            context__.validate_dims("data initialization", "vm_params", "double", context__.to_vec(2));
            vm_params = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("vm_params");
            pos__ = 0;
            size_t vm_params_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < vm_params_k_0_max__; ++k_0__) {
                vm_params[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 477;
            validate_non_negative_index("x_cont", "num_obs", num_obs);
            validate_non_negative_index("x_cont", "num_cov_cont", num_cov_cont);
            context__.validate_dims("data initialization", "x_cont", "vector_d", context__.to_vec(num_cov_cont,num_obs));
            x_cont = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(num_cov_cont, Eigen::Matrix<double, Eigen::Dynamic, 1>(num_obs));
            vals_r__ = context__.vals_r("x_cont");
            pos__ = 0;
            size_t x_cont_j_1_max__ = num_obs;
            size_t x_cont_k_0_max__ = num_cov_cont;
            for (size_t j_1__ = 0; j_1__ < x_cont_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x_cont_k_0_max__; ++k_0__) {
                    x_cont[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 478;
            validate_non_negative_index("x_cont_unnorm", "num_obs", num_obs);
            validate_non_negative_index("x_cont_unnorm", "num_cov_cont", num_cov_cont);
            context__.validate_dims("data initialization", "x_cont_unnorm", "vector_d", context__.to_vec(num_cov_cont,num_obs));
            x_cont_unnorm = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(num_cov_cont, Eigen::Matrix<double, Eigen::Dynamic, 1>(num_obs));
            vals_r__ = context__.vals_r("x_cont_unnorm");
            pos__ = 0;
            size_t x_cont_unnorm_j_1_max__ = num_obs;
            size_t x_cont_unnorm_k_0_max__ = num_cov_cont;
            for (size_t j_1__ = 0; j_1__ < x_cont_unnorm_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x_cont_unnorm_k_0_max__; ++k_0__) {
                    x_cont_unnorm[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 479;
            validate_non_negative_index("x_cont_mask", "num_cov_cont", num_cov_cont);
            validate_non_negative_index("x_cont_mask", "num_obs", num_obs);
            context__.validate_dims("data initialization", "x_cont_mask", "int", context__.to_vec(num_cov_cont,num_obs));
            x_cont_mask = std::vector<std::vector<int> >(num_cov_cont, std::vector<int>(num_obs, int(0)));
            vals_i__ = context__.vals_i("x_cont_mask");
            pos__ = 0;
            size_t x_cont_mask_k_0_max__ = num_cov_cont;
            size_t x_cont_mask_k_1_max__ = num_obs;
            for (size_t k_1__ = 0; k_1__ < x_cont_mask_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < x_cont_mask_k_0_max__; ++k_0__) {
                    x_cont_mask[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 480;
            validate_non_negative_index("x_cat", "num_cov_cat", num_cov_cat);
            validate_non_negative_index("x_cat", "num_obs", num_obs);
            context__.validate_dims("data initialization", "x_cat", "int", context__.to_vec(num_cov_cat,num_obs));
            x_cat = std::vector<std::vector<int> >(num_cov_cat, std::vector<int>(num_obs, int(0)));
            vals_i__ = context__.vals_i("x_cat");
            pos__ = 0;
            size_t x_cat_k_0_max__ = num_cov_cat;
            size_t x_cat_k_1_max__ = num_obs;
            for (size_t k_1__ = 0; k_1__ < x_cat_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < x_cat_k_0_max__; ++k_0__) {
                    x_cat[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 481;
            validate_non_negative_index("idx_expand", "num_obs", num_obs);
            context__.validate_dims("data initialization", "idx_expand", "int", context__.to_vec(num_obs));
            idx_expand = std::vector<int>(num_obs, int(0));
            vals_i__ = context__.vals_i("idx_expand");
            pos__ = 0;
            size_t idx_expand_k_0_max__ = num_obs;
            for (size_t k_0__ = 0; k_0__ < idx_expand_k_0_max__; ++k_0__) {
                idx_expand[k_0__] = vals_i__[pos__++];
            }
            size_t idx_expand_i_0_max__ = num_obs;
            for (size_t i_0__ = 0; i_0__ < idx_expand_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "idx_expand[i_0__]", idx_expand[i_0__], 1);
                check_less_or_equal(function__, "idx_expand[i_0__]", idx_expand[i_0__], (num_bt + 1));
            }
            current_statement_begin__ = 483;
            context__.validate_dims("data initialization", "num_pred", "int", context__.to_vec());
            num_pred = int(0);
            vals_i__ = context__.vals_i("num_pred");
            pos__ = 0;
            num_pred = vals_i__[pos__++];
            current_statement_begin__ = 484;
            validate_non_negative_index("x_cont_PRED", "num_pred", num_pred);
            validate_non_negative_index("x_cont_PRED", "num_cov_cont", num_cov_cont);
            context__.validate_dims("data initialization", "x_cont_PRED", "vector_d", context__.to_vec(num_cov_cont,num_pred));
            x_cont_PRED = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(num_cov_cont, Eigen::Matrix<double, Eigen::Dynamic, 1>(num_pred));
            vals_r__ = context__.vals_r("x_cont_PRED");
            pos__ = 0;
            size_t x_cont_PRED_j_1_max__ = num_pred;
            size_t x_cont_PRED_k_0_max__ = num_cov_cont;
            for (size_t j_1__ = 0; j_1__ < x_cont_PRED_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x_cont_PRED_k_0_max__; ++k_0__) {
                    x_cont_PRED[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 485;
            validate_non_negative_index("x_cont_unnorm_PRED", "num_pred", num_pred);
            validate_non_negative_index("x_cont_unnorm_PRED", "num_cov_cont", num_cov_cont);
            context__.validate_dims("data initialization", "x_cont_unnorm_PRED", "vector_d", context__.to_vec(num_cov_cont,num_pred));
            x_cont_unnorm_PRED = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(num_cov_cont, Eigen::Matrix<double, Eigen::Dynamic, 1>(num_pred));
            vals_r__ = context__.vals_r("x_cont_unnorm_PRED");
            pos__ = 0;
            size_t x_cont_unnorm_PRED_j_1_max__ = num_pred;
            size_t x_cont_unnorm_PRED_k_0_max__ = num_cov_cont;
            for (size_t j_1__ = 0; j_1__ < x_cont_unnorm_PRED_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x_cont_unnorm_PRED_k_0_max__; ++k_0__) {
                    x_cont_unnorm_PRED[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 486;
            validate_non_negative_index("x_cont_mask_PRED", "num_cov_cont", num_cov_cont);
            validate_non_negative_index("x_cont_mask_PRED", "num_obs", num_obs);
            context__.validate_dims("data initialization", "x_cont_mask_PRED", "int", context__.to_vec(num_cov_cont,num_obs));
            x_cont_mask_PRED = std::vector<std::vector<int> >(num_cov_cont, std::vector<int>(num_obs, int(0)));
            vals_i__ = context__.vals_i("x_cont_mask_PRED");
            pos__ = 0;
            size_t x_cont_mask_PRED_k_0_max__ = num_cov_cont;
            size_t x_cont_mask_PRED_k_1_max__ = num_obs;
            for (size_t k_1__ = 0; k_1__ < x_cont_mask_PRED_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < x_cont_mask_PRED_k_0_max__; ++k_0__) {
                    x_cont_mask_PRED[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 487;
            validate_non_negative_index("x_cat_PRED", "num_cov_cat", num_cov_cat);
            validate_non_negative_index("x_cat_PRED", "num_obs", num_obs);
            context__.validate_dims("data initialization", "x_cat_PRED", "int", context__.to_vec(num_cov_cat,num_obs));
            x_cat_PRED = std::vector<std::vector<int> >(num_cov_cat, std::vector<int>(num_obs, int(0)));
            vals_i__ = context__.vals_i("x_cat_PRED");
            pos__ = 0;
            size_t x_cat_PRED_k_0_max__ = num_cov_cat;
            size_t x_cat_PRED_k_1_max__ = num_obs;
            for (size_t k_1__ = 0; k_1__ < x_cat_PRED_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < x_cat_PRED_k_0_max__; ++k_0__) {
                    x_cat_PRED[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 488;
            validate_non_negative_index("idx_expand_PRED", "num_pred", num_pred);
            context__.validate_dims("data initialization", "idx_expand_PRED", "int", context__.to_vec(num_pred));
            idx_expand_PRED = std::vector<int>(num_pred, int(0));
            vals_i__ = context__.vals_i("idx_expand_PRED");
            pos__ = 0;
            size_t idx_expand_PRED_k_0_max__ = num_pred;
            for (size_t k_0__ = 0; k_0__ < idx_expand_PRED_k_0_max__; ++k_0__) {
                idx_expand_PRED[k_0__] = vals_i__[pos__++];
            }
            size_t idx_expand_PRED_i_0_max__ = num_pred;
            for (size_t i_0__ = 0; i_0__ < idx_expand_PRED_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "idx_expand_PRED[i_0__]", idx_expand_PRED[i_0__], 1);
                check_less_or_equal(function__, "idx_expand_PRED[i_0__]", idx_expand_PRED[i_0__], (num_bt + 1));
            }
            current_statement_begin__ = 490;
            context__.validate_dims("data initialization", "S", "int", context__.to_vec());
            S = int(0);
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            S = vals_i__[pos__++];
            check_greater_or_equal(function__, "S", S, 1);
            current_statement_begin__ = 491;
            validate_non_negative_index("d_alpha", "S", S);
            validate_non_negative_index("d_alpha", "num_comps", num_comps);
            context__.validate_dims("data initialization", "d_alpha", "double", context__.to_vec(S,num_comps));
            d_alpha = std::vector<std::vector<double> >(S, std::vector<double>(num_comps, double(0)));
            vals_r__ = context__.vals_r("d_alpha");
            pos__ = 0;
            size_t d_alpha_k_0_max__ = S;
            size_t d_alpha_k_1_max__ = num_comps;
            for (size_t k_1__ = 0; k_1__ < d_alpha_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < d_alpha_k_0_max__; ++k_0__) {
                    d_alpha[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t d_alpha_i_0_max__ = S;
            size_t d_alpha_i_1_max__ = num_comps;
            for (size_t i_0__ = 0; i_0__ < d_alpha_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < d_alpha_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "d_alpha[i_0__][i_1__]", d_alpha[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 492;
            validate_non_negative_index("d_ell", "S", S);
            validate_non_negative_index("d_ell", "num_ell", num_ell);
            context__.validate_dims("data initialization", "d_ell", "double", context__.to_vec(S,num_ell));
            d_ell = std::vector<std::vector<double> >(S, std::vector<double>(num_ell, double(0)));
            vals_r__ = context__.vals_r("d_ell");
            pos__ = 0;
            size_t d_ell_k_0_max__ = S;
            size_t d_ell_k_1_max__ = num_ell;
            for (size_t k_1__ = 0; k_1__ < d_ell_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < d_ell_k_0_max__; ++k_0__) {
                    d_ell[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t d_ell_i_0_max__ = S;
            size_t d_ell_i_1_max__ = num_ell;
            for (size_t i_0__ = 0; i_0__ < d_ell_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < d_ell_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "d_ell[i_0__][i_1__]", d_ell[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 493;
            validate_non_negative_index("d_wrp", "S", S);
            validate_non_negative_index("d_wrp", "num_ns", num_ns);
            context__.validate_dims("data initialization", "d_wrp", "double", context__.to_vec(S,num_ns));
            d_wrp = std::vector<std::vector<double> >(S, std::vector<double>(num_ns, double(0)));
            vals_r__ = context__.vals_r("d_wrp");
            pos__ = 0;
            size_t d_wrp_k_0_max__ = S;
            size_t d_wrp_k_1_max__ = num_ns;
            for (size_t k_1__ = 0; k_1__ < d_wrp_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < d_wrp_k_0_max__; ++k_0__) {
                    d_wrp[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t d_wrp_i_0_max__ = S;
            size_t d_wrp_i_1_max__ = num_ns;
            for (size_t i_0__ = 0; i_0__ < d_wrp_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < d_wrp_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "d_wrp[i_0__][i_1__]", d_wrp[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 494;
            validate_non_negative_index("d_beta", "num_bt", num_bt);
            validate_non_negative_index("d_beta", "S", S);
            validate_non_negative_index("d_beta", "logical_gt(num_heter, 0)", logical_gt(num_heter, 0));
            context__.validate_dims("data initialization", "d_beta", "vector_d", context__.to_vec(S,logical_gt(num_heter, 0),num_bt));
            d_beta = std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > >(S, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(logical_gt(num_heter, 0), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_bt)));
            vals_r__ = context__.vals_r("d_beta");
            pos__ = 0;
            size_t d_beta_j_1_max__ = num_bt;
            size_t d_beta_k_0_max__ = S;
            size_t d_beta_k_1_max__ = logical_gt(num_heter, 0);
            for (size_t j_1__ = 0; j_1__ < d_beta_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < d_beta_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < d_beta_k_0_max__; ++k_0__) {
                        d_beta[k_0__][k_1__](j_1__) = vals_r__[pos__++];
                    }
                }
            }
            size_t d_beta_i_0_max__ = S;
            size_t d_beta_i_1_max__ = logical_gt(num_heter, 0);
            for (size_t i_0__ = 0; i_0__ < d_beta_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < d_beta_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "d_beta[i_0__][i_1__]", d_beta[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "d_beta[i_0__][i_1__]", d_beta[i_0__][i_1__], 1);
                }
            }
            current_statement_begin__ = 495;
            validate_non_negative_index("d_teff", "num_bt", num_bt);
            validate_non_negative_index("d_teff", "S", S);
            validate_non_negative_index("d_teff", "logical_gt(num_uncrt, 0)", logical_gt(num_uncrt, 0));
            context__.validate_dims("data initialization", "d_teff", "vector_d", context__.to_vec(S,logical_gt(num_uncrt, 0),num_bt));
            d_teff = std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > >(S, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(logical_gt(num_uncrt, 0), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_bt)));
            vals_r__ = context__.vals_r("d_teff");
            pos__ = 0;
            size_t d_teff_j_1_max__ = num_bt;
            size_t d_teff_k_0_max__ = S;
            size_t d_teff_k_1_max__ = logical_gt(num_uncrt, 0);
            for (size_t j_1__ = 0; j_1__ < d_teff_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < d_teff_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < d_teff_k_0_max__; ++k_0__) {
                        d_teff[k_0__][k_1__](j_1__) = vals_r__[pos__++];
                    }
                }
            }
            current_statement_begin__ = 496;
            validate_non_negative_index("d_sigma", "S", S);
            context__.validate_dims("data initialization", "d_sigma", "double", context__.to_vec(S));
            d_sigma = std::vector<double>(S, double(0));
            vals_r__ = context__.vals_r("d_sigma");
            pos__ = 0;
            size_t d_sigma_k_0_max__ = S;
            for (size_t k_0__ = 0; k_0__ < d_sigma_k_0_max__; ++k_0__) {
                d_sigma[k_0__] = vals_r__[pos__++];
            }
            size_t d_sigma_i_0_max__ = S;
            for (size_t i_0__ = 0; i_0__ < d_sigma_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "d_sigma[i_0__]", d_sigma[i_0__], 0);
            }
            current_statement_begin__ = 497;
            validate_non_negative_index("y_norm", "num_obs", num_obs);
            context__.validate_dims("data initialization", "y_norm", "vector_d", context__.to_vec(num_obs));
            y_norm = Eigen::Matrix<double, Eigen::Dynamic, 1>(num_obs);
            vals_r__ = context__.vals_r("y_norm");
            pos__ = 0;
            size_t y_norm_j_1_max__ = num_obs;
            for (size_t j_1__ = 0; j_1__ < y_norm_j_1_max__; ++j_1__) {
                y_norm(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            current_statement_begin__ = 502;
            validate_non_negative_index("K_const", "num_obs", num_obs);
            validate_non_negative_index("K_const", "num_obs", num_obs);
            validate_non_negative_index("K_const", "num_comps", num_comps);
            K_const = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(num_comps, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(num_obs, num_obs));
            stan::math::fill(K_const, DUMMY_VAR__);
            stan::math::assign(K_const,STAN_kernel_const_all(num_obs, num_obs, x_cat, x_cat, x_cont_mask, x_cont_mask, x_cat_num_levels, components, pstream__));
            current_statement_begin__ = 508;
            validate_non_negative_index("delta_vec", "num_obs", num_obs);
            delta_vec = Eigen::Matrix<double, Eigen::Dynamic, 1>(num_obs);
            stan::math::fill(delta_vec, DUMMY_VAR__);
            stan::math::assign(delta_vec,rep_vector(delta, num_obs));
            current_statement_begin__ = 510;
            validate_non_negative_index("K_const_s", "num_pred", num_pred);
            validate_non_negative_index("K_const_s", "num_obs", num_obs);
            validate_non_negative_index("K_const_s", "num_comps", num_comps);
            K_const_s = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(num_comps, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(num_pred, num_obs));
            stan::math::fill(K_const_s, DUMMY_VAR__);
            stan::math::assign(K_const_s,STAN_kernel_const_all(num_pred, num_obs, x_cat_PRED, x_cat, x_cont_mask_PRED, x_cont_mask, x_cat_num_levels, components, pstream__));
            current_statement_begin__ = 516;
            validate_non_negative_index("K_const_ss", "num_pred", num_pred);
            validate_non_negative_index("K_const_ss", "num_pred", num_pred);
            validate_non_negative_index("K_const_ss", "num_comps", num_comps);
            K_const_ss = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(num_comps, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(num_pred, num_pred));
            stan::math::fill(K_const_ss, DUMMY_VAR__);
            stan::math::assign(K_const_ss,STAN_kernel_const_all(num_pred, num_pred, x_cat_PRED, x_cat_PRED, x_cont_mask_PRED, x_cont_mask_PRED, x_cat_num_levels, components, pstream__));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_lgp_predict() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            // model body
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("F_POST");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back((2 * (num_comps + 1)));
        dims__.push_back(num_pred);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_lgp_predict_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 523;
            validate_non_negative_index("F_POST", "num_pred", num_pred);
            validate_non_negative_index("F_POST", "S", S);
            validate_non_negative_index("F_POST", "(2 * (num_comps + 1))", (2 * (num_comps + 1)));
            std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > F_POST(S, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >((2 * (num_comps + 1)), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_pred)));
            stan::math::initialize(F_POST, DUMMY_VAR__);
            stan::math::fill(F_POST, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 524;
            for (int is = 1; is <= S; ++is) {
                {
                current_statement_begin__ = 525;
                validate_non_negative_index("f_post", "num_pred", num_pred);
                validate_non_negative_index("f_post", "(2 * (num_comps + 1))", (2 * (num_comps + 1)));
                std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > f_post((2 * (num_comps + 1)), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(num_pred));
                stan::math::initialize(f_post, DUMMY_VAR__);
                stan::math::fill(f_post, DUMMY_VAR__);
                current_statement_begin__ = 526;
                validate_non_negative_index("KX", "num_obs", num_obs);
                validate_non_negative_index("KX", "num_obs", num_obs);
                validate_non_negative_index("KX", "num_comps", num_comps);
                std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(num_obs, num_obs));
                stan::math::initialize(KX, DUMMY_VAR__);
                stan::math::fill(KX, DUMMY_VAR__);
                stan::math::assign(KX,STAN_kernel_all(num_obs, num_obs, K_const, components, x_cont, x_cont, x_cont_unnorm, x_cont_unnorm, get_base1(d_alpha, is, "d_alpha", 1), get_base1(d_ell, is, "d_ell", 1), get_base1(d_wrp, is, "d_wrp", 1), get_base1(d_beta, is, "d_beta", 1), get_base1(d_teff, is, "d_teff", 1), vm_params, idx_expand, idx_expand, teff_zero, pstream__));
                current_statement_begin__ = 532;
                validate_non_negative_index("KX_s", "num_pred", num_pred);
                validate_non_negative_index("KX_s", "num_obs", num_obs);
                validate_non_negative_index("KX_s", "num_comps", num_comps);
                std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX_s(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(num_pred, num_obs));
                stan::math::initialize(KX_s, DUMMY_VAR__);
                stan::math::fill(KX_s, DUMMY_VAR__);
                stan::math::assign(KX_s,STAN_kernel_all(num_pred, num_obs, K_const_s, components, x_cont_PRED, x_cont, x_cont_unnorm_PRED, x_cont_unnorm, get_base1(d_alpha, is, "d_alpha", 1), get_base1(d_ell, is, "d_ell", 1), get_base1(d_wrp, is, "d_wrp", 1), get_base1(d_beta, is, "d_beta", 1), get_base1(d_teff, is, "d_teff", 1), vm_params, idx_expand_PRED, idx_expand, teff_zero, pstream__));
                current_statement_begin__ = 538;
                validate_non_negative_index("KX_ss", "num_pred", num_pred);
                validate_non_negative_index("KX_ss", "num_pred", num_pred);
                validate_non_negative_index("KX_ss", "num_comps", num_comps);
                std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX_ss(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(num_pred, num_pred));
                stan::math::initialize(KX_ss, DUMMY_VAR__);
                stan::math::fill(KX_ss, DUMMY_VAR__);
                stan::math::assign(KX_ss,STAN_kernel_all(num_pred, num_pred, K_const_ss, components, x_cont_PRED, x_cont_PRED, x_cont_unnorm_PRED, x_cont_unnorm_PRED, get_base1(d_alpha, is, "d_alpha", 1), get_base1(d_ell, is, "d_ell", 1), get_base1(d_wrp, is, "d_wrp", 1), get_base1(d_beta, is, "d_beta", 1), get_base1(d_teff, is, "d_teff", 1), vm_params, idx_expand_PRED, idx_expand_PRED, teff_zero, pstream__));
                current_statement_begin__ = 544;
                stan::model::assign(F_POST, 
                            stan::model::cons_list(stan::model::index_uni(is), stan::model::nil_index_list()), 
                            STAN_gp_posterior(KX, KX_s, KX_ss, y_norm, delta, get_base1(d_sigma, is, "d_sigma", 1), pstream__), 
                            "assigning variable F_POST");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 523;
            size_t F_POST_j_1_max__ = num_pred;
            size_t F_POST_k_0_max__ = S;
            size_t F_POST_k_1_max__ = (2 * (num_comps + 1));
            for (size_t j_1__ = 0; j_1__ < F_POST_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < F_POST_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < F_POST_k_0_max__; ++k_0__) {
                        vars__.push_back(F_POST[k_0__][k_1__](j_1__));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_lgp_predict";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t F_POST_j_1_max__ = num_pred;
        size_t F_POST_k_0_max__ = S;
        size_t F_POST_k_1_max__ = (2 * (num_comps + 1));
        for (size_t j_1__ = 0; j_1__ < F_POST_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < F_POST_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < F_POST_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "F_POST" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t F_POST_j_1_max__ = num_pred;
        size_t F_POST_k_0_max__ = S;
        size_t F_POST_k_1_max__ = (2 * (num_comps + 1));
        for (size_t j_1__ = 0; j_1__ < F_POST_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < F_POST_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < F_POST_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "F_POST" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
    }
}; // model
}  // namespace
typedef model_lgp_predict_namespace::model_lgp_predict stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
