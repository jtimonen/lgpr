// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_lgp_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_lgp");
    reader.add_event(19, 19, "include", "chunks/functions-utils.stan");
    reader.add_event(19, 0, "start", "chunks/functions-utils.stan");
    reader.add_event(64, 45, "end", "chunks/functions-utils.stan");
    reader.add_event(64, 20, "restart", "model_lgp");
    reader.add_event(64, 20, "include", "chunks/functions-prior.stan");
    reader.add_event(64, 0, "start", "chunks/functions-prior.stan");
    reader.add_event(106, 42, "end", "chunks/functions-prior.stan");
    reader.add_event(106, 21, "restart", "model_lgp");
    reader.add_event(106, 21, "include", "chunks/functions-posterior.stan");
    reader.add_event(106, 0, "start", "chunks/functions-posterior.stan");
    reader.add_event(159, 53, "end", "chunks/functions-posterior.stan");
    reader.add_event(159, 22, "restart", "model_lgp");
    reader.add_event(159, 22, "include", "chunks/functions-kernels_base.stan");
    reader.add_event(159, 0, "start", "chunks/functions-kernels_base.stan");
    reader.add_event(251, 92, "end", "chunks/functions-kernels_base.stan");
    reader.add_event(251, 23, "restart", "model_lgp");
    reader.add_event(251, 23, "include", "chunks/functions-kernels_single.stan");
    reader.add_event(251, 0, "start", "chunks/functions-kernels_single.stan");
    reader.add_event(404, 153, "end", "chunks/functions-kernels_single.stan");
    reader.add_event(404, 24, "restart", "model_lgp");
    reader.add_event(404, 24, "include", "chunks/functions-kernels_many.stan");
    reader.add_event(404, 0, "start", "chunks/functions-kernels_many.stan");
    reader.add_event(489, 85, "end", "chunks/functions-kernels_many.stan");
    reader.add_event(489, 25, "restart", "model_lgp");
    reader.add_event(492, 28, "include", "chunks/data.stan");
    reader.add_event(492, 0, "start", "chunks/data.stan");
    reader.add_event(614, 122, "end", "chunks/data.stan");
    reader.add_event(614, 29, "restart", "model_lgp");
    reader.add_event(617, 32, "include", "chunks/data-transformed.stan");
    reader.add_event(617, 0, "start", "chunks/data-transformed.stan");
    reader.add_event(627, 10, "end", "chunks/data-transformed.stan");
    reader.add_event(627, 33, "restart", "model_lgp");
    reader.add_event(630, 36, "include", "chunks/parameters.stan");
    reader.add_event(630, 0, "start", "chunks/parameters.stan");
    reader.add_event(645, 15, "end", "chunks/parameters.stan");
    reader.add_event(645, 37, "restart", "model_lgp");
    reader.add_event(648, 40, "include", "chunks/parameters-transformed.stan");
    reader.add_event(648, 0, "start", "chunks/parameters-transformed.stan");
    reader.add_event(670, 22, "end", "chunks/parameters-transformed.stan");
    reader.add_event(670, 41, "restart", "model_lgp");
    reader.add_event(673, 44, "include", "chunks/model-prior.stan");
    reader.add_event(673, 0, "start", "chunks/model-prior.stan");
    reader.add_event(729, 56, "end", "chunks/model-prior.stan");
    reader.add_event(729, 45, "restart", "model_lgp");
    reader.add_event(731, 47, "include", "chunks/model-likelihood.stan");
    reader.add_event(731, 0, "start", "chunks/model-likelihood.stan");
    reader.add_event(779, 48, "end", "chunks/model-likelihood.stan");
    reader.add_event(779, 48, "restart", "model_lgp");
    reader.add_event(783, 52, "include", "chunks/generated.stan");
    reader.add_event(783, 0, "start", "chunks/generated.stan");
    reader.add_event(802, 19, "end", "chunks/generated.stan");
    reader.add_event(802, 53, "restart", "model_lgp");
    reader.add_event(805, 54, "end", "model_lgp");
    return reader;
}
template <typename T0__>
void
STAN_check_real_positive(const T0__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 22;
        if (as_bool(logical_lte(a, 0))) {
            current_statement_begin__ = 22;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "argument must be positive!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 23;
        if (as_bool(is_nan(a))) {
            current_statement_begin__ = 23;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "argument must not be NaN!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 24;
        if (as_bool(is_inf(a))) {
            current_statement_begin__ = 24;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "argument must be finite!";
            throw std::domain_error(errmsg_stream__.str());
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_check_real_positive_functor__ {
    template <typename T0__>
        void
    operator()(const T0__& a, std::ostream* pstream__) const {
        return STAN_check_real_positive(a, pstream__);
    }
};
template <typename T0__>
void
STAN_check_prob_positive(const T0__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 29;
        if (as_bool((primitive_value(logical_lte(a, 0)) || primitive_value(logical_gt(a, 1))))) {
            current_statement_begin__ = 29;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "argument must be on the interval (0, 1]!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 30;
        if (as_bool(is_nan(a))) {
            current_statement_begin__ = 30;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "argument must not be NaN!";
            throw std::domain_error(errmsg_stream__.str());
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_check_prob_positive_functor__ {
    template <typename T0__>
        void
    operator()(const T0__& a, std::ostream* pstream__) const {
        return STAN_check_prob_positive(a, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
STAN_warp_input(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                    const T1__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 35;
        STAN_check_real_positive(a, pstream__);
        current_statement_begin__ = 36;
        return stan::math::promote_scalar<fun_return_scalar_t__>(add(-(1), multiply(2, inv(add(1, stan::math::exp(multiply(-(a), x)))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_warp_input_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                    const T1__& a, std::ostream* pstream__) const {
        return STAN_warp_input(x, a, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
STAN_var_mask(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                  const T1__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 41;
        STAN_check_real_positive(a, pstream__);
        current_statement_begin__ = 42;
        return stan::math::promote_scalar<fun_return_scalar_t__>(inv(add(1, stan::math::exp(multiply(-(a), x)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_var_mask_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                  const T1__& a, std::ostream* pstream__) const {
        return STAN_var_mask(x, a, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_expand(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                const std::vector<int>& idx_expand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 47;
        int L(0);
        (void) L;  // dummy to suppress unused var warning
        stan::math::fill(L, std::numeric_limits<int>::min());
        stan::math::assign(L,num_elements(v));
        current_statement_begin__ = 48;
        validate_non_negative_index("v_add0", "(L + 1)", (L + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v_add0((L + 1));
        stan::math::initialize(v_add0, DUMMY_VAR__);
        stan::math::fill(v_add0, DUMMY_VAR__);
        stan::math::assign(v_add0,rep_vector(0.0, (L + 1)));
        current_statement_begin__ = 49;
        stan::model::assign(v_add0, 
                    stan::model::cons_list(stan::model::index_min_max(2, (L + 1)), stan::model::nil_index_list()), 
                    v, 
                    "assigning variable v_add0");
        current_statement_begin__ = 50;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::model::rvalue(v_add0, stan::model::cons_list(stan::model::index_multi(idx_expand), stan::model::nil_index_list()), "v_add0"));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_expand_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                const std::vector<int>& idx_expand, std::ostream* pstream__) const {
        return STAN_expand(v, idx_expand, pstream__);
    }
};
template <typename T0__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic, 1>
STAN_edit_dis_age(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_dis_age,
                      const std::vector<int>& idx_expand,
                      const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& teff_obs,
                      const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& teff, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 60;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(x_dis_age));
        current_statement_begin__ = 61;
        validate_non_negative_index("x_teff_obs", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_teff_obs(n);
        stan::math::initialize(x_teff_obs, DUMMY_VAR__);
        stan::math::fill(x_teff_obs, DUMMY_VAR__);
        stan::math::assign(x_teff_obs,STAN_expand(teff_obs, idx_expand, pstream__));
        current_statement_begin__ = 62;
        validate_non_negative_index("x_teff", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_teff(n);
        stan::math::initialize(x_teff, DUMMY_VAR__);
        stan::math::fill(x_teff, DUMMY_VAR__);
        stan::math::assign(x_teff,STAN_expand(teff, idx_expand, pstream__));
        current_statement_begin__ = 63;
        return stan::math::promote_scalar<fun_return_scalar_t__>(subtract(add(x_dis_age, x_teff_obs), x_teff));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_edit_dis_age_functor__ {
    template <typename T0__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_dis_age,
                      const std::vector<int>& idx_expand,
                      const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& teff_obs,
                      const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& teff, std::ostream* pstream__) const {
        return STAN_edit_dis_age(x_dis_age, idx_expand, teff_obs, teff, pstream__);
    }
};
template <typename T0__, typename T2__>
typename boost::math::tools::promote_args<T0__, T2__>::type
STAN_log_prior(const T0__& x,
                   const std::vector<int>& types,
                   const std::vector<T2__>& hp, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 71;
        local_scalar_t__ lp(DUMMY_VAR__);
        (void) lp;  // dummy to suppress unused var warning
        stan::math::initialize(lp, DUMMY_VAR__);
        stan::math::fill(lp, DUMMY_VAR__);
        current_statement_begin__ = 72;
        local_scalar_t__ a(DUMMY_VAR__);
        (void) a;  // dummy to suppress unused var warning
        stan::math::initialize(a, DUMMY_VAR__);
        stan::math::fill(a, DUMMY_VAR__);
        stan::math::assign(a,get_base1(hp, 1, "hp", 1));
        current_statement_begin__ = 73;
        local_scalar_t__ b(DUMMY_VAR__);
        (void) b;  // dummy to suppress unused var warning
        stan::math::initialize(b, DUMMY_VAR__);
        stan::math::fill(b, DUMMY_VAR__);
        stan::math::assign(b,get_base1(hp, 2, "hp", 1));
        current_statement_begin__ = 74;
        local_scalar_t__ c(DUMMY_VAR__);
        (void) c;  // dummy to suppress unused var warning
        stan::math::initialize(c, DUMMY_VAR__);
        stan::math::fill(c, DUMMY_VAR__);
        stan::math::assign(c,get_base1(hp, 3, "hp", 1));
        current_statement_begin__ = 75;
        local_scalar_t__ theta(DUMMY_VAR__);
        (void) theta;  // dummy to suppress unused var warning
        stan::math::initialize(theta, DUMMY_VAR__);
        stan::math::fill(theta, DUMMY_VAR__);
        current_statement_begin__ = 78;
        if (as_bool(logical_eq(get_base1(types, 2, "types", 1), 0))) {
            current_statement_begin__ = 79;
            stan::math::assign(lp, 0);
            current_statement_begin__ = 80;
            stan::math::assign(theta, x);
        } else if (as_bool(logical_eq(get_base1(types, 2, "types", 1), 1))) {
            current_statement_begin__ = 82;
            stan::math::assign(lp, stan::math::log(stan::math::fabs((2 * x))));
            current_statement_begin__ = 83;
            stan::math::assign(theta, square(x));
        } else {
            current_statement_begin__ = 85;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "invalid value of types[2]!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 89;
        if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 1))) {
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 2))) {
            current_statement_begin__ = 92;
            stan::math::assign(lp, (lp + normal_log(theta, a, b)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 3))) {
            current_statement_begin__ = 94;
            stan::math::assign(lp, (lp + student_t_log(theta, a, 0, b)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 4))) {
            current_statement_begin__ = 96;
            stan::math::assign(lp, (lp + gamma_log(theta, a, b)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 5))) {
            current_statement_begin__ = 98;
            stan::math::assign(lp, (lp + inv_gamma_log(theta, a, b)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 6))) {
            current_statement_begin__ = 100;
            stan::math::assign(lp, (lp + lognormal_log(theta, a, b)));
        } else {
            current_statement_begin__ = 102;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "types[1] must be an integer between 1 and 6; found =";
            errmsg_stream__ << get_base1(types, 1, "types", 1);
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 105;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_log_prior_functor__ {
    template <typename T0__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T2__>::type
    operator()(const T0__& x,
                   const std::vector<int>& types,
                   const std::vector<T2__>& hp, std::ostream* pstream__) const {
        return STAN_log_prior(x, types, hp, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1> >
STAN_gp_posterior_helper(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& Ly,
                             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& K,
                             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& v, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 109;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(v));
        current_statement_begin__ = 110;
        validate_non_negative_index("A", "n", n);
        validate_non_negative_index("A", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> A(n, n);
        stan::math::initialize(A, DUMMY_VAR__);
        stan::math::fill(A, DUMMY_VAR__);
        stan::math::assign(A,mdivide_left_tri_low(Ly, transpose(K)));
        current_statement_begin__ = 111;
        validate_non_negative_index("f_post", "n", n);
        validate_non_negative_index("f_post", "2", 2);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > f_post(2, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(n));
        stan::math::initialize(f_post, DUMMY_VAR__);
        stan::math::fill(f_post, DUMMY_VAR__);
        current_statement_begin__ = 112;
        stan::model::assign(f_post, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    multiply(transpose(A), v), 
                    "assigning variable f_post");
        current_statement_begin__ = 113;
        stan::model::assign(f_post, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    diagonal(subtract(K, crossprod(A))), 
                    "assigning variable f_post");
        current_statement_begin__ = 114;
        return stan::math::promote_scalar<fun_return_scalar_t__>(f_post);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_gp_posterior_helper_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1> >
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& Ly,
                             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& K,
                             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& v, std::ostream* pstream__) const {
        return STAN_gp_posterior_helper(Ly, K, v, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, 1> >
STAN_gp_posterior(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& KX,
                      const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& y,
                      const T2__& delta,
                      const T3__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 126;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(KX));
        current_statement_begin__ = 127;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(y));
        current_statement_begin__ = 128;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,(num_comps + 1));
        current_statement_begin__ = 129;
        validate_non_negative_index("inds", "2", 2);
        std::vector<int  > inds(2, int(0));
        stan::math::fill(inds, std::numeric_limits<int>::min());
        current_statement_begin__ = 130;
        validate_non_negative_index("F_POST", "n", n);
        validate_non_negative_index("F_POST", "(2 * J)", (2 * J));
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > F_POST((2 * J), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(n));
        stan::math::initialize(F_POST, DUMMY_VAR__);
        stan::math::fill(F_POST, DUMMY_VAR__);
        current_statement_begin__ = 131;
        validate_non_negative_index("v", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v(n);
        stan::math::initialize(v, DUMMY_VAR__);
        stan::math::fill(v, DUMMY_VAR__);
        current_statement_begin__ = 132;
        validate_non_negative_index("Ky", "n", n);
        validate_non_negative_index("Ky", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Ky(n, n);
        stan::math::initialize(Ky, DUMMY_VAR__);
        stan::math::fill(Ky, DUMMY_VAR__);
        current_statement_begin__ = 133;
        validate_non_negative_index("Ly", "n", n);
        validate_non_negative_index("Ly", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Ly(n, n);
        stan::math::initialize(Ly, DUMMY_VAR__);
        stan::math::fill(Ly, DUMMY_VAR__);
        current_statement_begin__ = 136;
        validate_non_negative_index("Kx", "n", n);
        validate_non_negative_index("Kx", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Kx(n, n);
        stan::math::initialize(Kx, DUMMY_VAR__);
        stan::math::fill(Kx, DUMMY_VAR__);
        stan::math::assign(Kx,rep_matrix(0.0, n, n));
        current_statement_begin__ = 137;
        validate_non_negative_index("delta_vec", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta_vec(n);
        stan::math::initialize(delta_vec, DUMMY_VAR__);
        stan::math::fill(delta_vec, DUMMY_VAR__);
        stan::math::assign(delta_vec,rep_vector(delta, n));
        current_statement_begin__ = 138;
        validate_non_negative_index("sigma2_vec", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma2_vec(n);
        stan::math::initialize(sigma2_vec, DUMMY_VAR__);
        stan::math::fill(sigma2_vec, DUMMY_VAR__);
        stan::math::assign(sigma2_vec,rep_vector(square(sigma), n));
        current_statement_begin__ = 139;
        for (int j = 1; j <= num_comps; ++j) {
            current_statement_begin__ = 140;
            stan::math::assign(Kx, add(Kx, get_base1(KX, j, "KX", 1)));
        }
        current_statement_begin__ = 142;
        stan::math::assign(Ky, add(add(Kx, diag_matrix(sigma2_vec)), diag_matrix(multiply(num_comps, delta_vec))));
        current_statement_begin__ = 145;
        stan::math::assign(Ly, cholesky_decompose(Ky));
        current_statement_begin__ = 146;
        stan::math::assign(v, mdivide_left_tri_low(Ly, y));
        current_statement_begin__ = 149;
        for (int j = 1; j <= num_comps; ++j) {
            current_statement_begin__ = 150;
            stan::math::assign(inds, static_cast<std::vector<int> >(stan::math::array_builder<int >().add(j).add((2 * j)).array()));
            current_statement_begin__ = 151;
            stan::model::assign(F_POST, 
                        stan::model::cons_list(stan::model::index_multi(inds), stan::model::nil_index_list()), 
                        STAN_gp_posterior_helper(Ly, get_base1(KX, j, "KX", 1), v, pstream__), 
                        "assigning variable F_POST");
        }
        current_statement_begin__ = 155;
        stan::math::assign(inds, static_cast<std::vector<int> >(stan::math::array_builder<int >().add(J).add((2 * J)).array()));
        current_statement_begin__ = 156;
        stan::model::assign(F_POST, 
                    stan::model::cons_list(stan::model::index_multi(inds), stan::model::nil_index_list()), 
                    STAN_gp_posterior_helper(Ly, Kx, v, pstream__), 
                    "assigning variable F_POST");
        current_statement_begin__ = 157;
        return stan::math::promote_scalar<fun_return_scalar_t__>(F_POST);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_gp_posterior_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, 1> >
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& KX,
                      const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& y,
                      const T2__& delta,
                      const T3__& sigma, std::ostream* pstream__) const {
        return STAN_gp_posterior(KX, y, delta, sigma, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_zerosum(const std::vector<int>& x1,
                             const std::vector<int>& x2,
                             const int& num_cat, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 166;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));
        current_statement_begin__ = 167;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));
        current_statement_begin__ = 168;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 169;
        if (as_bool(logical_lte(num_cat, 1))) {
            current_statement_begin__ = 170;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "STAN_kernel_base_zerosum: <num_cat> must be at least 2!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 172;
        for (int i = 1; i <= n1; ++i) {
            current_statement_begin__ = 173;
            for (int j = 1; j <= n2; ++j) {
                current_statement_begin__ = 174;
                if (as_bool(logical_eq(get_base1(x1, i, "x1", 1), get_base1(x2, j, "x2", 1)))) {
                    current_statement_begin__ = 175;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                1, 
                                "assigning variable K");
                } else {
                    current_statement_begin__ = 177;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                -(inv((num_cat - 1))), 
                                "assigning variable K");
                }
            }
        }
        current_statement_begin__ = 181;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_base_zerosum_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                             const std::vector<int>& x2,
                             const int& num_cat, std::ostream* pstream__) const {
        return STAN_kernel_base_zerosum(x1, x2, num_cat, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_cat(const std::vector<int>& x1,
                         const std::vector<int>& x2, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 189;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));
        current_statement_begin__ = 190;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));
        current_statement_begin__ = 191;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 192;
        for (int i = 1; i <= n1; ++i) {
            current_statement_begin__ = 193;
            for (int j = 1; j <= n2; ++j) {
                current_statement_begin__ = 194;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            logical_eq(get_base1(x1, i, "x1", 1), get_base1(x2, j, "x2", 1)), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 197;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_base_cat_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                         const std::vector<int>& x2, std::ostream* pstream__) const {
        return STAN_kernel_base_cat(x1, x2, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_bin(const std::vector<int>& x1,
                         const std::vector<int>& x2,
                         const int& c, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 206;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));
        current_statement_begin__ = 207;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));
        current_statement_begin__ = 208;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 209;
        for (int i = 1; i <= n1; ++i) {
            current_statement_begin__ = 210;
            for (int j = 1; j <= n2; ++j) {
                current_statement_begin__ = 211;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            (logical_eq(get_base1(x1, i, "x1", 1), c) * logical_eq(get_base1(x2, j, "x2", 1), c)), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 214;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_base_bin_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                         const std::vector<int>& x2,
                         const int& c, std::ostream* pstream__) const {
        return STAN_kernel_base_bin(x1, x2, c, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_disease_mask(const std::vector<int>& x1,
                                  const std::vector<int>& x2, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 222;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));
        current_statement_begin__ = 223;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));
        current_statement_begin__ = 224;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 225;
        for (int i = 1; i <= n1; ++i) {
            current_statement_begin__ = 226;
            for (int j = 1; j <= n2; ++j) {
                current_statement_begin__ = 227;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            (logical_gt(get_base1(x1, i, "x1", 1), 0) * logical_gt(get_base1(x2, j, "x2", 1), 0)), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 230;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_base_disease_mask_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                                  const std::vector<int>& x2, std::ostream* pstream__) const {
        return STAN_kernel_base_disease_mask(x1, x2, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_var_mask(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                              const T2__& steepness,
                              const std::vector<T3__>& vm_params, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 240;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));
        current_statement_begin__ = 241;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));
        current_statement_begin__ = 242;
        local_scalar_t__ a(DUMMY_VAR__);
        (void) a;  // dummy to suppress unused var warning
        stan::math::initialize(a, DUMMY_VAR__);
        stan::math::fill(a, DUMMY_VAR__);
        stan::math::assign(a,(steepness * get_base1(vm_params, 2, "vm_params", 1)));
        current_statement_begin__ = 243;
        local_scalar_t__ r(DUMMY_VAR__);
        (void) r;  // dummy to suppress unused var warning
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);
        stan::math::assign(r,(inv(a) * logit(get_base1(vm_params, 1, "vm_params", 1))));
        current_statement_begin__ = 244;
        validate_non_negative_index("s1", "n1", n1);
        validate_non_negative_index("s1", "1", 1);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> s1(n1, 1);
        stan::math::initialize(s1, DUMMY_VAR__);
        stan::math::fill(s1, DUMMY_VAR__);
        stan::math::assign(s1,to_matrix(STAN_var_mask(subtract(x1, r), a, pstream__)));
        current_statement_begin__ = 245;
        validate_non_negative_index("s2", "n2", n2);
        validate_non_negative_index("s2", "1", 1);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> s2(n2, 1);
        stan::math::initialize(s2, DUMMY_VAR__);
        stan::math::fill(s2, DUMMY_VAR__);
        stan::math::assign(s2,to_matrix(STAN_var_mask(subtract(x2, r), a, pstream__)));
        current_statement_begin__ = 246;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        stan::math::assign(K,multiply(s1, transpose(s2)));
        current_statement_begin__ = 247;
        STAN_check_real_positive(steepness, pstream__);
        current_statement_begin__ = 248;
        STAN_check_real_positive(get_base1(vm_params, 2, "vm_params", 1), pstream__);
        current_statement_begin__ = 249;
        STAN_check_prob_positive(get_base1(vm_params, 1, "vm_params", 1), pstream__);
        current_statement_begin__ = 250;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_base_var_mask_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                              const T2__& steepness,
                              const std::vector<T3__>& vm_params, std::ostream* pstream__) const {
        return STAN_kernel_base_var_mask(x1, x2, steepness, vm_params, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_discrete(const std::vector<int>& x1,
                         const std::vector<int>& x2,
                         const int& kernel_type,
                         const int& num_cat, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 262;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));
        current_statement_begin__ = 263;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));
        current_statement_begin__ = 264;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 265;
        if (as_bool(logical_eq(kernel_type, 0))) {
            current_statement_begin__ = 266;
            stan::math::assign(K, STAN_kernel_base_zerosum(x1, x2, num_cat, pstream__));
        } else if (as_bool(logical_eq(kernel_type, 1))) {
            current_statement_begin__ = 268;
            stan::math::assign(K, STAN_kernel_base_cat(x1, x2, pstream__));
        } else if (as_bool(logical_eq(kernel_type, 2))) {
            current_statement_begin__ = 270;
            stan::math::assign(K, STAN_kernel_base_bin(x1, x2, 1, pstream__));
        } else {
            current_statement_begin__ = 272;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "invalid kernel type";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 274;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_discrete_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                         const std::vector<int>& x2,
                         const int& kernel_type,
                         const int& num_cat, std::ostream* pstream__) const {
        return STAN_kernel_discrete(x1, x2, kernel_type, num_cat, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_fixed(const std::vector<int>& x1,
                      const std::vector<int>& x2,
                      const int& num_levels,
                      const int& ctype,
                      const int& ktype, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 288;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));
        current_statement_begin__ = 289;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));
        current_statement_begin__ = 290;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 291;
        if (as_bool((primitive_value(logical_eq(ctype, 0)) || primitive_value(logical_eq(ctype, 2))))) {
            current_statement_begin__ = 292;
            stan::math::assign(K, STAN_kernel_discrete(x1, x2, ktype, num_levels, pstream__));
        } else if (as_bool(logical_eq(ctype, 3))) {
            current_statement_begin__ = 294;
            stan::math::assign(K, STAN_kernel_base_disease_mask(x1, x2, pstream__));
        } else {
            current_statement_begin__ = 296;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "STAN_kernel_fixed: <ctype> should be 0, 2, or 3!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 298;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_fixed_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                      const std::vector<int>& x2,
                      const int& num_levels,
                      const int& ctype,
                      const int& ktype, std::ostream* pstream__) const {
        return STAN_kernel_fixed(x1, x2, num_levels, ctype, ktype, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_stationary(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& K_fixed,
                           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x1,
                           const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& x2,
                           const int& ctype,
                           const T4__& alpha,
                           const T5__& ell, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 313;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));
        current_statement_begin__ = 314;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));
        current_statement_begin__ = 315;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 316;
        if (as_bool(logical_eq(ctype, 0))) {
            current_statement_begin__ = 317;
            stan::math::assign(K, multiply(square(alpha), K_fixed));
        } else if (as_bool((primitive_value(logical_eq(ctype, 1)) || primitive_value(logical_eq(ctype, 2))))) {
            current_statement_begin__ = 319;
            stan::math::assign(K, cov_exp_quad(to_array_1d(x1), to_array_1d(x2), alpha, ell));
            current_statement_begin__ = 320;
            if (as_bool(logical_eq(ctype, 2))) {
                current_statement_begin__ = 321;
                stan::math::assign(K, elt_multiply(K, K_fixed));
            }
        } else {
            current_statement_begin__ = 324;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "STAN_kernel_stationary: <ctype> must be 0, 1, or 2!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 326;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_stationary_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& K_fixed,
                           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x1,
                           const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& x2,
                           const int& ctype,
                           const T4__& alpha,
                           const T5__& ell, std::ostream* pstream__) const {
        return STAN_kernel_stationary(K_fixed, x1, x2, ctype, alpha, ell, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_nonstationary(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                              const T2__& alpha,
                              const T3__& ell,
                              const T4__& steepness,
                              const std::vector<std::vector<T5__> >& vm_params, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 340;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));
        current_statement_begin__ = 341;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));
        current_statement_begin__ = 342;
        validate_non_negative_index("w1", "n1", n1);
        std::vector<local_scalar_t__  > w1(n1, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(w1, DUMMY_VAR__);
        stan::math::fill(w1, DUMMY_VAR__);
        stan::math::assign(w1,to_array_1d(STAN_warp_input(x1, steepness, pstream__)));
        current_statement_begin__ = 343;
        validate_non_negative_index("w2", "n2", n2);
        std::vector<local_scalar_t__  > w2(n2, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(w2, DUMMY_VAR__);
        stan::math::fill(w2, DUMMY_VAR__);
        stan::math::assign(w2,to_array_1d(STAN_warp_input(x2, steepness, pstream__)));
        current_statement_begin__ = 344;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        stan::math::assign(K,cov_exp_quad(w1, w2, alpha, ell));
        current_statement_begin__ = 347;
        int is_var_masked(0);
        (void) is_var_masked;  // dummy to suppress unused var warning
        stan::math::fill(is_var_masked, std::numeric_limits<int>::min());
        stan::math::assign(is_var_masked,size(vm_params));
        current_statement_begin__ = 348;
        if (as_bool(is_var_masked)) {
            current_statement_begin__ = 349;
            stan::math::assign(K, elt_multiply(K, STAN_kernel_base_var_mask(x1, x2, steepness, get_base1(vm_params, 1, "vm_params", 1), pstream__)));
        }
        current_statement_begin__ = 352;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_nonstationary_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                              const T2__& alpha,
                              const T3__& ell,
                              const T4__& steepness,
                              const std::vector<std::vector<T5__> >& vm_params, std::ostream* pstream__) const {
        return STAN_kernel_nonstationary(x1, x2, alpha, ell, steepness, vm_params, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T11__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T11__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_disease(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& K_fixed,
                        const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x1,
                        const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& x2,
                        const T3__& alpha,
                        const T4__& ell,
                        const T5__& wrp,
                        const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic, 1> >& beta,
                        const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic, 1> >& teff,
                        const std::vector<std::vector<T8__> >& vm_params,
                        const std::vector<std::vector<int> >& idx1_expand,
                        const std::vector<std::vector<int> >& idx2_expand,
                        const std::vector<Eigen::Matrix<T11__, Eigen::Dynamic, 1> >& teff_obs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T11__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 375;
        int is_heter(0);
        (void) is_heter;  // dummy to suppress unused var warning
        stan::math::fill(is_heter, std::numeric_limits<int>::min());
        stan::math::assign(is_heter,size(beta));
        current_statement_begin__ = 376;
        int is_uncrt(0);
        (void) is_uncrt;  // dummy to suppress unused var warning
        stan::math::fill(is_uncrt, std::numeric_limits<int>::min());
        stan::math::assign(is_uncrt,size(teff));
        current_statement_begin__ = 377;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));
        current_statement_begin__ = 378;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));
        current_statement_begin__ = 379;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        stan::math::assign(K,K_fixed);
        current_statement_begin__ = 382;
        validate_non_negative_index("t1", "n1", n1);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> t1(n1);
        stan::math::initialize(t1, DUMMY_VAR__);
        stan::math::fill(t1, DUMMY_VAR__);
        current_statement_begin__ = 383;
        validate_non_negative_index("t2", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> t2(n2);
        stan::math::initialize(t2, DUMMY_VAR__);
        stan::math::fill(t2, DUMMY_VAR__);
        current_statement_begin__ = 384;
        if (as_bool(is_uncrt)) {
            current_statement_begin__ = 385;
            stan::math::assign(t1, STAN_edit_dis_age(x1, get_base1(idx1_expand, 1, "idx1_expand", 1), get_base1(teff_obs, 1, "teff_obs", 1), get_base1(teff, 1, "teff", 1), pstream__));
            current_statement_begin__ = 386;
            stan::math::assign(t2, STAN_edit_dis_age(x2, get_base1(idx2_expand, 1, "idx2_expand", 1), get_base1(teff_obs, 1, "teff_obs", 1), get_base1(teff, 1, "teff", 1), pstream__));
        } else {
            current_statement_begin__ = 388;
            stan::math::assign(t1, x1);
            current_statement_begin__ = 389;
            stan::math::assign(t2, x2);
        }
        current_statement_begin__ = 393;
        stan::math::assign(K, elt_multiply(K, STAN_kernel_nonstationary(t1, t2, alpha, ell, wrp, vm_params, pstream__)));
        current_statement_begin__ = 396;
        if (as_bool(is_heter)) {
            {
            current_statement_begin__ = 397;
            validate_non_negative_index("b1", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b1(n1);
            stan::math::initialize(b1, DUMMY_VAR__);
            stan::math::fill(b1, DUMMY_VAR__);
            stan::math::assign(b1,STAN_expand(get_base1(beta, 1, "beta", 1), get_base1(idx1_expand, 1, "idx1_expand", 1), pstream__));
            current_statement_begin__ = 398;
            validate_non_negative_index("b2", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b2(n2);
            stan::math::initialize(b2, DUMMY_VAR__);
            stan::math::fill(b2, DUMMY_VAR__);
            stan::math::assign(b2,STAN_expand(get_base1(beta, 1, "beta", 1), get_base1(idx2_expand, 1, "idx2_expand", 1), pstream__));
            current_statement_begin__ = 399;
            validate_non_negative_index("K_beta", "n1", n1);
            validate_non_negative_index("K_beta", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K_beta(n1, n2);
            stan::math::initialize(K_beta, DUMMY_VAR__);
            stan::math::fill(K_beta, DUMMY_VAR__);
            stan::math::assign(K_beta,multiply(to_matrix(b1), transpose(to_matrix(b2))));
            current_statement_begin__ = 400;
            stan::math::assign(K, elt_multiply(K, K_beta));
            }
        }
        current_statement_begin__ = 403;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_disease_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T11__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T11__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& K_fixed,
                        const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x1,
                        const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& x2,
                        const T3__& alpha,
                        const T4__& ell,
                        const T5__& wrp,
                        const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic, 1> >& beta,
                        const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic, 1> >& teff,
                        const std::vector<std::vector<T8__> >& vm_params,
                        const std::vector<std::vector<int> >& idx1_expand,
                        const std::vector<std::vector<int> >& idx2_expand,
                        const std::vector<Eigen::Matrix<T11__, Eigen::Dynamic, 1> >& teff_obs, std::ostream* pstream__) const {
        return STAN_kernel_disease(K_fixed, x1, x2, alpha, ell, wrp, beta, teff, vm_params, idx1_expand, idx2_expand, teff_obs, pstream__);
    }
};
std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_fixed_all(const std::vector<std::vector<int> >& x1,
                          const std::vector<std::vector<int> >& x2,
                          const std::vector<int>& num_levels,
                          const std::vector<std::vector<int> >& components, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 415;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(get_base1(x1, 1, "x1", 1)));
        current_statement_begin__ = 416;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(get_base1(x2, 1, "x2", 1)));
        current_statement_begin__ = 417;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(get_base1(components, 1, "components", 1)));
        current_statement_begin__ = 418;
        validate_non_negative_index("K_fixed", "n1", n1);
        validate_non_negative_index("K_fixed", "n2", n2);
        validate_non_negative_index("K_fixed", "num_comps", num_comps);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > K_fixed(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n1, n2));
        stan::math::initialize(K_fixed, DUMMY_VAR__);
        stan::math::fill(K_fixed, DUMMY_VAR__);
        current_statement_begin__ = 419;
        for (int j = 1; j <= num_comps; ++j) {
            {
            current_statement_begin__ = 420;
            int ctype(0);
            (void) ctype;  // dummy to suppress unused var warning
            stan::math::fill(ctype, std::numeric_limits<int>::min());
            stan::math::assign(ctype,get_base1(get_base1(components, 1, "components", 1), j, "components", 2));
            current_statement_begin__ = 421;
            if (as_bool(logical_neq(ctype, 1))) {
                {
                current_statement_begin__ = 422;
                int ktype(0);
                (void) ktype;  // dummy to suppress unused var warning
                stan::math::fill(ktype, std::numeric_limits<int>::min());
                stan::math::assign(ktype,get_base1(get_base1(components, 2, "components", 1), j, "components", 2));
                current_statement_begin__ = 423;
                int idx(0);
                (void) idx;  // dummy to suppress unused var warning
                stan::math::fill(idx, std::numeric_limits<int>::min());
                stan::math::assign(idx,get_base1(get_base1(components, 3, "components", 1), j, "components", 2));
                current_statement_begin__ = 424;
                validate_non_negative_index("x1_j", "n1", n1);
                std::vector<int  > x1_j(n1, int(0));
                stan::math::fill(x1_j, std::numeric_limits<int>::min());
                stan::math::assign(x1_j,get_base1(x1, idx, "x1", 1));
                current_statement_begin__ = 425;
                validate_non_negative_index("x2_j", "n1", n1);
                std::vector<int  > x2_j(n1, int(0));
                stan::math::fill(x2_j, std::numeric_limits<int>::min());
                stan::math::assign(x2_j,get_base1(x2, idx, "x2", 1));
                current_statement_begin__ = 426;
                int n_levels(0);
                (void) n_levels;  // dummy to suppress unused var warning
                stan::math::fill(n_levels, std::numeric_limits<int>::min());
                stan::math::assign(n_levels,get_base1(num_levels, idx, "num_levels", 1));
                current_statement_begin__ = 427;
                stan::model::assign(K_fixed, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            STAN_kernel_fixed(x1_j, x2_j, n_levels, ctype, ktype, pstream__), 
                            "assigning variable K_fixed");
                }
            } else {
                current_statement_begin__ = 429;
                stan::model::assign(K_fixed, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            rep_matrix(0, n1, n2), 
                            "assigning variable K_fixed");
            }
            }
        }
        current_statement_begin__ = 432;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K_fixed);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_fixed_all_functor__ {
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const std::vector<std::vector<int> >& x1,
                          const std::vector<std::vector<int> >& x2,
                          const std::vector<int>& num_levels,
                          const std::vector<std::vector<int> >& components, std::ostream* pstream__) const {
        return STAN_kernel_fixed_all(x1, x2, num_levels, components, pstream__);
    }
};
template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T12__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__, typename boost::math::tools::promote_args<T9__, T12__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_all(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K_fixed,
                    const std::vector<std::vector<int> >& components,
                    const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, 1> >& x1,
                    const std::vector<Eigen::Matrix<T3__, Eigen::Dynamic, 1> >& x2,
                    const std::vector<T4__>& alpha,
                    const std::vector<T5__>& ell,
                    const std::vector<T6__>& wrp,
                    const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic, 1> >& beta,
                    const std::vector<Eigen::Matrix<T8__, Eigen::Dynamic, 1> >& teff,
                    const std::vector<std::vector<T9__> >& vm_params,
                    const std::vector<std::vector<int> >& idx1_expand,
                    const std::vector<std::vector<int> >& idx2_expand,
                    const std::vector<Eigen::Matrix<T12__, Eigen::Dynamic, 1> >& teff_obs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__, typename boost::math::tools::promote_args<T9__, T12__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 454;
        int ell_idx(0);
        (void) ell_idx;  // dummy to suppress unused var warning
        stan::math::fill(ell_idx, std::numeric_limits<int>::min());
        stan::math::assign(ell_idx,0);
        current_statement_begin__ = 455;
        local_scalar_t__ ell_j(DUMMY_VAR__);
        (void) ell_j;  // dummy to suppress unused var warning
        stan::math::initialize(ell_j, DUMMY_VAR__);
        stan::math::fill(ell_j, DUMMY_VAR__);
        current_statement_begin__ = 456;
        local_scalar_t__ alpha_j(DUMMY_VAR__);
        (void) alpha_j;  // dummy to suppress unused var warning
        stan::math::initialize(alpha_j, DUMMY_VAR__);
        stan::math::fill(alpha_j, DUMMY_VAR__);
        current_statement_begin__ = 457;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(get_base1(x1, 1, "x1", 1)));
        current_statement_begin__ = 458;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(get_base1(x2, 1, "x2", 1)));
        current_statement_begin__ = 459;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,num_elements(get_base1(components, 1, "components", 1)));
        current_statement_begin__ = 460;
        validate_non_negative_index("KX", "n1", n1);
        validate_non_negative_index("KX", "n2", n2);
        validate_non_negative_index("KX", "num_comps", num_comps);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n1, n2));
        stan::math::initialize(KX, DUMMY_VAR__);
        stan::math::fill(KX, DUMMY_VAR__);
        current_statement_begin__ = 462;
        for (int j = 1; j <= num_comps; ++j) {
            {
            current_statement_begin__ = 465;
            int ctype(0);
            (void) ctype;  // dummy to suppress unused var warning
            stan::math::fill(ctype, std::numeric_limits<int>::min());
            stan::math::assign(ctype,get_base1(get_base1(components, 1, "components", 1), j, "components", 2));
            current_statement_begin__ = 466;
            int idx(0);
            (void) idx;  // dummy to suppress unused var warning
            stan::math::fill(idx, std::numeric_limits<int>::min());
            stan::math::assign(idx,get_base1(get_base1(components, 4, "components", 1), j, "components", 2));
            current_statement_begin__ = 469;
            stan::math::assign(alpha_j, get_base1(alpha, j, "alpha", 1));
            current_statement_begin__ = 470;
            if (as_bool(logical_gt(ctype, 0))) {
                current_statement_begin__ = 471;
                stan::math::assign(ell_idx, (ell_idx + 1));
                current_statement_begin__ = 472;
                stan::math::assign(ell_j, get_base1(ell, ell_idx, "ell", 1));
            } else {
                current_statement_begin__ = 474;
                stan::math::assign(ell_j, 0.0);
            }
            current_statement_begin__ = 478;
            if (as_bool(logical_neq(ctype, 3))) {
                current_statement_begin__ = 479;
                stan::model::assign(KX, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            STAN_kernel_stationary(get_base1(K_fixed, j, "K_fixed", 1), get_base1(x1, idx, "x1", 1), get_base1(x2, idx, "x2", 1), ctype, alpha_j, ell_j, pstream__), 
                            "assigning variable KX");
            } else {
                current_statement_begin__ = 482;
                stan::model::assign(KX, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            STAN_kernel_disease(get_base1(K_fixed, j, "K_fixed", 1), get_base1(x1, idx, "x1", 1), get_base1(x2, idx, "x2", 1), alpha_j, ell_j, get_base1(wrp, 1, "wrp", 1), beta, teff, vm_params, idx1_expand, idx2_expand, teff_obs, pstream__), 
                            "assigning variable KX");
            }
            }
        }
        current_statement_begin__ = 488;
        return stan::math::promote_scalar<fun_return_scalar_t__>(KX);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_all_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T12__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__, typename boost::math::tools::promote_args<T9__, T12__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K_fixed,
                    const std::vector<std::vector<int> >& components,
                    const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, 1> >& x1,
                    const std::vector<Eigen::Matrix<T3__, Eigen::Dynamic, 1> >& x2,
                    const std::vector<T4__>& alpha,
                    const std::vector<T5__>& ell,
                    const std::vector<T6__>& wrp,
                    const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic, 1> >& beta,
                    const std::vector<Eigen::Matrix<T8__, Eigen::Dynamic, 1> >& teff,
                    const std::vector<std::vector<T9__> >& vm_params,
                    const std::vector<std::vector<int> >& idx1_expand,
                    const std::vector<std::vector<int> >& idx2_expand,
                    const std::vector<Eigen::Matrix<T12__, Eigen::Dynamic, 1> >& teff_obs, std::ostream* pstream__) const {
        return STAN_kernel_all(K_fixed, components, x1, x2, alpha, ell, wrp, beta, teff, vm_params, idx1_expand, idx2_expand, teff_obs, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_lgp
  : public stan::model::model_base_crtp<model_lgp> {
private:
        int is_verbose;
        int is_f_sampled;
        int is_heter;
        int is_uncrt;
        int is_vm_used;
        int is_likelihood_skipped;
        int is_generated_skipped;
        int num_subjects;
        int num_cases;
        int num_obs;
        int num_cov_cont;
        int num_cov_disc;
        int num_comps;
        int num_ell;
        int num_dis;
        int obs_model;
        std::vector<std::vector<int> > components;
        std::vector<vector_d> y_cont;
        std::vector<std::vector<int> > y_disc;
        std::vector<vector_d> x_cont;
        std::vector<std::vector<int> > x_disc;
        std::vector<std::vector<int> > y_num_trials;
        std::vector<int> num_levels;
        std::vector<std::vector<int> > idx_expand;
        std::vector<std::vector<int> > prior_alpha;
        std::vector<std::vector<int> > prior_ell;
        std::vector<std::vector<int> > prior_wrp;
        std::vector<std::vector<int> > prior_sigma;
        std::vector<std::vector<int> > prior_phi;
        std::vector<std::vector<int> > prior_teff;
        std::vector<std::vector<double> > hyper_alpha;
        std::vector<std::vector<double> > hyper_ell;
        std::vector<std::vector<double> > hyper_wrp;
        std::vector<std::vector<double> > hyper_sigma;
        std::vector<std::vector<double> > hyper_phi;
        std::vector<std::vector<double> > hyper_teff;
        std::vector<std::vector<double> > hyper_beta;
        std::vector<vector_d> teff_obs;
        std::vector<vector_d> teff_lb;
        std::vector<vector_d> teff_ub;
        vector_d c_hat;
        double delta;
        std::vector<std::vector<double> > vm_params;
        std::vector<matrix_d> K_fixed;
        vector_d delta_vec;
        int is_generated_done;
public:
    model_lgp(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_lgp(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_lgp_namespace::model_lgp";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 503;
            context__.validate_dims("data initialization", "is_verbose", "int", context__.to_vec());
            is_verbose = int(0);
            vals_i__ = context__.vals_i("is_verbose");
            pos__ = 0;
            is_verbose = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_verbose", is_verbose, 0);
            check_less_or_equal(function__, "is_verbose", is_verbose, 1);
            current_statement_begin__ = 504;
            context__.validate_dims("data initialization", "is_f_sampled", "int", context__.to_vec());
            is_f_sampled = int(0);
            vals_i__ = context__.vals_i("is_f_sampled");
            pos__ = 0;
            is_f_sampled = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_f_sampled", is_f_sampled, 0);
            check_less_or_equal(function__, "is_f_sampled", is_f_sampled, 1);
            current_statement_begin__ = 505;
            context__.validate_dims("data initialization", "is_heter", "int", context__.to_vec());
            is_heter = int(0);
            vals_i__ = context__.vals_i("is_heter");
            pos__ = 0;
            is_heter = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_heter", is_heter, 0);
            check_less_or_equal(function__, "is_heter", is_heter, 1);
            current_statement_begin__ = 506;
            context__.validate_dims("data initialization", "is_uncrt", "int", context__.to_vec());
            is_uncrt = int(0);
            vals_i__ = context__.vals_i("is_uncrt");
            pos__ = 0;
            is_uncrt = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_uncrt", is_uncrt, 0);
            check_less_or_equal(function__, "is_uncrt", is_uncrt, 1);
            current_statement_begin__ = 507;
            context__.validate_dims("data initialization", "is_vm_used", "int", context__.to_vec());
            is_vm_used = int(0);
            vals_i__ = context__.vals_i("is_vm_used");
            pos__ = 0;
            is_vm_used = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_vm_used", is_vm_used, 0);
            check_less_or_equal(function__, "is_vm_used", is_vm_used, 1);
            current_statement_begin__ = 508;
            context__.validate_dims("data initialization", "is_likelihood_skipped", "int", context__.to_vec());
            is_likelihood_skipped = int(0);
            vals_i__ = context__.vals_i("is_likelihood_skipped");
            pos__ = 0;
            is_likelihood_skipped = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_likelihood_skipped", is_likelihood_skipped, 0);
            check_less_or_equal(function__, "is_likelihood_skipped", is_likelihood_skipped, 1);
            current_statement_begin__ = 509;
            context__.validate_dims("data initialization", "is_generated_skipped", "int", context__.to_vec());
            is_generated_skipped = int(0);
            vals_i__ = context__.vals_i("is_generated_skipped");
            pos__ = 0;
            is_generated_skipped = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_generated_skipped", is_generated_skipped, 0);
            check_less_or_equal(function__, "is_generated_skipped", is_generated_skipped, 1);
            current_statement_begin__ = 512;
            context__.validate_dims("data initialization", "num_subjects", "int", context__.to_vec());
            num_subjects = int(0);
            vals_i__ = context__.vals_i("num_subjects");
            pos__ = 0;
            num_subjects = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_subjects", num_subjects, 0);
            current_statement_begin__ = 513;
            context__.validate_dims("data initialization", "num_cases", "int", context__.to_vec());
            num_cases = int(0);
            vals_i__ = context__.vals_i("num_cases");
            pos__ = 0;
            num_cases = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_cases", num_cases, 0);
            current_statement_begin__ = 514;
            context__.validate_dims("data initialization", "num_obs", "int", context__.to_vec());
            num_obs = int(0);
            vals_i__ = context__.vals_i("num_obs");
            pos__ = 0;
            num_obs = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_obs", num_obs, 0);
            current_statement_begin__ = 515;
            context__.validate_dims("data initialization", "num_cov_cont", "int", context__.to_vec());
            num_cov_cont = int(0);
            vals_i__ = context__.vals_i("num_cov_cont");
            pos__ = 0;
            num_cov_cont = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_cov_cont", num_cov_cont, 0);
            current_statement_begin__ = 516;
            context__.validate_dims("data initialization", "num_cov_disc", "int", context__.to_vec());
            num_cov_disc = int(0);
            vals_i__ = context__.vals_i("num_cov_disc");
            pos__ = 0;
            num_cov_disc = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_cov_disc", num_cov_disc, 0);
            current_statement_begin__ = 517;
            context__.validate_dims("data initialization", "num_comps", "int", context__.to_vec());
            num_comps = int(0);
            vals_i__ = context__.vals_i("num_comps");
            pos__ = 0;
            num_comps = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_comps", num_comps, 0);
            current_statement_begin__ = 518;
            context__.validate_dims("data initialization", "num_ell", "int", context__.to_vec());
            num_ell = int(0);
            vals_i__ = context__.vals_i("num_ell");
            pos__ = 0;
            num_ell = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_ell", num_ell, 0);
            current_statement_begin__ = 519;
            context__.validate_dims("data initialization", "num_dis", "int", context__.to_vec());
            num_dis = int(0);
            vals_i__ = context__.vals_i("num_dis");
            pos__ = 0;
            num_dis = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_dis", num_dis, 0);
            current_statement_begin__ = 528;
            context__.validate_dims("data initialization", "obs_model", "int", context__.to_vec());
            obs_model = int(0);
            vals_i__ = context__.vals_i("obs_model");
            pos__ = 0;
            obs_model = vals_i__[pos__++];
            check_greater_or_equal(function__, "obs_model", obs_model, 1);
            check_less_or_equal(function__, "obs_model", obs_model, 4);
            current_statement_begin__ = 557;
            validate_non_negative_index("components", "4", 4);
            validate_non_negative_index("components", "num_comps", num_comps);
            context__.validate_dims("data initialization", "components", "int", context__.to_vec(4,num_comps));
            components = std::vector<std::vector<int> >(4, std::vector<int>(num_comps, int(0)));
            vals_i__ = context__.vals_i("components");
            pos__ = 0;
            size_t components_k_0_max__ = 4;
            size_t components_k_1_max__ = num_comps;
            for (size_t k_1__ = 0; k_1__ < components_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < components_k_0_max__; ++k_0__) {
                    components[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t components_i_0_max__ = 4;
            size_t components_i_1_max__ = num_comps;
            for (size_t i_0__ = 0; i_0__ < components_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < components_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "components[i_0__][i_1__]", components[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 560;
            validate_non_negative_index("y_cont", "num_obs", num_obs);
            validate_non_negative_index("y_cont", "logical_eq(obs_model, 1)", logical_eq(obs_model, 1));
            context__.validate_dims("data initialization", "y_cont", "vector_d", context__.to_vec(logical_eq(obs_model, 1),num_obs));
            y_cont = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(logical_eq(obs_model, 1), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_obs));
            vals_r__ = context__.vals_r("y_cont");
            pos__ = 0;
            size_t y_cont_j_1_max__ = num_obs;
            size_t y_cont_k_0_max__ = logical_eq(obs_model, 1);
            for (size_t j_1__ = 0; j_1__ < y_cont_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < y_cont_k_0_max__; ++k_0__) {
                    y_cont[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 563;
            validate_non_negative_index("y_disc", "logical_gt(obs_model, 1)", logical_gt(obs_model, 1));
            validate_non_negative_index("y_disc", "num_obs", num_obs);
            context__.validate_dims("data initialization", "y_disc", "int", context__.to_vec(logical_gt(obs_model, 1),num_obs));
            y_disc = std::vector<std::vector<int> >(logical_gt(obs_model, 1), std::vector<int>(num_obs, int(0)));
            vals_i__ = context__.vals_i("y_disc");
            pos__ = 0;
            size_t y_disc_k_0_max__ = logical_gt(obs_model, 1);
            size_t y_disc_k_1_max__ = num_obs;
            for (size_t k_1__ = 0; k_1__ < y_disc_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < y_disc_k_0_max__; ++k_0__) {
                    y_disc[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t y_disc_i_0_max__ = logical_gt(obs_model, 1);
            size_t y_disc_i_1_max__ = num_obs;
            for (size_t i_0__ = 0; i_0__ < y_disc_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < y_disc_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "y_disc[i_0__][i_1__]", y_disc[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 566;
            validate_non_negative_index("x_cont", "num_obs", num_obs);
            validate_non_negative_index("x_cont", "num_cov_cont", num_cov_cont);
            context__.validate_dims("data initialization", "x_cont", "vector_d", context__.to_vec(num_cov_cont,num_obs));
            x_cont = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(num_cov_cont, Eigen::Matrix<double, Eigen::Dynamic, 1>(num_obs));
            vals_r__ = context__.vals_r("x_cont");
            pos__ = 0;
            size_t x_cont_j_1_max__ = num_obs;
            size_t x_cont_k_0_max__ = num_cov_cont;
            for (size_t j_1__ = 0; j_1__ < x_cont_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x_cont_k_0_max__; ++k_0__) {
                    x_cont[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 567;
            validate_non_negative_index("x_disc", "num_cov_disc", num_cov_disc);
            validate_non_negative_index("x_disc", "num_obs", num_obs);
            context__.validate_dims("data initialization", "x_disc", "int", context__.to_vec(num_cov_disc,num_obs));
            x_disc = std::vector<std::vector<int> >(num_cov_disc, std::vector<int>(num_obs, int(0)));
            vals_i__ = context__.vals_i("x_disc");
            pos__ = 0;
            size_t x_disc_k_0_max__ = num_cov_disc;
            size_t x_disc_k_1_max__ = num_obs;
            for (size_t k_1__ = 0; k_1__ < x_disc_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < x_disc_k_0_max__; ++k_0__) {
                    x_disc[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 570;
            validate_non_negative_index("y_num_trials", "logical_eq(obs_model, 4)", logical_eq(obs_model, 4));
            validate_non_negative_index("y_num_trials", "num_obs", num_obs);
            context__.validate_dims("data initialization", "y_num_trials", "int", context__.to_vec(logical_eq(obs_model, 4),num_obs));
            y_num_trials = std::vector<std::vector<int> >(logical_eq(obs_model, 4), std::vector<int>(num_obs, int(0)));
            vals_i__ = context__.vals_i("y_num_trials");
            pos__ = 0;
            size_t y_num_trials_k_0_max__ = logical_eq(obs_model, 4);
            size_t y_num_trials_k_1_max__ = num_obs;
            for (size_t k_1__ = 0; k_1__ < y_num_trials_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < y_num_trials_k_0_max__; ++k_0__) {
                    y_num_trials[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t y_num_trials_i_0_max__ = logical_eq(obs_model, 4);
            size_t y_num_trials_i_1_max__ = num_obs;
            for (size_t i_0__ = 0; i_0__ < y_num_trials_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < y_num_trials_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "y_num_trials[i_0__][i_1__]", y_num_trials[i_0__][i_1__], 1);
                }
            }
            current_statement_begin__ = 573;
            validate_non_negative_index("num_levels", "num_cov_disc", num_cov_disc);
            context__.validate_dims("data initialization", "num_levels", "int", context__.to_vec(num_cov_disc));
            num_levels = std::vector<int>(num_cov_disc, int(0));
            vals_i__ = context__.vals_i("num_levels");
            pos__ = 0;
            size_t num_levels_k_0_max__ = num_cov_disc;
            for (size_t k_0__ = 0; k_0__ < num_levels_k_0_max__; ++k_0__) {
                num_levels[k_0__] = vals_i__[pos__++];
            }
            size_t num_levels_i_0_max__ = num_cov_disc;
            for (size_t i_0__ = 0; i_0__ < num_levels_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "num_levels[i_0__]", num_levels[i_0__], 0);
            }
            current_statement_begin__ = 576;
            validate_non_negative_index("idx_expand", "(primitive_value(is_heter) || primitive_value(is_uncrt))", (primitive_value(is_heter) || primitive_value(is_uncrt)));
            validate_non_negative_index("idx_expand", "num_obs", num_obs);
            context__.validate_dims("data initialization", "idx_expand", "int", context__.to_vec((primitive_value(is_heter) || primitive_value(is_uncrt)),num_obs));
            idx_expand = std::vector<std::vector<int> >((primitive_value(is_heter) || primitive_value(is_uncrt)), std::vector<int>(num_obs, int(0)));
            vals_i__ = context__.vals_i("idx_expand");
            pos__ = 0;
            size_t idx_expand_k_0_max__ = (primitive_value(is_heter) || primitive_value(is_uncrt));
            size_t idx_expand_k_1_max__ = num_obs;
            for (size_t k_1__ = 0; k_1__ < idx_expand_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < idx_expand_k_0_max__; ++k_0__) {
                    idx_expand[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t idx_expand_i_0_max__ = (primitive_value(is_heter) || primitive_value(is_uncrt));
            size_t idx_expand_i_1_max__ = num_obs;
            for (size_t i_0__ = 0; i_0__ < idx_expand_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < idx_expand_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "idx_expand[i_0__][i_1__]", idx_expand[i_0__][i_1__], 1);
                    check_less_or_equal(function__, "idx_expand[i_0__][i_1__]", idx_expand[i_0__][i_1__], (num_cases + 1));
                }
            }
            current_statement_begin__ = 583;
            validate_non_negative_index("prior_alpha", "num_comps", num_comps);
            validate_non_negative_index("prior_alpha", "2", 2);
            context__.validate_dims("data initialization", "prior_alpha", "int", context__.to_vec(num_comps,2));
            prior_alpha = std::vector<std::vector<int> >(num_comps, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("prior_alpha");
            pos__ = 0;
            size_t prior_alpha_k_0_max__ = num_comps;
            size_t prior_alpha_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < prior_alpha_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_alpha_k_0_max__; ++k_0__) {
                    prior_alpha[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t prior_alpha_i_0_max__ = num_comps;
            size_t prior_alpha_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_alpha_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_alpha_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_alpha[i_0__][i_1__]", prior_alpha[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 584;
            validate_non_negative_index("prior_ell", "num_ell", num_ell);
            validate_non_negative_index("prior_ell", "2", 2);
            context__.validate_dims("data initialization", "prior_ell", "int", context__.to_vec(num_ell,2));
            prior_ell = std::vector<std::vector<int> >(num_ell, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("prior_ell");
            pos__ = 0;
            size_t prior_ell_k_0_max__ = num_ell;
            size_t prior_ell_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < prior_ell_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_ell_k_0_max__; ++k_0__) {
                    prior_ell[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t prior_ell_i_0_max__ = num_ell;
            size_t prior_ell_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_ell_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_ell_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_ell[i_0__][i_1__]", prior_ell[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 585;
            validate_non_negative_index("prior_wrp", "num_dis", num_dis);
            validate_non_negative_index("prior_wrp", "2", 2);
            context__.validate_dims("data initialization", "prior_wrp", "int", context__.to_vec(num_dis,2));
            prior_wrp = std::vector<std::vector<int> >(num_dis, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("prior_wrp");
            pos__ = 0;
            size_t prior_wrp_k_0_max__ = num_dis;
            size_t prior_wrp_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < prior_wrp_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_wrp_k_0_max__; ++k_0__) {
                    prior_wrp[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t prior_wrp_i_0_max__ = num_dis;
            size_t prior_wrp_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_wrp_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_wrp_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_wrp[i_0__][i_1__]", prior_wrp[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 586;
            validate_non_negative_index("prior_sigma", "logical_eq(obs_model, 1)", logical_eq(obs_model, 1));
            validate_non_negative_index("prior_sigma", "2", 2);
            context__.validate_dims("data initialization", "prior_sigma", "int", context__.to_vec(logical_eq(obs_model, 1),2));
            prior_sigma = std::vector<std::vector<int> >(logical_eq(obs_model, 1), std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("prior_sigma");
            pos__ = 0;
            size_t prior_sigma_k_0_max__ = logical_eq(obs_model, 1);
            size_t prior_sigma_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < prior_sigma_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_sigma_k_0_max__; ++k_0__) {
                    prior_sigma[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t prior_sigma_i_0_max__ = logical_eq(obs_model, 1);
            size_t prior_sigma_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_sigma_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_sigma_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_sigma[i_0__][i_1__]", prior_sigma[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 587;
            validate_non_negative_index("prior_phi", "logical_eq(obs_model, 3)", logical_eq(obs_model, 3));
            validate_non_negative_index("prior_phi", "2", 2);
            context__.validate_dims("data initialization", "prior_phi", "int", context__.to_vec(logical_eq(obs_model, 3),2));
            prior_phi = std::vector<std::vector<int> >(logical_eq(obs_model, 3), std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("prior_phi");
            pos__ = 0;
            size_t prior_phi_k_0_max__ = logical_eq(obs_model, 3);
            size_t prior_phi_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < prior_phi_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_phi_k_0_max__; ++k_0__) {
                    prior_phi[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t prior_phi_i_0_max__ = logical_eq(obs_model, 3);
            size_t prior_phi_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_phi_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_phi_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_phi[i_0__][i_1__]", prior_phi[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 595;
            validate_non_negative_index("prior_teff", "is_uncrt", is_uncrt);
            validate_non_negative_index("prior_teff", "3", 3);
            context__.validate_dims("data initialization", "prior_teff", "int", context__.to_vec(is_uncrt,3));
            prior_teff = std::vector<std::vector<int> >(is_uncrt, std::vector<int>(3, int(0)));
            vals_i__ = context__.vals_i("prior_teff");
            pos__ = 0;
            size_t prior_teff_k_0_max__ = is_uncrt;
            size_t prior_teff_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < prior_teff_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_teff_k_0_max__; ++k_0__) {
                    prior_teff[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t prior_teff_i_0_max__ = is_uncrt;
            size_t prior_teff_i_1_max__ = 3;
            for (size_t i_0__ = 0; i_0__ < prior_teff_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_teff_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_teff[i_0__][i_1__]", prior_teff[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 598;
            validate_non_negative_index("hyper_alpha", "num_comps", num_comps);
            validate_non_negative_index("hyper_alpha", "3", 3);
            context__.validate_dims("data initialization", "hyper_alpha", "double", context__.to_vec(num_comps,3));
            hyper_alpha = std::vector<std::vector<double> >(num_comps, std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("hyper_alpha");
            pos__ = 0;
            size_t hyper_alpha_k_0_max__ = num_comps;
            size_t hyper_alpha_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < hyper_alpha_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_alpha_k_0_max__; ++k_0__) {
                    hyper_alpha[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 599;
            validate_non_negative_index("hyper_ell", "num_ell", num_ell);
            validate_non_negative_index("hyper_ell", "3", 3);
            context__.validate_dims("data initialization", "hyper_ell", "double", context__.to_vec(num_ell,3));
            hyper_ell = std::vector<std::vector<double> >(num_ell, std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("hyper_ell");
            pos__ = 0;
            size_t hyper_ell_k_0_max__ = num_ell;
            size_t hyper_ell_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < hyper_ell_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_ell_k_0_max__; ++k_0__) {
                    hyper_ell[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 600;
            validate_non_negative_index("hyper_wrp", "num_dis", num_dis);
            validate_non_negative_index("hyper_wrp", "3", 3);
            context__.validate_dims("data initialization", "hyper_wrp", "double", context__.to_vec(num_dis,3));
            hyper_wrp = std::vector<std::vector<double> >(num_dis, std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("hyper_wrp");
            pos__ = 0;
            size_t hyper_wrp_k_0_max__ = num_dis;
            size_t hyper_wrp_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < hyper_wrp_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_wrp_k_0_max__; ++k_0__) {
                    hyper_wrp[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 601;
            validate_non_negative_index("hyper_sigma", "logical_eq(obs_model, 1)", logical_eq(obs_model, 1));
            validate_non_negative_index("hyper_sigma", "3", 3);
            context__.validate_dims("data initialization", "hyper_sigma", "double", context__.to_vec(logical_eq(obs_model, 1),3));
            hyper_sigma = std::vector<std::vector<double> >(logical_eq(obs_model, 1), std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("hyper_sigma");
            pos__ = 0;
            size_t hyper_sigma_k_0_max__ = logical_eq(obs_model, 1);
            size_t hyper_sigma_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < hyper_sigma_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_sigma_k_0_max__; ++k_0__) {
                    hyper_sigma[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 602;
            validate_non_negative_index("hyper_phi", "logical_eq(obs_model, 3)", logical_eq(obs_model, 3));
            validate_non_negative_index("hyper_phi", "3", 3);
            context__.validate_dims("data initialization", "hyper_phi", "double", context__.to_vec(logical_eq(obs_model, 3),3));
            hyper_phi = std::vector<std::vector<double> >(logical_eq(obs_model, 3), std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("hyper_phi");
            pos__ = 0;
            size_t hyper_phi_k_0_max__ = logical_eq(obs_model, 3);
            size_t hyper_phi_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < hyper_phi_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_phi_k_0_max__; ++k_0__) {
                    hyper_phi[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 603;
            validate_non_negative_index("hyper_teff", "is_uncrt", is_uncrt);
            validate_non_negative_index("hyper_teff", "3", 3);
            context__.validate_dims("data initialization", "hyper_teff", "double", context__.to_vec(is_uncrt,3));
            hyper_teff = std::vector<std::vector<double> >(is_uncrt, std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("hyper_teff");
            pos__ = 0;
            size_t hyper_teff_k_0_max__ = is_uncrt;
            size_t hyper_teff_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < hyper_teff_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_teff_k_0_max__; ++k_0__) {
                    hyper_teff[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 604;
            validate_non_negative_index("hyper_beta", "is_heter", is_heter);
            validate_non_negative_index("hyper_beta", "2", 2);
            context__.validate_dims("data initialization", "hyper_beta", "double", context__.to_vec(is_heter,2));
            hyper_beta = std::vector<std::vector<double> >(is_heter, std::vector<double>(2, double(0)));
            vals_r__ = context__.vals_r("hyper_beta");
            pos__ = 0;
            size_t hyper_beta_k_0_max__ = is_heter;
            size_t hyper_beta_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < hyper_beta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_beta_k_0_max__; ++k_0__) {
                    hyper_beta[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 607;
            validate_non_negative_index("teff_obs", "num_cases", num_cases);
            validate_non_negative_index("teff_obs", "is_uncrt", is_uncrt);
            context__.validate_dims("data initialization", "teff_obs", "vector_d", context__.to_vec(is_uncrt,num_cases));
            teff_obs = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(is_uncrt, Eigen::Matrix<double, Eigen::Dynamic, 1>(num_cases));
            vals_r__ = context__.vals_r("teff_obs");
            pos__ = 0;
            size_t teff_obs_j_1_max__ = num_cases;
            size_t teff_obs_k_0_max__ = is_uncrt;
            for (size_t j_1__ = 0; j_1__ < teff_obs_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < teff_obs_k_0_max__; ++k_0__) {
                    teff_obs[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 608;
            validate_non_negative_index("teff_lb", "num_cases", num_cases);
            validate_non_negative_index("teff_lb", "is_uncrt", is_uncrt);
            context__.validate_dims("data initialization", "teff_lb", "vector_d", context__.to_vec(is_uncrt,num_cases));
            teff_lb = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(is_uncrt, Eigen::Matrix<double, Eigen::Dynamic, 1>(num_cases));
            vals_r__ = context__.vals_r("teff_lb");
            pos__ = 0;
            size_t teff_lb_j_1_max__ = num_cases;
            size_t teff_lb_k_0_max__ = is_uncrt;
            for (size_t j_1__ = 0; j_1__ < teff_lb_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < teff_lb_k_0_max__; ++k_0__) {
                    teff_lb[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 609;
            validate_non_negative_index("teff_ub", "num_cases", num_cases);
            validate_non_negative_index("teff_ub", "is_uncrt", is_uncrt);
            context__.validate_dims("data initialization", "teff_ub", "vector_d", context__.to_vec(is_uncrt,num_cases));
            teff_ub = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(is_uncrt, Eigen::Matrix<double, Eigen::Dynamic, 1>(num_cases));
            vals_r__ = context__.vals_r("teff_ub");
            pos__ = 0;
            size_t teff_ub_j_1_max__ = num_cases;
            size_t teff_ub_k_0_max__ = is_uncrt;
            for (size_t j_1__ = 0; j_1__ < teff_ub_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < teff_ub_k_0_max__; ++k_0__) {
                    teff_ub[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 612;
            validate_non_negative_index("c_hat", "num_obs", num_obs);
            context__.validate_dims("data initialization", "c_hat", "vector_d", context__.to_vec(num_obs));
            c_hat = Eigen::Matrix<double, Eigen::Dynamic, 1>(num_obs);
            vals_r__ = context__.vals_r("c_hat");
            pos__ = 0;
            size_t c_hat_j_1_max__ = num_obs;
            for (size_t j_1__ = 0; j_1__ < c_hat_j_1_max__; ++j_1__) {
                c_hat(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 613;
            context__.validate_dims("data initialization", "delta", "double", context__.to_vec());
            delta = double(0);
            vals_r__ = context__.vals_r("delta");
            pos__ = 0;
            delta = vals_r__[pos__++];
            current_statement_begin__ = 614;
            validate_non_negative_index("vm_params", "is_vm_used", is_vm_used);
            validate_non_negative_index("vm_params", "2", 2);
            context__.validate_dims("data initialization", "vm_params", "double", context__.to_vec(is_vm_used,2));
            vm_params = std::vector<std::vector<double> >(is_vm_used, std::vector<double>(2, double(0)));
            vals_r__ = context__.vals_r("vm_params");
            pos__ = 0;
            size_t vm_params_k_0_max__ = is_vm_used;
            size_t vm_params_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < vm_params_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < vm_params_k_0_max__; ++k_0__) {
                    vm_params[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            current_statement_begin__ = 619;
            validate_non_negative_index("K_fixed", "num_obs", num_obs);
            validate_non_negative_index("K_fixed", "num_obs", num_obs);
            validate_non_negative_index("K_fixed", "num_comps", num_comps);
            K_fixed = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(num_comps, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(num_obs, num_obs));
            stan::math::fill(K_fixed, DUMMY_VAR__);
            stan::math::assign(K_fixed,STAN_kernel_fixed_all(x_disc, x_disc, num_levels, components, pstream__));
            current_statement_begin__ = 623;
            validate_non_negative_index("delta_vec", "num_obs", num_obs);
            delta_vec = Eigen::Matrix<double, Eigen::Dynamic, 1>(num_obs);
            stan::math::fill(delta_vec, DUMMY_VAR__);
            stan::math::assign(delta_vec,rep_vector(delta, num_obs));
            current_statement_begin__ = 626;
            is_generated_done = int(0);
            stan::math::fill(is_generated_done, std::numeric_limits<int>::min());
            stan::math::assign(is_generated_done,((1 - is_f_sampled) * (1 - is_generated_skipped)));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 632;
            validate_non_negative_index("alpha", "num_comps", num_comps);
            num_params_r__ += (1 * num_comps);
            current_statement_begin__ = 633;
            validate_non_negative_index("ell", "num_ell", num_ell);
            num_params_r__ += (1 * num_ell);
            current_statement_begin__ = 634;
            validate_non_negative_index("wrp", "num_dis", num_dis);
            num_params_r__ += (1 * num_dis);
            current_statement_begin__ = 635;
            validate_non_negative_index("sigma", "logical_eq(obs_model, 1)", logical_eq(obs_model, 1));
            num_params_r__ += (1 * logical_eq(obs_model, 1));
            current_statement_begin__ = 636;
            validate_non_negative_index("phi", "logical_eq(obs_model, 3)", logical_eq(obs_model, 3));
            num_params_r__ += (1 * logical_eq(obs_model, 3));
            current_statement_begin__ = 639;
            validate_non_negative_index("teff_raw", "num_cases", num_cases);
            validate_non_negative_index("teff_raw", "is_uncrt", is_uncrt);
            num_params_r__ += (num_cases * is_uncrt);
            current_statement_begin__ = 642;
            validate_non_negative_index("beta", "num_cases", num_cases);
            validate_non_negative_index("beta", "is_heter", is_heter);
            num_params_r__ += (num_cases * is_heter);
            current_statement_begin__ = 645;
            validate_non_negative_index("eta", "num_obs", num_obs);
            validate_non_negative_index("eta", "is_f_sampled", is_f_sampled);
            validate_non_negative_index("eta", "num_comps", num_comps);
            num_params_r__ += ((num_obs * is_f_sampled) * num_comps);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_lgp() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 632;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "num_comps", num_comps);
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec(num_comps));
        std::vector<double> alpha(num_comps, double(0));
        size_t alpha_k_0_max__ = num_comps;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            alpha[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_i_0_max__ = num_comps;
        for (size_t i_0__ = 0; i_0__ < alpha_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, alpha[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 633;
        if (!(context__.contains_r("ell")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ell missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ell");
        pos__ = 0U;
        validate_non_negative_index("ell", "num_ell", num_ell);
        context__.validate_dims("parameter initialization", "ell", "double", context__.to_vec(num_ell));
        std::vector<double> ell(num_ell, double(0));
        size_t ell_k_0_max__ = num_ell;
        for (size_t k_0__ = 0; k_0__ < ell_k_0_max__; ++k_0__) {
            ell[k_0__] = vals_r__[pos__++];
        }
        size_t ell_i_0_max__ = num_ell;
        for (size_t i_0__ = 0; i_0__ < ell_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, ell[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ell: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 634;
        if (!(context__.contains_r("wrp")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable wrp missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("wrp");
        pos__ = 0U;
        validate_non_negative_index("wrp", "num_dis", num_dis);
        context__.validate_dims("parameter initialization", "wrp", "double", context__.to_vec(num_dis));
        std::vector<double> wrp(num_dis, double(0));
        size_t wrp_k_0_max__ = num_dis;
        for (size_t k_0__ = 0; k_0__ < wrp_k_0_max__; ++k_0__) {
            wrp[k_0__] = vals_r__[pos__++];
        }
        size_t wrp_i_0_max__ = num_dis;
        for (size_t i_0__ = 0; i_0__ < wrp_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, wrp[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable wrp: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 635;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "logical_eq(obs_model, 1)", logical_eq(obs_model, 1));
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec(logical_eq(obs_model, 1)));
        std::vector<double> sigma(logical_eq(obs_model, 1), double(0));
        size_t sigma_k_0_max__ = logical_eq(obs_model, 1);
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            sigma[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_i_0_max__ = logical_eq(obs_model, 1);
        for (size_t i_0__ = 0; i_0__ < sigma_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 636;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "logical_eq(obs_model, 3)", logical_eq(obs_model, 3));
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec(logical_eq(obs_model, 3)));
        std::vector<double> phi(logical_eq(obs_model, 3), double(0));
        size_t phi_k_0_max__ = logical_eq(obs_model, 3);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            phi[k_0__] = vals_r__[pos__++];
        }
        size_t phi_i_0_max__ = logical_eq(obs_model, 3);
        for (size_t i_0__ = 0; i_0__ < phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 639;
        if (!(context__.contains_r("teff_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable teff_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("teff_raw");
        pos__ = 0U;
        validate_non_negative_index("teff_raw", "num_cases", num_cases);
        validate_non_negative_index("teff_raw", "is_uncrt", is_uncrt);
        context__.validate_dims("parameter initialization", "teff_raw", "vector_d", context__.to_vec(is_uncrt,num_cases));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > teff_raw(is_uncrt, Eigen::Matrix<double, Eigen::Dynamic, 1>(num_cases));
        size_t teff_raw_j_1_max__ = num_cases;
        size_t teff_raw_k_0_max__ = is_uncrt;
        for (size_t j_1__ = 0; j_1__ < teff_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < teff_raw_k_0_max__; ++k_0__) {
                teff_raw[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t teff_raw_i_0_max__ = is_uncrt;
        for (size_t i_0__ = 0; i_0__ < teff_raw_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lb_unconstrain(0, teff_raw[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable teff_raw: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 642;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "num_cases", num_cases);
        validate_non_negative_index("beta", "is_heter", is_heter);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(is_heter,num_cases));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta(is_heter, Eigen::Matrix<double, Eigen::Dynamic, 1>(num_cases));
        size_t beta_j_1_max__ = num_cases;
        size_t beta_k_0_max__ = is_heter;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                beta[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t beta_i_0_max__ = is_heter;
        for (size_t i_0__ = 0; i_0__ < beta_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lb_unconstrain(0, beta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 645;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "num_obs", num_obs);
        validate_non_negative_index("eta", "is_f_sampled", is_f_sampled);
        validate_non_negative_index("eta", "num_comps", num_comps);
        context__.validate_dims("parameter initialization", "eta", "vector_d", context__.to_vec(is_f_sampled,num_comps,num_obs));
        std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > eta(is_f_sampled, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(num_comps, Eigen::Matrix<double, Eigen::Dynamic, 1>(num_obs)));
        size_t eta_j_1_max__ = num_obs;
        size_t eta_k_0_max__ = is_f_sampled;
        size_t eta_k_1_max__ = num_comps;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < eta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                    eta[k_0__][k_1__](j_1__) = vals_r__[pos__++];
                }
            }
        }
        size_t eta_i_0_max__ = is_f_sampled;
        size_t eta_i_1_max__ = num_comps;
        for (size_t i_0__ = 0; i_0__ < eta_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < eta_i_1_max__; ++i_1__) {
                try {
                    writer__.vector_unconstrain(eta[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 632;
            std::vector<local_scalar_t__> alpha;
            size_t alpha_d_0_max__ = num_comps;
            alpha.reserve(alpha_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    alpha.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 633;
            std::vector<local_scalar_t__> ell;
            size_t ell_d_0_max__ = num_ell;
            ell.reserve(ell_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ell_d_0_max__; ++d_0__) {
                if (jacobian__)
                    ell.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    ell.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 634;
            std::vector<local_scalar_t__> wrp;
            size_t wrp_d_0_max__ = num_dis;
            wrp.reserve(wrp_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < wrp_d_0_max__; ++d_0__) {
                if (jacobian__)
                    wrp.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    wrp.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 635;
            std::vector<local_scalar_t__> sigma;
            size_t sigma_d_0_max__ = logical_eq(obs_model, 1);
            sigma.reserve(sigma_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 636;
            std::vector<local_scalar_t__> phi;
            size_t phi_d_0_max__ = logical_eq(obs_model, 3);
            phi.reserve(phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    phi.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    phi.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 639;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > teff_raw;
            size_t teff_raw_d_0_max__ = is_uncrt;
            teff_raw.reserve(teff_raw_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < teff_raw_d_0_max__; ++d_0__) {
                if (jacobian__)
                    teff_raw.push_back(in__.vector_lb_constrain(0, num_cases, lp__));
                else
                    teff_raw.push_back(in__.vector_lb_constrain(0, num_cases));
            }
            current_statement_begin__ = 642;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > beta;
            size_t beta_d_0_max__ = is_heter;
            beta.reserve(beta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta.push_back(in__.vector_lb_constrain(0, num_cases, lp__));
                else
                    beta.push_back(in__.vector_lb_constrain(0, num_cases));
            }
            current_statement_begin__ = 645;
            std::vector<std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > > eta;
            size_t eta_d_0_max__ = is_f_sampled;
            size_t eta_d_1_max__ = num_comps;
            eta.resize(eta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < eta_d_0_max__; ++d_0__) {
                eta[d_0__].reserve(eta_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < eta_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        eta[d_0__].push_back(in__.vector_constrain(num_obs, lp__));
                    else
                        eta[d_0__].push_back(in__.vector_constrain(num_obs));
                }
            }
            // transformed parameters
            current_statement_begin__ = 650;
            validate_non_negative_index("teff", "num_cases", num_cases);
            validate_non_negative_index("teff", "is_uncrt", is_uncrt);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > teff(is_uncrt, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(num_cases));
            stan::math::initialize(teff, DUMMY_VAR__);
            stan::math::fill(teff, DUMMY_VAR__);
            current_statement_begin__ = 651;
            validate_non_negative_index("f_latent", "num_obs", num_obs);
            validate_non_negative_index("f_latent", "is_f_sampled", is_f_sampled);
            validate_non_negative_index("f_latent", "num_comps", num_comps);
            std::vector<std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > > f_latent(is_f_sampled, std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> >(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(num_obs)));
            stan::math::initialize(f_latent, DUMMY_VAR__);
            stan::math::fill(f_latent, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 654;
            if (as_bool(is_uncrt)) {
                current_statement_begin__ = 655;
                stan::model::assign(teff, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            add(get_base1(teff_lb, 1, "teff_lb", 1), elt_multiply(subtract(get_base1(teff_ub, 1, "teff_ub", 1), get_base1(teff_lb, 1, "teff_lb", 1)), get_base1(teff_raw, 1, "teff_raw", 1))), 
                            "assigning variable teff");
            }
            current_statement_begin__ = 659;
            if (as_bool(is_f_sampled)) {
                {
                current_statement_begin__ = 661;
                validate_non_negative_index("Delta", "num_obs", num_obs);
                validate_non_negative_index("Delta", "num_obs", num_obs);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Delta(num_obs, num_obs);
                stan::math::initialize(Delta, DUMMY_VAR__);
                stan::math::fill(Delta, DUMMY_VAR__);
                stan::math::assign(Delta,diag_matrix(delta_vec));
                current_statement_begin__ = 662;
                validate_non_negative_index("KX", "num_obs", num_obs);
                validate_non_negative_index("KX", "num_obs", num_obs);
                validate_non_negative_index("KX", "num_comps", num_comps);
                std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(num_obs, num_obs));
                stan::math::initialize(KX, DUMMY_VAR__);
                stan::math::fill(KX, DUMMY_VAR__);
                stan::math::assign(KX,STAN_kernel_all(K_fixed, components, x_cont, x_cont, alpha, ell, wrp, beta, teff, vm_params, idx_expand, idx_expand, teff_obs, pstream__));
                current_statement_begin__ = 666;
                for (int j = 1; j <= num_comps; ++j) {
                    current_statement_begin__ = 667;
                    stan::model::assign(f_latent, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                multiply(cholesky_decompose(add(get_base1(KX, j, "KX", 1), Delta)), get_base1(get_base1(eta, 1, "eta", 1), j, "eta", 2)), 
                                "assigning variable f_latent");
                }
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 650;
            size_t teff_k_0_max__ = is_uncrt;
            size_t teff_j_1_max__ = num_cases;
            for (size_t k_0__ = 0; k_0__ < teff_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < teff_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(teff[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: teff" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable teff: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 651;
            size_t f_latent_k_0_max__ = is_f_sampled;
            size_t f_latent_k_1_max__ = num_comps;
            size_t f_latent_j_1_max__ = num_obs;
            for (size_t k_0__ = 0; k_0__ < f_latent_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < f_latent_k_1_max__; ++k_1__) {
                    for (size_t j_1__ = 0; j_1__ < f_latent_j_1_max__; ++j_1__) {
                        if (stan::math::is_uninitialized(f_latent[k_0__][k_1__](j_1__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: f_latent" << "[" << k_0__ << "]" << "[" << k_1__ << "]" << "(" << j_1__ << ")";
                            stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable f_latent: ") + msg__.str()), current_statement_begin__, prog_reader__());
                        }
                    }
                }
            }
            // model body
            current_statement_begin__ = 675;
            for (int j = 1; j <= num_comps; ++j) {
                current_statement_begin__ = 676;
                lp_accum__.add(STAN_log_prior(get_base1(alpha, j, "alpha", 1), get_base1(prior_alpha, j, "prior_alpha", 1), get_base1(hyper_alpha, j, "hyper_alpha", 1), pstream__));
            }
            current_statement_begin__ = 680;
            for (int j = 1; j <= num_ell; ++j) {
                current_statement_begin__ = 681;
                lp_accum__.add(STAN_log_prior(get_base1(ell, j, "ell", 1), get_base1(prior_ell, j, "prior_ell", 1), get_base1(hyper_ell, j, "hyper_ell", 1), pstream__));
            }
            current_statement_begin__ = 685;
            for (int j = 1; j <= num_dis; ++j) {
                current_statement_begin__ = 686;
                lp_accum__.add(STAN_log_prior(get_base1(wrp, j, "wrp", 1), get_base1(prior_wrp, j, "prior_wrp", 1), get_base1(hyper_wrp, j, "hyper_wrp", 1), pstream__));
            }
            current_statement_begin__ = 690;
            if (as_bool(logical_eq(obs_model, 1))) {
                current_statement_begin__ = 691;
                lp_accum__.add(STAN_log_prior(get_base1(sigma, 1, "sigma", 1), get_base1(prior_sigma, 1, "prior_sigma", 1), get_base1(hyper_sigma, 1, "hyper_sigma", 1), pstream__));
            } else if (as_bool(logical_eq(obs_model, 3))) {
                current_statement_begin__ = 693;
                lp_accum__.add(STAN_log_prior(get_base1(phi, 1, "phi", 1), get_base1(prior_phi, 1, "prior_phi", 1), get_base1(hyper_phi, 1, "hyper_phi", 1), pstream__));
            }
            current_statement_begin__ = 697;
            if (as_bool(is_heter)) {
                {
                current_statement_begin__ = 698;
                validate_non_negative_index("a", "2", 2);
                std::vector<local_scalar_t__  > a(2, local_scalar_t__(DUMMY_VAR__));
                stan::math::initialize(a, DUMMY_VAR__);
                stan::math::fill(a, DUMMY_VAR__);
                stan::math::assign(a,get_base1(hyper_beta, 1, "hyper_beta", 1));
                current_statement_begin__ = 699;
                lp_accum__.add(beta_log(get_base1(beta, 1, "beta", 1), get_base1(a, 1, "a", 1), get_base1(a, 2, "a", 1)));
                }
            }
            current_statement_begin__ = 703;
            if (as_bool(is_uncrt)) {
                {
                current_statement_begin__ = 705;
                validate_non_negative_index("tx", "num_cases", num_cases);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tx(num_cases);
                stan::math::initialize(tx, DUMMY_VAR__);
                stan::math::fill(tx, DUMMY_VAR__);
                current_statement_begin__ = 706;
                int ptype(0);
                (void) ptype;  // dummy to suppress unused var warning
                stan::math::fill(ptype, std::numeric_limits<int>::min());
                stan::math::assign(ptype,get_base1(get_base1(prior_teff, 1, "prior_teff", 1), 1, "prior_teff", 2));
                current_statement_begin__ = 707;
                int is_backwards(0);
                (void) is_backwards;  // dummy to suppress unused var warning
                stan::math::fill(is_backwards, std::numeric_limits<int>::min());
                stan::math::assign(is_backwards,get_base1(get_base1(prior_teff, 1, "prior_teff", 1), 2, "prior_teff", 2));
                current_statement_begin__ = 708;
                int is_relative(0);
                (void) is_relative;  // dummy to suppress unused var warning
                stan::math::fill(is_relative, std::numeric_limits<int>::min());
                stan::math::assign(is_relative,get_base1(get_base1(prior_teff, 1, "prior_teff", 1), 3, "prior_teff", 2));
                current_statement_begin__ = 710;
                if (as_bool(is_relative)) {
                    current_statement_begin__ = 711;
                    stan::math::assign(tx, subtract(get_base1(teff, 1, "teff", 1), get_base1(teff_obs, 1, "teff_obs", 1)));
                } else if (as_bool(is_backwards)) {
                    current_statement_begin__ = 713;
                    stan::math::assign(tx, subtract(get_base1(teff_obs, 1, "teff_obs", 1), get_base1(teff, 1, "teff", 1)));
                } else {
                    current_statement_begin__ = 715;
                    stan::math::assign(tx, get_base1(teff, 1, "teff", 1));
                }
                current_statement_begin__ = 718;
                for (int k = 1; k <= num_cases; ++k) {
                    current_statement_begin__ = 719;
                    lp_accum__.add(STAN_log_prior(get_base1(tx, k, "tx", 1), static_cast<std::vector<int> >(stan::math::array_builder<int >().add(ptype).add(0).array()), get_base1(hyper_teff, 1, "hyper_teff", 1), pstream__));
                }
                }
            }
            current_statement_begin__ = 725;
            if (as_bool(is_f_sampled)) {
                current_statement_begin__ = 726;
                for (int j = 1; j <= num_comps; ++j) {
                    current_statement_begin__ = 727;
                    lp_accum__.add(normal_log(get_base1(get_base1(eta, 1, "eta", 1), j, "eta", 2), 0, 1));
                }
            }
            current_statement_begin__ = 730;
            if (as_bool(is_likelihood_skipped)) {
            } else {
                current_statement_begin__ = 732;
                if (as_bool(is_f_sampled)) {
                    {
                    current_statement_begin__ = 735;
                    validate_non_negative_index("f_sum", "num_obs", num_obs);
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> f_sum(num_obs);
                    stan::math::initialize(f_sum, DUMMY_VAR__);
                    stan::math::fill(f_sum, DUMMY_VAR__);
                    stan::math::assign(f_sum,c_hat);
                    current_statement_begin__ = 736;
                    for (int j = 1; j <= num_comps; ++j) {
                        current_statement_begin__ = 737;
                        stan::math::assign(f_sum, add(f_sum, get_base1(get_base1(f_latent, 1, "f_latent", 1), j, "f_latent", 2)));
                    }
                    current_statement_begin__ = 741;
                    if (as_bool(logical_eq(obs_model, 1))) {
                        {
                        current_statement_begin__ = 743;
                        validate_non_negative_index("MU", "num_obs", num_obs);
                        std::vector<local_scalar_t__  > MU(num_obs, local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(MU, DUMMY_VAR__);
                        stan::math::fill(MU, DUMMY_VAR__);
                        stan::math::assign(MU,to_array_1d(f_sum));
                        current_statement_begin__ = 744;
                        validate_non_negative_index("SIGMA", "num_obs", num_obs);
                        std::vector<local_scalar_t__  > SIGMA(num_obs, local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(SIGMA, DUMMY_VAR__);
                        stan::math::fill(SIGMA, DUMMY_VAR__);
                        stan::math::assign(SIGMA,to_array_1d(rep_vector(get_base1(sigma, 1, "sigma", 1), num_obs)));
                        current_statement_begin__ = 745;
                        lp_accum__.add(normal_log(get_base1(y_cont, 1, "y_cont", 1), MU, SIGMA));
                        }
                    } else if (as_bool(logical_eq(obs_model, 2))) {
                        {
                        current_statement_begin__ = 748;
                        validate_non_negative_index("LOG_MU", "num_obs", num_obs);
                        std::vector<local_scalar_t__  > LOG_MU(num_obs, local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(LOG_MU, DUMMY_VAR__);
                        stan::math::fill(LOG_MU, DUMMY_VAR__);
                        stan::math::assign(LOG_MU,to_array_1d(f_sum));
                        current_statement_begin__ = 749;
                        lp_accum__.add(poisson_log_log(get_base1(y_disc, 1, "y_disc", 1), LOG_MU));
                        }
                    } else if (as_bool(logical_eq(obs_model, 3))) {
                        {
                        current_statement_begin__ = 752;
                        validate_non_negative_index("LOG_MU", "num_obs", num_obs);
                        std::vector<local_scalar_t__  > LOG_MU(num_obs, local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(LOG_MU, DUMMY_VAR__);
                        stan::math::fill(LOG_MU, DUMMY_VAR__);
                        stan::math::assign(LOG_MU,to_array_1d(f_sum));
                        current_statement_begin__ = 753;
                        validate_non_negative_index("PHI", "num_obs", num_obs);
                        std::vector<local_scalar_t__  > PHI(num_obs, local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(PHI, DUMMY_VAR__);
                        stan::math::fill(PHI, DUMMY_VAR__);
                        stan::math::assign(PHI,to_array_1d(rep_vector(get_base1(phi, 1, "phi", 1), num_obs)));
                        current_statement_begin__ = 754;
                        lp_accum__.add(neg_binomial_2_log_log(get_base1(y_disc, 1, "y_disc", 1), LOG_MU, PHI));
                        }
                    } else if (as_bool(logical_eq(obs_model, 4))) {
                        {
                        current_statement_begin__ = 757;
                        validate_non_negative_index("LOGIT_P", "num_obs", num_obs);
                        std::vector<local_scalar_t__  > LOGIT_P(num_obs, local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(LOGIT_P, DUMMY_VAR__);
                        stan::math::fill(LOGIT_P, DUMMY_VAR__);
                        stan::math::assign(LOGIT_P,to_array_1d(f_sum));
                        current_statement_begin__ = 758;
                        lp_accum__.add(binomial_logit_log(get_base1(y_disc, 1, "y_disc", 1), get_base1(y_num_trials, 1, "y_num_trials", 1), LOGIT_P));
                        }
                    } else {
                        current_statement_begin__ = 760;
                        std::stringstream errmsg_stream__;
                        errmsg_stream__ << "<obs_model> must be 1, 2, 3 or 4!";
                        throw std::domain_error(errmsg_stream__.str());
                    }
                    }
                } else {
                    {
                    current_statement_begin__ = 765;
                    validate_non_negative_index("sigma2_vec", "num_obs", num_obs);
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma2_vec(num_obs);
                    stan::math::initialize(sigma2_vec, DUMMY_VAR__);
                    stan::math::fill(sigma2_vec, DUMMY_VAR__);
                    stan::math::assign(sigma2_vec,rep_vector(square(get_base1(sigma, 1, "sigma", 1)), num_obs));
                    current_statement_begin__ = 766;
                    validate_non_negative_index("Ky", "num_obs", num_obs);
                    validate_non_negative_index("Ky", "num_obs", num_obs);
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Ky(num_obs, num_obs);
                    stan::math::initialize(Ky, DUMMY_VAR__);
                    stan::math::fill(Ky, DUMMY_VAR__);
                    stan::math::assign(Ky,diag_matrix(multiply(num_comps, delta_vec)));
                    current_statement_begin__ = 767;
                    validate_non_negative_index("KX", "num_obs", num_obs);
                    validate_non_negative_index("KX", "num_obs", num_obs);
                    validate_non_negative_index("KX", "num_comps", num_comps);
                    std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(num_obs, num_obs));
                    stan::math::initialize(KX, DUMMY_VAR__);
                    stan::math::fill(KX, DUMMY_VAR__);
                    stan::math::assign(KX,STAN_kernel_all(K_fixed, components, x_cont, x_cont, alpha, ell, wrp, beta, teff, vm_params, idx_expand, idx_expand, teff_obs, pstream__));
                    current_statement_begin__ = 771;
                    if (as_bool(logical_neq(obs_model, 1))) {
                        current_statement_begin__ = 772;
                        std::stringstream errmsg_stream__;
                        errmsg_stream__ << "<obs_model> must be 1 if the latent functions are not sampled!";
                        throw std::domain_error(errmsg_stream__.str());
                    }
                    current_statement_begin__ = 774;
                    for (int j = 1; j <= num_comps; ++j) {
                        current_statement_begin__ = 775;
                        stan::math::assign(Ky, add(Ky, get_base1(KX, j, "KX", 1)));
                    }
                    current_statement_begin__ = 777;
                    stan::math::assign(Ky, add(Ky, diag_matrix(sigma2_vec)));
                    current_statement_begin__ = 778;
                    lp_accum__.add(multi_normal_log(get_base1(y_cont, 1, "y_cont", 1), c_hat, Ky));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("ell");
        names__.push_back("wrp");
        names__.push_back("sigma");
        names__.push_back("phi");
        names__.push_back("teff_raw");
        names__.push_back("beta");
        names__.push_back("eta");
        names__.push_back("teff");
        names__.push_back("f_latent");
        names__.push_back("f_post");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(num_comps);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_ell);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_dis);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(obs_model, 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(obs_model, 3));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(is_uncrt);
        dims__.push_back(num_cases);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(is_heter);
        dims__.push_back(num_cases);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(is_f_sampled);
        dims__.push_back(num_comps);
        dims__.push_back(num_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(is_uncrt);
        dims__.push_back(num_cases);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(is_f_sampled);
        dims__.push_back(num_comps);
        dims__.push_back(num_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(is_generated_done);
        dims__.push_back((2 * (num_comps + 1)));
        dims__.push_back(num_obs);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_lgp_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> alpha;
        size_t alpha_d_0_max__ = num_comps;
        alpha.reserve(alpha_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
            alpha.push_back(in__.scalar_lb_constrain(0));
        }
        size_t alpha_k_0_max__ = num_comps;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }
        std::vector<double> ell;
        size_t ell_d_0_max__ = num_ell;
        ell.reserve(ell_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ell_d_0_max__; ++d_0__) {
            ell.push_back(in__.scalar_lb_constrain(0));
        }
        size_t ell_k_0_max__ = num_ell;
        for (size_t k_0__ = 0; k_0__ < ell_k_0_max__; ++k_0__) {
            vars__.push_back(ell[k_0__]);
        }
        std::vector<double> wrp;
        size_t wrp_d_0_max__ = num_dis;
        wrp.reserve(wrp_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < wrp_d_0_max__; ++d_0__) {
            wrp.push_back(in__.scalar_lb_constrain(0));
        }
        size_t wrp_k_0_max__ = num_dis;
        for (size_t k_0__ = 0; k_0__ < wrp_k_0_max__; ++k_0__) {
            vars__.push_back(wrp[k_0__]);
        }
        std::vector<double> sigma;
        size_t sigma_d_0_max__ = logical_eq(obs_model, 1);
        sigma.reserve(sigma_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
            sigma.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_k_0_max__ = logical_eq(obs_model, 1);
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        std::vector<double> phi;
        size_t phi_d_0_max__ = logical_eq(obs_model, 3);
        phi.reserve(phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
            phi.push_back(in__.scalar_lb_constrain(0));
        }
        size_t phi_k_0_max__ = logical_eq(obs_model, 3);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            vars__.push_back(phi[k_0__]);
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > teff_raw;
        size_t teff_raw_d_0_max__ = is_uncrt;
        teff_raw.reserve(teff_raw_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < teff_raw_d_0_max__; ++d_0__) {
            teff_raw.push_back(in__.vector_lb_constrain(0, num_cases));
        }
        size_t teff_raw_j_1_max__ = num_cases;
        size_t teff_raw_k_0_max__ = is_uncrt;
        for (size_t j_1__ = 0; j_1__ < teff_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < teff_raw_k_0_max__; ++k_0__) {
                vars__.push_back(teff_raw[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta;
        size_t beta_d_0_max__ = is_heter;
        beta.reserve(beta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_d_0_max__; ++d_0__) {
            beta.push_back(in__.vector_lb_constrain(0, num_cases));
        }
        size_t beta_j_1_max__ = num_cases;
        size_t beta_k_0_max__ = is_heter;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                vars__.push_back(beta[k_0__](j_1__));
            }
        }
        std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > eta;
        size_t eta_d_0_max__ = is_f_sampled;
        size_t eta_d_1_max__ = num_comps;
        eta.resize(eta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < eta_d_0_max__; ++d_0__) {
            eta[d_0__].reserve(eta_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < eta_d_1_max__; ++d_1__) {
                eta[d_0__].push_back(in__.vector_constrain(num_obs));
            }
        }
        size_t eta_j_1_max__ = num_obs;
        size_t eta_k_0_max__ = is_f_sampled;
        size_t eta_k_1_max__ = num_comps;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < eta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                    vars__.push_back(eta[k_0__][k_1__](j_1__));
                }
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 650;
            validate_non_negative_index("teff", "num_cases", num_cases);
            validate_non_negative_index("teff", "is_uncrt", is_uncrt);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > teff(is_uncrt, Eigen::Matrix<double, Eigen::Dynamic, 1>(num_cases));
            stan::math::initialize(teff, DUMMY_VAR__);
            stan::math::fill(teff, DUMMY_VAR__);
            current_statement_begin__ = 651;
            validate_non_negative_index("f_latent", "num_obs", num_obs);
            validate_non_negative_index("f_latent", "is_f_sampled", is_f_sampled);
            validate_non_negative_index("f_latent", "num_comps", num_comps);
            std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > f_latent(is_f_sampled, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(num_comps, Eigen::Matrix<double, Eigen::Dynamic, 1>(num_obs)));
            stan::math::initialize(f_latent, DUMMY_VAR__);
            stan::math::fill(f_latent, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 654;
            if (as_bool(is_uncrt)) {
                current_statement_begin__ = 655;
                stan::model::assign(teff, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            add(get_base1(teff_lb, 1, "teff_lb", 1), elt_multiply(subtract(get_base1(teff_ub, 1, "teff_ub", 1), get_base1(teff_lb, 1, "teff_lb", 1)), get_base1(teff_raw, 1, "teff_raw", 1))), 
                            "assigning variable teff");
            }
            current_statement_begin__ = 659;
            if (as_bool(is_f_sampled)) {
                {
                current_statement_begin__ = 661;
                validate_non_negative_index("Delta", "num_obs", num_obs);
                validate_non_negative_index("Delta", "num_obs", num_obs);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Delta(num_obs, num_obs);
                stan::math::initialize(Delta, DUMMY_VAR__);
                stan::math::fill(Delta, DUMMY_VAR__);
                stan::math::assign(Delta,diag_matrix(delta_vec));
                current_statement_begin__ = 662;
                validate_non_negative_index("KX", "num_obs", num_obs);
                validate_non_negative_index("KX", "num_obs", num_obs);
                validate_non_negative_index("KX", "num_comps", num_comps);
                std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(num_obs, num_obs));
                stan::math::initialize(KX, DUMMY_VAR__);
                stan::math::fill(KX, DUMMY_VAR__);
                stan::math::assign(KX,STAN_kernel_all(K_fixed, components, x_cont, x_cont, alpha, ell, wrp, beta, teff, vm_params, idx_expand, idx_expand, teff_obs, pstream__));
                current_statement_begin__ = 666;
                for (int j = 1; j <= num_comps; ++j) {
                    current_statement_begin__ = 667;
                    stan::model::assign(f_latent, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                multiply(cholesky_decompose(add(get_base1(KX, j, "KX", 1), Delta)), get_base1(get_base1(eta, 1, "eta", 1), j, "eta", 2)), 
                                "assigning variable f_latent");
                }
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t teff_j_1_max__ = num_cases;
                size_t teff_k_0_max__ = is_uncrt;
                for (size_t j_1__ = 0; j_1__ < teff_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < teff_k_0_max__; ++k_0__) {
                        vars__.push_back(teff[k_0__](j_1__));
                    }
                }
                size_t f_latent_j_1_max__ = num_obs;
                size_t f_latent_k_0_max__ = is_f_sampled;
                size_t f_latent_k_1_max__ = num_comps;
                for (size_t j_1__ = 0; j_1__ < f_latent_j_1_max__; ++j_1__) {
                    for (size_t k_1__ = 0; k_1__ < f_latent_k_1_max__; ++k_1__) {
                        for (size_t k_0__ = 0; k_0__ < f_latent_k_0_max__; ++k_0__) {
                            vars__.push_back(f_latent[k_0__][k_1__](j_1__));
                        }
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 791;
            validate_non_negative_index("f_post", "num_obs", num_obs);
            validate_non_negative_index("f_post", "is_generated_done", is_generated_done);
            validate_non_negative_index("f_post", "(2 * (num_comps + 1))", (2 * (num_comps + 1)));
            std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > f_post(is_generated_done, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >((2 * (num_comps + 1)), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_obs)));
            stan::math::initialize(f_post, DUMMY_VAR__);
            stan::math::fill(f_post, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 793;
            if (as_bool(is_generated_done)) {
                {
                current_statement_begin__ = 796;
                validate_non_negative_index("KX", "num_obs", num_obs);
                validate_non_negative_index("KX", "num_obs", num_obs);
                validate_non_negative_index("KX", "num_comps", num_comps);
                std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(num_obs, num_obs));
                stan::math::initialize(KX, DUMMY_VAR__);
                stan::math::fill(KX, DUMMY_VAR__);
                stan::math::assign(KX,STAN_kernel_all(K_fixed, components, x_cont, x_cont, alpha, ell, wrp, beta, teff, vm_params, idx_expand, idx_expand, teff_obs, pstream__));
                current_statement_begin__ = 801;
                stan::model::assign(f_post, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            STAN_gp_posterior(KX, get_base1(y_cont, 1, "y_cont", 1), delta, get_base1(sigma, 1, "sigma", 1), pstream__), 
                            "assigning variable f_post");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 791;
            size_t f_post_j_1_max__ = num_obs;
            size_t f_post_k_0_max__ = is_generated_done;
            size_t f_post_k_1_max__ = (2 * (num_comps + 1));
            for (size_t j_1__ = 0; j_1__ < f_post_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < f_post_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < f_post_k_0_max__; ++k_0__) {
                        vars__.push_back(f_post[k_0__][k_1__](j_1__));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_lgp";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_k_0_max__ = num_comps;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ell_k_0_max__ = num_ell;
        for (size_t k_0__ = 0; k_0__ < ell_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ell" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t wrp_k_0_max__ = num_dis;
        for (size_t k_0__ = 0; k_0__ < wrp_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "wrp" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_k_0_max__ = logical_eq(obs_model, 1);
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = logical_eq(obs_model, 3);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t teff_raw_j_1_max__ = num_cases;
        size_t teff_raw_k_0_max__ = is_uncrt;
        for (size_t j_1__ = 0; j_1__ < teff_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < teff_raw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "teff_raw" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t beta_j_1_max__ = num_cases;
        size_t beta_k_0_max__ = is_heter;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t eta_j_1_max__ = num_obs;
        size_t eta_k_0_max__ = is_f_sampled;
        size_t eta_k_1_max__ = num_comps;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < eta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "eta" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t teff_j_1_max__ = num_cases;
            size_t teff_k_0_max__ = is_uncrt;
            for (size_t j_1__ = 0; j_1__ < teff_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < teff_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "teff" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t f_latent_j_1_max__ = num_obs;
            size_t f_latent_k_0_max__ = is_f_sampled;
            size_t f_latent_k_1_max__ = num_comps;
            for (size_t j_1__ = 0; j_1__ < f_latent_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < f_latent_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < f_latent_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "f_latent" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t f_post_j_1_max__ = num_obs;
        size_t f_post_k_0_max__ = is_generated_done;
        size_t f_post_k_1_max__ = (2 * (num_comps + 1));
        for (size_t j_1__ = 0; j_1__ < f_post_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < f_post_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < f_post_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "f_post" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_k_0_max__ = num_comps;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ell_k_0_max__ = num_ell;
        for (size_t k_0__ = 0; k_0__ < ell_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ell" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t wrp_k_0_max__ = num_dis;
        for (size_t k_0__ = 0; k_0__ < wrp_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "wrp" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_k_0_max__ = logical_eq(obs_model, 1);
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = logical_eq(obs_model, 3);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t teff_raw_j_1_max__ = num_cases;
        size_t teff_raw_k_0_max__ = is_uncrt;
        for (size_t j_1__ = 0; j_1__ < teff_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < teff_raw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "teff_raw" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t beta_j_1_max__ = num_cases;
        size_t beta_k_0_max__ = is_heter;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t eta_j_1_max__ = num_obs;
        size_t eta_k_0_max__ = is_f_sampled;
        size_t eta_k_1_max__ = num_comps;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < eta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "eta" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t teff_j_1_max__ = num_cases;
            size_t teff_k_0_max__ = is_uncrt;
            for (size_t j_1__ = 0; j_1__ < teff_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < teff_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "teff" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t f_latent_j_1_max__ = num_obs;
            size_t f_latent_k_0_max__ = is_f_sampled;
            size_t f_latent_k_1_max__ = num_comps;
            for (size_t j_1__ = 0; j_1__ < f_latent_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < f_latent_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < f_latent_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "f_latent" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t f_post_j_1_max__ = num_obs;
        size_t f_post_k_0_max__ = is_generated_done;
        size_t f_post_k_1_max__ = (2 * (num_comps + 1));
        for (size_t j_1__ = 0; j_1__ < f_post_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < f_post_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < f_post_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "f_post" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
    }
}; // model
}  // namespace
typedef model_lgp_namespace::model_lgp stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
