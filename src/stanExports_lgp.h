// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_lgp_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_lgp");
    reader.add_event(21, 21, "include", "chunks/functions_kernels_base.stan");
    reader.add_event(21, 0, "start", "chunks/functions_kernels_base.stan");
    reader.add_event(120, 99, "end", "chunks/functions_kernels_base.stan");
    reader.add_event(120, 22, "restart", "model_lgp");
    reader.add_event(120, 22, "include", "chunks/functions_kernels.stan");
    reader.add_event(120, 0, "start", "chunks/functions_kernels.stan");
    reader.add_event(208, 88, "end", "chunks/functions_kernels.stan");
    reader.add_event(208, 23, "restart", "model_lgp");
    reader.add_event(208, 23, "include", "chunks/functions_log_prior.stan");
    reader.add_event(208, 0, "start", "chunks/functions_log_prior.stan");
    reader.add_event(246, 38, "end", "chunks/functions_log_prior.stan");
    reader.add_event(246, 24, "restart", "model_lgp");
    reader.add_event(250, 28, "include", "chunks/data.stan");
    reader.add_event(250, 0, "start", "chunks/data.stan");
    reader.add_event(322, 72, "end", "chunks/data.stan");
    reader.add_event(322, 29, "restart", "model_lgp");
    reader.add_event(326, 33, "include", "chunks/transformed_data.stan");
    reader.add_event(326, 0, "start", "chunks/transformed_data.stan");
    reader.add_event(353, 27, "end", "chunks/transformed_data.stan");
    reader.add_event(353, 34, "restart", "model_lgp");
    reader.add_event(357, 38, "include", "chunks/parameters.stan");
    reader.add_event(357, 0, "start", "chunks/parameters.stan");
    reader.add_event(382, 25, "end", "chunks/parameters.stan");
    reader.add_event(382, 39, "restart", "model_lgp");
    reader.add_event(386, 43, "include", "chunks/transformed_parameters.stan");
    reader.add_event(386, 0, "start", "chunks/transformed_parameters.stan");
    reader.add_event(400, 14, "end", "chunks/transformed_parameters.stan");
    reader.add_event(400, 44, "restart", "model_lgp");
    reader.add_event(404, 48, "include", "chunks/model_priors.stan");
    reader.add_event(404, 0, "start", "chunks/model_priors.stan");
    reader.add_event(477, 73, "end", "chunks/model_priors.stan");
    reader.add_event(477, 49, "restart", "model_lgp");
    reader.add_event(478, 50, "include", "chunks/model_likelihood.stan");
    reader.add_event(478, 0, "start", "chunks/model_likelihood.stan");
    reader.add_event(519, 41, "end", "chunks/model_likelihood.stan");
    reader.add_event(519, 51, "restart", "model_lgp");
    reader.add_event(524, 56, "include", "chunks/generated_quantities.stan");
    reader.add_event(524, 0, "start", "chunks/generated_quantities.stan");
    reader.add_event(550, 26, "end", "chunks/generated_quantities.stan");
    reader.add_event(550, 57, "restart", "model_lgp");
    reader.add_event(553, 58, "end", "model_lgp");
    return reader;
}
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
STAN_warp_input(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                    const T1__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 25;
        return stan::math::promote_scalar<fun_return_scalar_t__>(add(-(1), multiply(2, inv(add(1, stan::math::exp(multiply(-(a), x)))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_warp_input_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                    const T1__& a, std::ostream* pstream__) const {
        return STAN_warp_input(x, a, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
STAN_var_mask(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                  const T1__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 30;
        return stan::math::promote_scalar<fun_return_scalar_t__>(inv(add(1, stan::math::exp(multiply(-(a), x)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_var_mask_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                  const T1__& a, std::ostream* pstream__) const {
        return STAN_var_mask(x, a, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
STAN_get_x_tilde(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_disAge,
                     const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& T_effect,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& T_observed,
                     const std::vector<std::vector<int> >& mapping,
                     const std::vector<int>& lengths, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 35;
        int n_tot(0);
        (void) n_tot;  // dummy to suppress unused var warning
        stan::math::fill(n_tot, std::numeric_limits<int>::min());
        stan::math::assign(n_tot,num_elements(x_disAge));
        current_statement_begin__ = 36;
        int N_cases(0);
        (void) N_cases;  // dummy to suppress unused var warning
        stan::math::fill(N_cases, std::numeric_limits<int>::min());
        stan::math::assign(N_cases,num_elements(lengths));
        current_statement_begin__ = 37;
        validate_non_negative_index("x_tilde", "n_tot", n_tot);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_tilde(n_tot);
        stan::math::initialize(x_tilde, DUMMY_VAR__);
        stan::math::fill(x_tilde, DUMMY_VAR__);
        stan::math::assign(x_tilde,rep_vector(0.0, n_tot));
        current_statement_begin__ = 38;
        for (int k = 1; k <= N_cases; ++k) {
            {
            current_statement_begin__ = 39;
            validate_non_negative_index("inds", "get_base1(lengths, k, \"lengths\", 1)", get_base1(lengths, k, "lengths", 1));
            std::vector<int  > inds(get_base1(lengths, k, "lengths", 1), int(0));
            stan::math::fill(inds, std::numeric_limits<int>::min());
            stan::math::assign(inds,stan::model::rvalue(mapping, stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_min_max(1, get_base1(lengths, k, "lengths", 1)), stan::model::nil_index_list())), "mapping"));
            current_statement_begin__ = 40;
            stan::model::assign(x_tilde, 
                        stan::model::cons_list(stan::model::index_multi(inds), stan::model::nil_index_list()), 
                        subtract(add(stan::model::rvalue(x_disAge, stan::model::cons_list(stan::model::index_multi(inds), stan::model::nil_index_list()), "x_disAge"), get_base1(T_observed, k, "T_observed", 1)), get_base1(T_effect, k, "T_effect", 1)), 
                        "assigning variable x_tilde");
            }
        }
        current_statement_begin__ = 42;
        return stan::math::promote_scalar<fun_return_scalar_t__>(x_tilde);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_get_x_tilde_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_disAge,
                     const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& T_effect,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& T_observed,
                     const std::vector<std::vector<int> >& mapping,
                     const std::vector<int>& lengths, std::ostream* pstream__) const {
        return STAN_get_x_tilde(x_disAge, T_effect, T_observed, mapping, lengths, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_K_zerosum(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                   const int& M, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 47;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));
        current_statement_begin__ = 48;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));
        current_statement_begin__ = 49;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 50;
        for (int i = 1; i <= n1; ++i) {
            current_statement_begin__ = 51;
            for (int j = 1; j <= n2; ++j) {
                current_statement_begin__ = 52;
                if (as_bool(logical_eq(get_base1(x1, i, "x1", 1), get_base1(x2, j, "x2", 1)))) {
                    current_statement_begin__ = 53;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                1, 
                                "assigning variable K");
                } else {
                    current_statement_begin__ = 55;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                -(inv((M - 1))), 
                                "assigning variable K");
                }
            }
        }
        current_statement_begin__ = 59;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_K_zerosum_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                   const int& M, std::ostream* pstream__) const {
        return STAN_K_zerosum(x1, x2, M, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_K_bin(const std::vector<int>& x1,
               const std::vector<int>& x2,
               const int& c, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 65;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));
        current_statement_begin__ = 66;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));
        current_statement_begin__ = 67;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 68;
        for (int i = 1; i <= n1; ++i) {
            current_statement_begin__ = 69;
            for (int j = 1; j <= n2; ++j) {
                current_statement_begin__ = 70;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            (logical_eq(get_base1(x1, i, "x1", 1), c) * logical_eq(get_base1(x2, j, "x2", 1), c)), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 73;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_K_bin_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
               const std::vector<int>& x2,
               const int& c, std::ostream* pstream__) const {
        return STAN_K_bin(x1, x2, c, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_K_var_mask(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_tilde,
                    const T1__& stp,
                    const std::vector<T2__>& vm_params, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 79;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(x_tilde));
        current_statement_begin__ = 80;
        local_scalar_t__ a(DUMMY_VAR__);
        (void) a;  // dummy to suppress unused var warning
        stan::math::initialize(a, DUMMY_VAR__);
        stan::math::fill(a, DUMMY_VAR__);
        stan::math::assign(a,(stp * get_base1(vm_params, 2, "vm_params", 1)));
        current_statement_begin__ = 81;
        local_scalar_t__ r(DUMMY_VAR__);
        (void) r;  // dummy to suppress unused var warning
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);
        stan::math::assign(r,(inv(a) * logit(get_base1(vm_params, 1, "vm_params", 1))));
        current_statement_begin__ = 82;
        validate_non_negative_index("s", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> s(n);
        stan::math::initialize(s, DUMMY_VAR__);
        stan::math::fill(s, DUMMY_VAR__);
        stan::math::assign(s,STAN_var_mask(subtract(x_tilde, r), a, pstream__));
        current_statement_begin__ = 83;
        validate_non_negative_index("MASK", "n", n);
        validate_non_negative_index("MASK", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> MASK(n, n);
        stan::math::initialize(MASK, DUMMY_VAR__);
        stan::math::fill(MASK, DUMMY_VAR__);
        stan::math::assign(MASK,tcrossprod(to_matrix(s)));
        current_statement_begin__ = 84;
        return stan::math::promote_scalar<fun_return_scalar_t__>(MASK);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_K_var_mask_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_tilde,
                    const T1__& stp,
                    const std::vector<T2__>& vm_params, std::ostream* pstream__) const {
        return STAN_K_var_mask(x_tilde, stp, vm_params, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_K_beta(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
                const std::vector<int>& row_to_caseID, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 90;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(row_to_caseID));
        current_statement_begin__ = 91;
        int i_caseID(0);
        (void) i_caseID;  // dummy to suppress unused var warning
        stan::math::fill(i_caseID, std::numeric_limits<int>::min());
        stan::math::assign(i_caseID,0);
        current_statement_begin__ = 92;
        int j_caseID(0);
        (void) j_caseID;  // dummy to suppress unused var warning
        stan::math::fill(j_caseID, std::numeric_limits<int>::min());
        stan::math::assign(j_caseID,0);
        current_statement_begin__ = 93;
        local_scalar_t__ tmp(DUMMY_VAR__);
        (void) tmp;  // dummy to suppress unused var warning
        stan::math::initialize(tmp, DUMMY_VAR__);
        stan::math::fill(tmp, DUMMY_VAR__);
        current_statement_begin__ = 94;
        validate_non_negative_index("BETA", "n", n);
        validate_non_negative_index("BETA", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> BETA(n, n);
        stan::math::initialize(BETA, DUMMY_VAR__);
        stan::math::fill(BETA, DUMMY_VAR__);
        current_statement_begin__ = 95;
        for (int i = 1; i <= (n - 1); ++i) {
            current_statement_begin__ = 96;
            stan::math::assign(i_caseID, get_base1(row_to_caseID, i, "row_to_caseID", 1));
            current_statement_begin__ = 97;
            for (int j = (i + 1); j <= n; ++j) {
                current_statement_begin__ = 98;
                stan::math::assign(j_caseID, get_base1(row_to_caseID, j, "row_to_caseID", 1));
                current_statement_begin__ = 99;
                if (as_bool(logical_gt((i_caseID * j_caseID), 0))) {
                    current_statement_begin__ = 100;
                    stan::math::assign(tmp, stan::math::sqrt((get_base1(beta, i_caseID, "beta", 1) * get_base1(beta, j_caseID, "beta", 1))));
                } else {
                    current_statement_begin__ = 102;
                    stan::math::assign(tmp, 0);
                }
                current_statement_begin__ = 104;
                stan::model::assign(BETA, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            tmp, 
                            "assigning variable BETA");
                current_statement_begin__ = 105;
                stan::model::assign(BETA, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            tmp, 
                            "assigning variable BETA");
            }
            current_statement_begin__ = 107;
            if (as_bool(logical_gt(i_caseID, 0))) {
                current_statement_begin__ = 108;
                stan::model::assign(BETA, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            get_base1(beta, i_caseID, "beta", 1), 
                            "assigning variable BETA");
            } else {
                current_statement_begin__ = 110;
                stan::model::assign(BETA, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            0, 
                            "assigning variable BETA");
            }
        }
        current_statement_begin__ = 113;
        stan::math::assign(i_caseID, get_base1(row_to_caseID, n, "row_to_caseID", 1));
        current_statement_begin__ = 114;
        if (as_bool(logical_gt(i_caseID, 0))) {
            current_statement_begin__ = 115;
            stan::model::assign(BETA, 
                        stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                        get_base1(beta, i_caseID, "beta", 1), 
                        "assigning variable BETA");
        } else {
            current_statement_begin__ = 117;
            stan::model::assign(BETA, 
                        stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                        0, 
                        "assigning variable BETA");
        }
        current_statement_begin__ = 119;
        return stan::math::promote_scalar<fun_return_scalar_t__>(BETA);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_K_beta_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
                const std::vector<int>& row_to_caseID, std::ostream* pstream__) const {
        return STAN_K_beta(beta, row_to_caseID, pstream__);
    }
};
template <typename T0__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernels_fixed(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& X,
                       const std::vector<int>& X_nn,
                       const std::vector<int>& D,
                       const int& N_tot,
                       const std::vector<int>& N_cat, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 124;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(get_base1(X, 1, "X", 1)));
        current_statement_begin__ = 125;
        int nf(0);
        (void) nf;  // dummy to suppress unused var warning
        stan::math::fill(nf, std::numeric_limits<int>::min());
        stan::math::assign(nf,(((1 + get_base1(D, 3, "D", 1)) + get_base1(D, 5, "D", 1)) + get_base1(D, 6, "D", 1)));
        current_statement_begin__ = 126;
        validate_non_negative_index("KF", "n", n);
        validate_non_negative_index("KF", "n", n);
        validate_non_negative_index("KF", "nf", nf);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KF(nf, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n, n));
        stan::math::initialize(KF, DUMMY_VAR__);
        stan::math::fill(KF, DUMMY_VAR__);
        current_statement_begin__ = 127;
        stan::model::assign(KF, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    STAN_K_zerosum(get_base1(X, 1, "X", 1), get_base1(X, 1, "X", 1), get_base1(N_cat, 1, "N_cat", 1), pstream__), 
                    "assigning variable KF");
        current_statement_begin__ = 128;
        for (int j = 1; j <= get_base1(D, 3, "D", 1); ++j) {
            current_statement_begin__ = 129;
            stan::model::assign(KF, 
                        stan::model::cons_list(stan::model::index_uni((1 + j)), stan::model::nil_index_list()), 
                        STAN_K_bin(X_nn, X_nn, 1, pstream__), 
                        "assigning variable KF");
        }
        current_statement_begin__ = 131;
        for (int j = 1; j <= get_base1(D, 5, "D", 1); ++j) {
            {
            current_statement_begin__ = 132;
            int ix(0);
            (void) ix;  // dummy to suppress unused var warning
            stan::math::fill(ix, std::numeric_limits<int>::min());
            stan::math::assign(ix,(((2 + get_base1(D, 3, "D", 1)) + get_base1(D, 4, "D", 1)) + j));
            current_statement_begin__ = 133;
            stan::model::assign(KF, 
                        stan::model::cons_list(stan::model::index_uni(((1 + get_base1(D, 3, "D", 1)) + j)), stan::model::nil_index_list()), 
                        STAN_K_zerosum(get_base1(X, ix, "X", 1), get_base1(X, ix, "X", 1), get_base1(N_cat, (1 + j), "N_cat", 1), pstream__), 
                        "assigning variable KF");
            }
        }
        current_statement_begin__ = 135;
        for (int j = 1; j <= get_base1(D, 6, "D", 1); ++j) {
            {
            current_statement_begin__ = 136;
            int ix(0);
            (void) ix;  // dummy to suppress unused var warning
            stan::math::fill(ix, std::numeric_limits<int>::min());
            stan::math::assign(ix,((((2 + get_base1(D, 3, "D", 1)) + get_base1(D, 4, "D", 1)) + get_base1(D, 5, "D", 1)) + j));
            current_statement_begin__ = 137;
            stan::model::assign(KF, 
                        stan::model::cons_list(stan::model::index_uni((((1 + get_base1(D, 3, "D", 1)) + get_base1(D, 5, "D", 1)) + j)), stan::model::nil_index_list()), 
                        STAN_K_zerosum(get_base1(X, ix, "X", 1), get_base1(X, ix, "X", 1), get_base1(N_cat, ((1 + get_base1(D, 5, "D", 1)) + j), "N_cat", 1), pstream__), 
                        "assigning variable KF");
            }
        }
        current_statement_begin__ = 139;
        return stan::math::promote_scalar<fun_return_scalar_t__>(KF);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernels_fixed_functor__ {
    template <typename T0__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& X,
                       const std::vector<int>& X_nn,
                       const std::vector<int>& D,
                       const int& N_tot,
                       const std::vector<int>& N_cat, std::ostream* pstream__) const {
        return STAN_kernels_fixed(X, X_nn, D, N_tot, N_cat, pstream__);
    }
};
template <typename T0__, typename T4__, typename T5__, typename T6__, typename T11__, typename T12__, typename T13__, typename T14__, typename T15__, typename T16__, typename T17__, typename T18__, typename T19__, typename T20__, typename T21__, typename T22__, typename T23__, typename T24__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T11__, T12__, T13__, T14__, typename boost::math::tools::promote_args<T15__, T16__, T17__, T18__, typename boost::math::tools::promote_args<T19__, T20__, T21__, T22__, typename boost::math::tools::promote_args<T23__, T24__>::type>::type>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernels(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& X,
                 const std::vector<std::vector<int> >& caseID_to_rows,
                 const std::vector<int>& row_to_caseID_plus1,
                 const std::vector<int>& caseID_nrows,
                 const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic> >& KF,
                 const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic, 1> >& T_effect,
                 const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& T_observed,
                 const std::vector<int>& D,
                 const int& UNCRT,
                 const int& HMGNS,
                 const int& USE_VAR_MASK,
                 const std::vector<T11__>& vm_params,
                 const std::vector<T12__>& alpha_idAge,
                 const std::vector<T13__>& alpha_sharedAge,
                 const std::vector<T14__>& alpha_diseaseAge,
                 const std::vector<T15__>& alpha_continuous,
                 const std::vector<T16__>& alpha_categAge,
                 const std::vector<T17__>& alpha_categOffset,
                 const std::vector<T18__>& ell_idAge,
                 const std::vector<T19__>& ell_sharedAge,
                 const std::vector<T20__>& ell_diseaseAge,
                 const std::vector<T21__>& ell_continuous,
                 const std::vector<T22__>& ell_categAge,
                 const std::vector<T23__>& warp_steepness,
                 const std::vector<Eigen::Matrix<T24__, Eigen::Dynamic, 1> >& beta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T11__, T12__, T13__, T14__, typename boost::math::tools::promote_args<T15__, T16__, T17__, T18__, typename boost::math::tools::promote_args<T19__, T20__, T21__, T22__, typename boost::math::tools::promote_args<T23__, T24__>::type>::type>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 145;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(get_base1(X, 1, "X", 1)));
        current_statement_begin__ = 146;
        validate_non_negative_index("x_age", "n", n);
        std::vector<local_scalar_t__  > x_age(n, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(x_age, DUMMY_VAR__);
        stan::math::fill(x_age, DUMMY_VAR__);
        stan::math::assign(x_age,to_array_1d(get_base1(X, 2, "X", 1)));
        current_statement_begin__ = 147;
        int sum_D(0);
        (void) sum_D;  // dummy to suppress unused var warning
        stan::math::fill(sum_D, std::numeric_limits<int>::min());
        stan::math::assign(sum_D,sum(D));
        current_statement_begin__ = 148;
        validate_non_negative_index("KX", "n", n);
        validate_non_negative_index("KX", "n", n);
        validate_non_negative_index("KX", "sum_D", sum_D);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX(sum_D, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n, n));
        stan::math::initialize(KX, DUMMY_VAR__);
        stan::math::fill(KX, DUMMY_VAR__);
        current_statement_begin__ = 149;
        int r(0);
        (void) r;  // dummy to suppress unused var warning
        stan::math::fill(r, std::numeric_limits<int>::min());
        stan::math::assign(r,0);
        current_statement_begin__ = 150;
        if (as_bool(logical_eq(get_base1(D, 1, "D", 1), 1))) {
            {
            current_statement_begin__ = 151;
            local_scalar_t__ alp(DUMMY_VAR__);
            (void) alp;  // dummy to suppress unused var warning
            stan::math::initialize(alp, DUMMY_VAR__);
            stan::math::fill(alp, DUMMY_VAR__);
            stan::math::assign(alp,get_base1(alpha_idAge, 1, "alpha_idAge", 1));
            current_statement_begin__ = 152;
            local_scalar_t__ ell(DUMMY_VAR__);
            (void) ell;  // dummy to suppress unused var warning
            stan::math::initialize(ell, DUMMY_VAR__);
            stan::math::fill(ell, DUMMY_VAR__);
            stan::math::assign(ell,get_base1(ell_idAge, 1, "ell_idAge", 1));
            current_statement_begin__ = 153;
            stan::math::assign(r, (r + 1));
            current_statement_begin__ = 154;
            stan::model::assign(KX, 
                        stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                        elt_multiply(cov_exp_quad(x_age, alp, ell), get_base1(KF, 1, "KF", 1)), 
                        "assigning variable KX");
            }
        }
        current_statement_begin__ = 156;
        if (as_bool(logical_eq(get_base1(D, 2, "D", 1), 1))) {
            {
            current_statement_begin__ = 157;
            local_scalar_t__ alp(DUMMY_VAR__);
            (void) alp;  // dummy to suppress unused var warning
            stan::math::initialize(alp, DUMMY_VAR__);
            stan::math::fill(alp, DUMMY_VAR__);
            stan::math::assign(alp,get_base1(alpha_sharedAge, 1, "alpha_sharedAge", 1));
            current_statement_begin__ = 158;
            local_scalar_t__ ell(DUMMY_VAR__);
            (void) ell;  // dummy to suppress unused var warning
            stan::math::initialize(ell, DUMMY_VAR__);
            stan::math::fill(ell, DUMMY_VAR__);
            stan::math::assign(ell,get_base1(ell_sharedAge, 1, "ell_sharedAge", 1));
            current_statement_begin__ = 159;
            stan::math::assign(r, (r + 1));
            current_statement_begin__ = 160;
            stan::model::assign(KX, 
                        stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                        cov_exp_quad(x_age, alp, ell), 
                        "assigning variable KX");
            }
        }
        current_statement_begin__ = 162;
        if (as_bool(logical_eq(get_base1(D, 3, "D", 1), 1))) {
            {
            current_statement_begin__ = 163;
            local_scalar_t__ alp(DUMMY_VAR__);
            (void) alp;  // dummy to suppress unused var warning
            stan::math::initialize(alp, DUMMY_VAR__);
            stan::math::fill(alp, DUMMY_VAR__);
            stan::math::assign(alp,get_base1(alpha_diseaseAge, 1, "alpha_diseaseAge", 1));
            current_statement_begin__ = 164;
            local_scalar_t__ ell(DUMMY_VAR__);
            (void) ell;  // dummy to suppress unused var warning
            stan::math::initialize(ell, DUMMY_VAR__);
            stan::math::fill(ell, DUMMY_VAR__);
            stan::math::assign(ell,get_base1(ell_diseaseAge, 1, "ell_diseaseAge", 1));
            current_statement_begin__ = 165;
            local_scalar_t__ stp(DUMMY_VAR__);
            (void) stp;  // dummy to suppress unused var warning
            stan::math::initialize(stp, DUMMY_VAR__);
            stan::math::fill(stp, DUMMY_VAR__);
            stan::math::assign(stp,get_base1(warp_steepness, 1, "warp_steepness", 1));
            current_statement_begin__ = 166;
            validate_non_negative_index("x_tilde", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_tilde(n);
            stan::math::initialize(x_tilde, DUMMY_VAR__);
            stan::math::fill(x_tilde, DUMMY_VAR__);
            current_statement_begin__ = 167;
            validate_non_negative_index("w", "n", n);
            std::vector<local_scalar_t__  > w(n, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(w, DUMMY_VAR__);
            stan::math::fill(w, DUMMY_VAR__);
            current_statement_begin__ = 168;
            stan::math::assign(r, (r + 1));
            current_statement_begin__ = 171;
            if (as_bool(logical_eq(UNCRT, 0))) {
                current_statement_begin__ = 172;
                stan::math::assign(x_tilde, get_base1(X, 3, "X", 1));
            } else {
                current_statement_begin__ = 174;
                stan::math::assign(x_tilde, STAN_get_x_tilde(get_base1(X, 3, "X", 1), get_base1(T_effect, 1, "T_effect", 1), T_observed, caseID_to_rows, caseID_nrows, pstream__));
            }
            current_statement_begin__ = 176;
            stan::math::assign(w, to_array_1d(STAN_warp_input(x_tilde, stp, pstream__)));
            current_statement_begin__ = 179;
            stan::model::assign(KX, 
                        stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                        elt_multiply(get_base1(KF, 2, "KF", 1), cov_exp_quad(w, alp, ell)), 
                        "assigning variable KX");
            current_statement_begin__ = 180;
            if (as_bool(logical_eq(HMGNS, 0))) {
                current_statement_begin__ = 181;
                stan::model::assign(KX, 
                            stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                            elt_multiply(STAN_K_beta(get_base1(beta, 1, "beta", 1), row_to_caseID_plus1, pstream__), get_base1(KX, r, "KX", 1)), 
                            "assigning variable KX");
            }
            current_statement_begin__ = 183;
            if (as_bool(logical_eq(USE_VAR_MASK, 1))) {
                current_statement_begin__ = 184;
                stan::model::assign(KX, 
                            stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                            elt_multiply(STAN_K_var_mask(x_tilde, stp, vm_params, pstream__), get_base1(KX, r, "KX", 1)), 
                            "assigning variable KX");
            }
            }
        }
        current_statement_begin__ = 187;
        for (int j = 1; j <= get_base1(D, 4, "D", 1); ++j) {
            {
            current_statement_begin__ = 188;
            local_scalar_t__ alp(DUMMY_VAR__);
            (void) alp;  // dummy to suppress unused var warning
            stan::math::initialize(alp, DUMMY_VAR__);
            stan::math::fill(alp, DUMMY_VAR__);
            stan::math::assign(alp,get_base1(alpha_continuous, j, "alpha_continuous", 1));
            current_statement_begin__ = 189;
            local_scalar_t__ ell(DUMMY_VAR__);
            (void) ell;  // dummy to suppress unused var warning
            stan::math::initialize(ell, DUMMY_VAR__);
            stan::math::fill(ell, DUMMY_VAR__);
            stan::math::assign(ell,get_base1(ell_continuous, j, "ell_continuous", 1));
            current_statement_begin__ = 190;
            int ix(0);
            (void) ix;  // dummy to suppress unused var warning
            stan::math::fill(ix, std::numeric_limits<int>::min());
            stan::math::assign(ix,((2 + get_base1(D, 3, "D", 1)) + j));
            current_statement_begin__ = 191;
            stan::math::assign(r, (r + 1));
            current_statement_begin__ = 192;
            stan::model::assign(KX, 
                        stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                        cov_exp_quad(to_array_1d(get_base1(X, ix, "X", 1)), alp, ell), 
                        "assigning variable KX");
            }
        }
        current_statement_begin__ = 194;
        for (int j = 1; j <= get_base1(D, 5, "D", 1); ++j) {
            {
            current_statement_begin__ = 195;
            local_scalar_t__ alp(DUMMY_VAR__);
            (void) alp;  // dummy to suppress unused var warning
            stan::math::initialize(alp, DUMMY_VAR__);
            stan::math::fill(alp, DUMMY_VAR__);
            stan::math::assign(alp,get_base1(alpha_categAge, j, "alpha_categAge", 1));
            current_statement_begin__ = 196;
            local_scalar_t__ ell(DUMMY_VAR__);
            (void) ell;  // dummy to suppress unused var warning
            stan::math::initialize(ell, DUMMY_VAR__);
            stan::math::fill(ell, DUMMY_VAR__);
            stan::math::assign(ell,get_base1(ell_categAge, j, "ell_categAge", 1));
            current_statement_begin__ = 197;
            int ikf(0);
            (void) ikf;  // dummy to suppress unused var warning
            stan::math::fill(ikf, std::numeric_limits<int>::min());
            stan::math::assign(ikf,((1 + get_base1(D, 3, "D", 1)) + j));
            current_statement_begin__ = 198;
            stan::math::assign(r, (r + 1));
            current_statement_begin__ = 199;
            stan::model::assign(KX, 
                        stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                        elt_multiply(cov_exp_quad(x_age, alp, ell), get_base1(KF, ikf, "KF", 1)), 
                        "assigning variable KX");
            }
        }
        current_statement_begin__ = 201;
        for (int j = 1; j <= get_base1(D, 6, "D", 1); ++j) {
            {
            current_statement_begin__ = 202;
            int ikf(0);
            (void) ikf;  // dummy to suppress unused var warning
            stan::math::fill(ikf, std::numeric_limits<int>::min());
            stan::math::assign(ikf,(((1 + get_base1(D, 3, "D", 1)) + get_base1(D, 5, "D", 1)) + j));
            current_statement_begin__ = 203;
            local_scalar_t__ alp(DUMMY_VAR__);
            (void) alp;  // dummy to suppress unused var warning
            stan::math::initialize(alp, DUMMY_VAR__);
            stan::math::fill(alp, DUMMY_VAR__);
            stan::math::assign(alp,get_base1(alpha_categOffset, j, "alpha_categOffset", 1));
            current_statement_begin__ = 204;
            stan::math::assign(r, (r + 1));
            current_statement_begin__ = 205;
            stan::model::assign(KX, 
                        stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                        multiply(square(alp), get_base1(KF, ikf, "KF", 1)), 
                        "assigning variable KX");
            }
        }
        current_statement_begin__ = 207;
        return stan::math::promote_scalar<fun_return_scalar_t__>(KX);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernels_functor__ {
    template <typename T0__, typename T4__, typename T5__, typename T6__, typename T11__, typename T12__, typename T13__, typename T14__, typename T15__, typename T16__, typename T17__, typename T18__, typename T19__, typename T20__, typename T21__, typename T22__, typename T23__, typename T24__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T11__, T12__, T13__, T14__, typename boost::math::tools::promote_args<T15__, T16__, T17__, T18__, typename boost::math::tools::promote_args<T19__, T20__, T21__, T22__, typename boost::math::tools::promote_args<T23__, T24__>::type>::type>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& X,
                 const std::vector<std::vector<int> >& caseID_to_rows,
                 const std::vector<int>& row_to_caseID_plus1,
                 const std::vector<int>& caseID_nrows,
                 const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic> >& KF,
                 const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic, 1> >& T_effect,
                 const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& T_observed,
                 const std::vector<int>& D,
                 const int& UNCRT,
                 const int& HMGNS,
                 const int& USE_VAR_MASK,
                 const std::vector<T11__>& vm_params,
                 const std::vector<T12__>& alpha_idAge,
                 const std::vector<T13__>& alpha_sharedAge,
                 const std::vector<T14__>& alpha_diseaseAge,
                 const std::vector<T15__>& alpha_continuous,
                 const std::vector<T16__>& alpha_categAge,
                 const std::vector<T17__>& alpha_categOffset,
                 const std::vector<T18__>& ell_idAge,
                 const std::vector<T19__>& ell_sharedAge,
                 const std::vector<T20__>& ell_diseaseAge,
                 const std::vector<T21__>& ell_continuous,
                 const std::vector<T22__>& ell_categAge,
                 const std::vector<T23__>& warp_steepness,
                 const std::vector<Eigen::Matrix<T24__, Eigen::Dynamic, 1> >& beta, std::ostream* pstream__) const {
        return STAN_kernels(X, caseID_to_rows, row_to_caseID_plus1, caseID_nrows, KF, T_effect, T_observed, D, UNCRT, HMGNS, USE_VAR_MASK, vm_params, alpha_idAge, alpha_sharedAge, alpha_diseaseAge, alpha_continuous, alpha_categAge, alpha_categOffset, ell_idAge, ell_sharedAge, ell_diseaseAge, ell_continuous, ell_categAge, warp_steepness, beta, pstream__);
    }
};
template <typename T0__, typename T2__>
typename boost::math::tools::promote_args<T0__, T2__>::type
STAN_log_prior(const T0__& x,
                   const std::vector<int>& types,
                   const std::vector<T2__>& hp, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 211;
        local_scalar_t__ lp(DUMMY_VAR__);
        (void) lp;  // dummy to suppress unused var warning
        stan::math::initialize(lp, DUMMY_VAR__);
        stan::math::fill(lp, DUMMY_VAR__);
        current_statement_begin__ = 212;
        local_scalar_t__ a(DUMMY_VAR__);
        (void) a;  // dummy to suppress unused var warning
        stan::math::initialize(a, DUMMY_VAR__);
        stan::math::fill(a, DUMMY_VAR__);
        stan::math::assign(a,get_base1(hp, 1, "hp", 1));
        current_statement_begin__ = 213;
        local_scalar_t__ b(DUMMY_VAR__);
        (void) b;  // dummy to suppress unused var warning
        stan::math::initialize(b, DUMMY_VAR__);
        stan::math::fill(b, DUMMY_VAR__);
        stan::math::assign(b,get_base1(hp, 2, "hp", 1));
        current_statement_begin__ = 214;
        local_scalar_t__ c(DUMMY_VAR__);
        (void) c;  // dummy to suppress unused var warning
        stan::math::initialize(c, DUMMY_VAR__);
        stan::math::fill(c, DUMMY_VAR__);
        stan::math::assign(c,get_base1(hp, 3, "hp", 1));
        current_statement_begin__ = 215;
        local_scalar_t__ theta(DUMMY_VAR__);
        (void) theta;  // dummy to suppress unused var warning
        stan::math::initialize(theta, DUMMY_VAR__);
        stan::math::fill(theta, DUMMY_VAR__);
        current_statement_begin__ = 218;
        if (as_bool(logical_eq(get_base1(types, 2, "types", 1), 0))) {
            current_statement_begin__ = 219;
            stan::math::assign(lp, 0);
            current_statement_begin__ = 220;
            stan::math::assign(theta, x);
        } else if (as_bool(logical_eq(get_base1(types, 2, "types", 1), 1))) {
            current_statement_begin__ = 222;
            stan::math::assign(lp, stan::math::log(stan::math::fabs((2 * x))));
            current_statement_begin__ = 223;
            stan::math::assign(theta, square(x));
        } else {
            current_statement_begin__ = 225;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "invalid value of types[2]!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 229;
        if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 1))) {
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 2))) {
            current_statement_begin__ = 232;
            stan::math::assign(lp, (lp + normal_log(theta, a, b)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 3))) {
            current_statement_begin__ = 234;
            stan::math::assign(lp, (lp + student_t_log(theta, a, 0, b)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 4))) {
            current_statement_begin__ = 236;
            stan::math::assign(lp, (lp + gamma_log(theta, a, b)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 5))) {
            current_statement_begin__ = 238;
            stan::math::assign(lp, (lp + inv_gamma_log(theta, a, b)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 6))) {
            current_statement_begin__ = 240;
            stan::math::assign(lp, (lp + lognormal_log(theta, a, b)));
        } else {
            current_statement_begin__ = 242;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "types[1] must be an integer between 1 and 6; found =";
            errmsg_stream__ << get_base1(types, 1, "types", 1);
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 245;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_log_prior_functor__ {
    template <typename T0__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T2__>::type
    operator()(const T0__& x,
                   const std::vector<int>& types,
                   const std::vector<T2__>& hp, std::ostream* pstream__) const {
        return STAN_log_prior(x, types, hp, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_lgp : public prob_grad {
private:
        int N_tot;
        int N_cases;
        int d;
        int n;
        int LH;
        std::vector<int> D;
        std::vector<vector_d> X;
        std::vector<int> X_notnan;
        vector_d y;
        std::vector<int> y_int;
        std::vector<int> N_trials;
        std::vector<int> N_cat;
        vector_d C_hat;
        int UNCRT;
        int HMGNS;
        int F_IS_SAMPLED;
        int VERBOSE;
        int USE_VAR_MASK;
        int BACKWARDS;
        int RELATIVE;
        int SKIP_GQ;
        std::vector<std::vector<int> > t_ID;
        std::vector<std::vector<int> > t_A;
        std::vector<std::vector<int> > t_D;
        std::vector<std::vector<int> > t_CNT;
        std::vector<std::vector<int> > t_CAT;
        std::vector<std::vector<int> > t_OFS;
        std::vector<int> t_SIG;
        std::vector<int> t_PHI;
        std::vector<std::vector<int> > t_ONS;
        std::vector<std::vector<double> > p_ID;
        std::vector<std::vector<double> > p_A;
        std::vector<std::vector<double> > p_D;
        std::vector<std::vector<double> > p_CNT;
        std::vector<std::vector<double> > p_CAT;
        std::vector<std::vector<double> > p_OFS;
        std::vector<double> p_SIG;
        std::vector<double> p_PHI;
        std::vector<double> p_BET;
        std::vector<std::vector<double> > p_ONS;
        int M_max;
        std::vector<std::vector<int> > caseID_to_rows;
        std::vector<int> row_to_caseID;
        std::vector<int> caseID_nrows;
        vector_d T_observed;
        std::vector<vector_d> L_ons;
        std::vector<vector_d> U_ons;
        double DELTA;
        std::vector<double> vm_params;
        int nf;
        int sum_D;
        std::vector<matrix_d> KF;
        int DO_GEN_QUANT;
public:
    model_lgp(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_lgp(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_lgp_namespace::model_lgp";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 253;
            context__.validate_dims("data initialization", "N_tot", "int", context__.to_vec());
            N_tot = int(0);
            vals_i__ = context__.vals_i("N_tot");
            pos__ = 0;
            N_tot = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_tot", N_tot, 1);
            current_statement_begin__ = 254;
            context__.validate_dims("data initialization", "N_cases", "int", context__.to_vec());
            N_cases = int(0);
            vals_i__ = context__.vals_i("N_cases");
            pos__ = 0;
            N_cases = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_cases", N_cases, 0);
            current_statement_begin__ = 255;
            context__.validate_dims("data initialization", "d", "int", context__.to_vec());
            d = int(0);
            vals_i__ = context__.vals_i("d");
            pos__ = 0;
            d = vals_i__[pos__++];
            check_greater_or_equal(function__, "d", d, 2);
            current_statement_begin__ = 256;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 1);
            current_statement_begin__ = 257;
            context__.validate_dims("data initialization", "LH", "int", context__.to_vec());
            LH = int(0);
            vals_i__ = context__.vals_i("LH");
            pos__ = 0;
            LH = vals_i__[pos__++];
            check_greater_or_equal(function__, "LH", LH, 0);
            check_less_or_equal(function__, "LH", LH, 4);
            current_statement_begin__ = 266;
            validate_non_negative_index("D", "6", 6);
            context__.validate_dims("data initialization", "D", "int", context__.to_vec(6));
            D = std::vector<int>(6, int(0));
            vals_i__ = context__.vals_i("D");
            pos__ = 0;
            size_t D_k_0_max__ = 6;
            for (size_t k_0__ = 0; k_0__ < D_k_0_max__; ++k_0__) {
                D[k_0__] = vals_i__[pos__++];
            }
            size_t D_i_0_max__ = 6;
            for (size_t i_0__ = 0; i_0__ < D_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "D[i_0__]", D[i_0__], 0);
            }
            current_statement_begin__ = 268;
            validate_non_negative_index("X", "n", n);
            validate_non_negative_index("X", "d", d);
            context__.validate_dims("data initialization", "X", "vector_d", context__.to_vec(d,n));
            X = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(d, Eigen::Matrix<double, Eigen::Dynamic, 1>(n));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_1_max__ = n;
            size_t X_k_0_max__ = d;
            for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < X_k_0_max__; ++k_0__) {
                    X[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 269;
            validate_non_negative_index("X_notnan", "n", n);
            context__.validate_dims("data initialization", "X_notnan", "int", context__.to_vec(n));
            X_notnan = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("X_notnan");
            pos__ = 0;
            size_t X_notnan_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < X_notnan_k_0_max__; ++k_0__) {
                X_notnan[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 270;
            validate_non_negative_index("y", "n", n);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(n));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 271;
            validate_non_negative_index("y_int", "n", n);
            context__.validate_dims("data initialization", "y_int", "int", context__.to_vec(n));
            y_int = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("y_int");
            pos__ = 0;
            size_t y_int_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < y_int_k_0_max__; ++k_0__) {
                y_int[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 272;
            validate_non_negative_index("N_trials", "n", n);
            context__.validate_dims("data initialization", "N_trials", "int", context__.to_vec(n));
            N_trials = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("N_trials");
            pos__ = 0;
            size_t N_trials_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < N_trials_k_0_max__; ++k_0__) {
                N_trials[k_0__] = vals_i__[pos__++];
            }
            size_t N_trials_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < N_trials_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "N_trials[i_0__]", N_trials[i_0__], 1);
            }
            current_statement_begin__ = 273;
            validate_non_negative_index("N_cat", "((1 + get_base1(D, 5, \"D\", 1)) + get_base1(D, 6, \"D\", 1))", ((1 + get_base1(D, 5, "D", 1)) + get_base1(D, 6, "D", 1)));
            context__.validate_dims("data initialization", "N_cat", "int", context__.to_vec(((1 + get_base1(D, 5, "D", 1)) + get_base1(D, 6, "D", 1))));
            N_cat = std::vector<int>(((1 + get_base1(D, 5, "D", 1)) + get_base1(D, 6, "D", 1)), int(0));
            vals_i__ = context__.vals_i("N_cat");
            pos__ = 0;
            size_t N_cat_k_0_max__ = ((1 + get_base1(D, 5, "D", 1)) + get_base1(D, 6, "D", 1));
            for (size_t k_0__ = 0; k_0__ < N_cat_k_0_max__; ++k_0__) {
                N_cat[k_0__] = vals_i__[pos__++];
            }
            size_t N_cat_i_0_max__ = ((1 + get_base1(D, 5, "D", 1)) + get_base1(D, 6, "D", 1));
            for (size_t i_0__ = 0; i_0__ < N_cat_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "N_cat[i_0__]", N_cat[i_0__], 1);
            }
            current_statement_begin__ = 274;
            validate_non_negative_index("C_hat", "n", n);
            context__.validate_dims("data initialization", "C_hat", "vector_d", context__.to_vec(n));
            C_hat = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("C_hat");
            pos__ = 0;
            size_t C_hat_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < C_hat_j_1_max__; ++j_1__) {
                C_hat(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 277;
            context__.validate_dims("data initialization", "UNCRT", "int", context__.to_vec());
            UNCRT = int(0);
            vals_i__ = context__.vals_i("UNCRT");
            pos__ = 0;
            UNCRT = vals_i__[pos__++];
            check_greater_or_equal(function__, "UNCRT", UNCRT, 0);
            check_less_or_equal(function__, "UNCRT", UNCRT, 1);
            current_statement_begin__ = 278;
            context__.validate_dims("data initialization", "HMGNS", "int", context__.to_vec());
            HMGNS = int(0);
            vals_i__ = context__.vals_i("HMGNS");
            pos__ = 0;
            HMGNS = vals_i__[pos__++];
            check_greater_or_equal(function__, "HMGNS", HMGNS, 0);
            check_less_or_equal(function__, "HMGNS", HMGNS, 1);
            current_statement_begin__ = 279;
            context__.validate_dims("data initialization", "F_IS_SAMPLED", "int", context__.to_vec());
            F_IS_SAMPLED = int(0);
            vals_i__ = context__.vals_i("F_IS_SAMPLED");
            pos__ = 0;
            F_IS_SAMPLED = vals_i__[pos__++];
            check_greater_or_equal(function__, "F_IS_SAMPLED", F_IS_SAMPLED, 0);
            check_less_or_equal(function__, "F_IS_SAMPLED", F_IS_SAMPLED, 1);
            current_statement_begin__ = 280;
            context__.validate_dims("data initialization", "VERBOSE", "int", context__.to_vec());
            VERBOSE = int(0);
            vals_i__ = context__.vals_i("VERBOSE");
            pos__ = 0;
            VERBOSE = vals_i__[pos__++];
            check_greater_or_equal(function__, "VERBOSE", VERBOSE, 0);
            check_less_or_equal(function__, "VERBOSE", VERBOSE, 1);
            current_statement_begin__ = 281;
            context__.validate_dims("data initialization", "USE_VAR_MASK", "int", context__.to_vec());
            USE_VAR_MASK = int(0);
            vals_i__ = context__.vals_i("USE_VAR_MASK");
            pos__ = 0;
            USE_VAR_MASK = vals_i__[pos__++];
            check_greater_or_equal(function__, "USE_VAR_MASK", USE_VAR_MASK, 0);
            check_less_or_equal(function__, "USE_VAR_MASK", USE_VAR_MASK, 1);
            current_statement_begin__ = 282;
            context__.validate_dims("data initialization", "BACKWARDS", "int", context__.to_vec());
            BACKWARDS = int(0);
            vals_i__ = context__.vals_i("BACKWARDS");
            pos__ = 0;
            BACKWARDS = vals_i__[pos__++];
            check_greater_or_equal(function__, "BACKWARDS", BACKWARDS, 0);
            check_less_or_equal(function__, "BACKWARDS", BACKWARDS, 1);
            current_statement_begin__ = 283;
            context__.validate_dims("data initialization", "RELATIVE", "int", context__.to_vec());
            RELATIVE = int(0);
            vals_i__ = context__.vals_i("RELATIVE");
            pos__ = 0;
            RELATIVE = vals_i__[pos__++];
            check_greater_or_equal(function__, "RELATIVE", RELATIVE, 0);
            check_less_or_equal(function__, "RELATIVE", RELATIVE, 1);
            current_statement_begin__ = 284;
            context__.validate_dims("data initialization", "SKIP_GQ", "int", context__.to_vec());
            SKIP_GQ = int(0);
            vals_i__ = context__.vals_i("SKIP_GQ");
            pos__ = 0;
            SKIP_GQ = vals_i__[pos__++];
            check_greater_or_equal(function__, "SKIP_GQ", SKIP_GQ, 0);
            check_less_or_equal(function__, "SKIP_GQ", SKIP_GQ, 1);
            current_statement_begin__ = 287;
            validate_non_negative_index("t_ID", "get_base1(D, 1, \"D\", 1)", get_base1(D, 1, "D", 1));
            validate_non_negative_index("t_ID", "4", 4);
            context__.validate_dims("data initialization", "t_ID", "int", context__.to_vec(get_base1(D, 1, "D", 1),4));
            t_ID = std::vector<std::vector<int> >(get_base1(D, 1, "D", 1), std::vector<int>(4, int(0)));
            vals_i__ = context__.vals_i("t_ID");
            pos__ = 0;
            size_t t_ID_k_0_max__ = get_base1(D, 1, "D", 1);
            size_t t_ID_k_1_max__ = 4;
            for (size_t k_1__ = 0; k_1__ < t_ID_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < t_ID_k_0_max__; ++k_0__) {
                    t_ID[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 288;
            validate_non_negative_index("t_A", "get_base1(D, 2, \"D\", 1)", get_base1(D, 2, "D", 1));
            validate_non_negative_index("t_A", "4", 4);
            context__.validate_dims("data initialization", "t_A", "int", context__.to_vec(get_base1(D, 2, "D", 1),4));
            t_A = std::vector<std::vector<int> >(get_base1(D, 2, "D", 1), std::vector<int>(4, int(0)));
            vals_i__ = context__.vals_i("t_A");
            pos__ = 0;
            size_t t_A_k_0_max__ = get_base1(D, 2, "D", 1);
            size_t t_A_k_1_max__ = 4;
            for (size_t k_1__ = 0; k_1__ < t_A_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < t_A_k_0_max__; ++k_0__) {
                    t_A[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 289;
            validate_non_negative_index("t_D", "get_base1(D, 3, \"D\", 1)", get_base1(D, 3, "D", 1));
            validate_non_negative_index("t_D", "6", 6);
            context__.validate_dims("data initialization", "t_D", "int", context__.to_vec(get_base1(D, 3, "D", 1),6));
            t_D = std::vector<std::vector<int> >(get_base1(D, 3, "D", 1), std::vector<int>(6, int(0)));
            vals_i__ = context__.vals_i("t_D");
            pos__ = 0;
            size_t t_D_k_0_max__ = get_base1(D, 3, "D", 1);
            size_t t_D_k_1_max__ = 6;
            for (size_t k_1__ = 0; k_1__ < t_D_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < t_D_k_0_max__; ++k_0__) {
                    t_D[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 290;
            validate_non_negative_index("t_CNT", "get_base1(D, 4, \"D\", 1)", get_base1(D, 4, "D", 1));
            validate_non_negative_index("t_CNT", "4", 4);
            context__.validate_dims("data initialization", "t_CNT", "int", context__.to_vec(get_base1(D, 4, "D", 1),4));
            t_CNT = std::vector<std::vector<int> >(get_base1(D, 4, "D", 1), std::vector<int>(4, int(0)));
            vals_i__ = context__.vals_i("t_CNT");
            pos__ = 0;
            size_t t_CNT_k_0_max__ = get_base1(D, 4, "D", 1);
            size_t t_CNT_k_1_max__ = 4;
            for (size_t k_1__ = 0; k_1__ < t_CNT_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < t_CNT_k_0_max__; ++k_0__) {
                    t_CNT[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 291;
            validate_non_negative_index("t_CAT", "get_base1(D, 5, \"D\", 1)", get_base1(D, 5, "D", 1));
            validate_non_negative_index("t_CAT", "4", 4);
            context__.validate_dims("data initialization", "t_CAT", "int", context__.to_vec(get_base1(D, 5, "D", 1),4));
            t_CAT = std::vector<std::vector<int> >(get_base1(D, 5, "D", 1), std::vector<int>(4, int(0)));
            vals_i__ = context__.vals_i("t_CAT");
            pos__ = 0;
            size_t t_CAT_k_0_max__ = get_base1(D, 5, "D", 1);
            size_t t_CAT_k_1_max__ = 4;
            for (size_t k_1__ = 0; k_1__ < t_CAT_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < t_CAT_k_0_max__; ++k_0__) {
                    t_CAT[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 292;
            validate_non_negative_index("t_OFS", "get_base1(D, 6, \"D\", 1)", get_base1(D, 6, "D", 1));
            validate_non_negative_index("t_OFS", "2", 2);
            context__.validate_dims("data initialization", "t_OFS", "int", context__.to_vec(get_base1(D, 6, "D", 1),2));
            t_OFS = std::vector<std::vector<int> >(get_base1(D, 6, "D", 1), std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("t_OFS");
            pos__ = 0;
            size_t t_OFS_k_0_max__ = get_base1(D, 6, "D", 1);
            size_t t_OFS_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < t_OFS_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < t_OFS_k_0_max__; ++k_0__) {
                    t_OFS[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 293;
            validate_non_negative_index("t_SIG", "2", 2);
            context__.validate_dims("data initialization", "t_SIG", "int", context__.to_vec(2));
            t_SIG = std::vector<int>(2, int(0));
            vals_i__ = context__.vals_i("t_SIG");
            pos__ = 0;
            size_t t_SIG_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < t_SIG_k_0_max__; ++k_0__) {
                t_SIG[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 294;
            validate_non_negative_index("t_PHI", "2", 2);
            context__.validate_dims("data initialization", "t_PHI", "int", context__.to_vec(2));
            t_PHI = std::vector<int>(2, int(0));
            vals_i__ = context__.vals_i("t_PHI");
            pos__ = 0;
            size_t t_PHI_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < t_PHI_k_0_max__; ++k_0__) {
                t_PHI[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 295;
            validate_non_negative_index("t_ONS", "N_cases", N_cases);
            validate_non_negative_index("t_ONS", "2", 2);
            context__.validate_dims("data initialization", "t_ONS", "int", context__.to_vec(N_cases,2));
            t_ONS = std::vector<std::vector<int> >(N_cases, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("t_ONS");
            pos__ = 0;
            size_t t_ONS_k_0_max__ = N_cases;
            size_t t_ONS_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < t_ONS_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < t_ONS_k_0_max__; ++k_0__) {
                    t_ONS[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 298;
            validate_non_negative_index("p_ID", "get_base1(D, 1, \"D\", 1)", get_base1(D, 1, "D", 1));
            validate_non_negative_index("p_ID", "6", 6);
            context__.validate_dims("data initialization", "p_ID", "double", context__.to_vec(get_base1(D, 1, "D", 1),6));
            p_ID = std::vector<std::vector<double> >(get_base1(D, 1, "D", 1), std::vector<double>(6, double(0)));
            vals_r__ = context__.vals_r("p_ID");
            pos__ = 0;
            size_t p_ID_k_0_max__ = get_base1(D, 1, "D", 1);
            size_t p_ID_k_1_max__ = 6;
            for (size_t k_1__ = 0; k_1__ < p_ID_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < p_ID_k_0_max__; ++k_0__) {
                    p_ID[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 299;
            validate_non_negative_index("p_A", "get_base1(D, 2, \"D\", 1)", get_base1(D, 2, "D", 1));
            validate_non_negative_index("p_A", "6", 6);
            context__.validate_dims("data initialization", "p_A", "double", context__.to_vec(get_base1(D, 2, "D", 1),6));
            p_A = std::vector<std::vector<double> >(get_base1(D, 2, "D", 1), std::vector<double>(6, double(0)));
            vals_r__ = context__.vals_r("p_A");
            pos__ = 0;
            size_t p_A_k_0_max__ = get_base1(D, 2, "D", 1);
            size_t p_A_k_1_max__ = 6;
            for (size_t k_1__ = 0; k_1__ < p_A_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < p_A_k_0_max__; ++k_0__) {
                    p_A[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 300;
            validate_non_negative_index("p_D", "get_base1(D, 3, \"D\", 1)", get_base1(D, 3, "D", 1));
            validate_non_negative_index("p_D", "9", 9);
            context__.validate_dims("data initialization", "p_D", "double", context__.to_vec(get_base1(D, 3, "D", 1),9));
            p_D = std::vector<std::vector<double> >(get_base1(D, 3, "D", 1), std::vector<double>(9, double(0)));
            vals_r__ = context__.vals_r("p_D");
            pos__ = 0;
            size_t p_D_k_0_max__ = get_base1(D, 3, "D", 1);
            size_t p_D_k_1_max__ = 9;
            for (size_t k_1__ = 0; k_1__ < p_D_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < p_D_k_0_max__; ++k_0__) {
                    p_D[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 301;
            validate_non_negative_index("p_CNT", "get_base1(D, 4, \"D\", 1)", get_base1(D, 4, "D", 1));
            validate_non_negative_index("p_CNT", "6", 6);
            context__.validate_dims("data initialization", "p_CNT", "double", context__.to_vec(get_base1(D, 4, "D", 1),6));
            p_CNT = std::vector<std::vector<double> >(get_base1(D, 4, "D", 1), std::vector<double>(6, double(0)));
            vals_r__ = context__.vals_r("p_CNT");
            pos__ = 0;
            size_t p_CNT_k_0_max__ = get_base1(D, 4, "D", 1);
            size_t p_CNT_k_1_max__ = 6;
            for (size_t k_1__ = 0; k_1__ < p_CNT_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < p_CNT_k_0_max__; ++k_0__) {
                    p_CNT[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 302;
            validate_non_negative_index("p_CAT", "get_base1(D, 5, \"D\", 1)", get_base1(D, 5, "D", 1));
            validate_non_negative_index("p_CAT", "6", 6);
            context__.validate_dims("data initialization", "p_CAT", "double", context__.to_vec(get_base1(D, 5, "D", 1),6));
            p_CAT = std::vector<std::vector<double> >(get_base1(D, 5, "D", 1), std::vector<double>(6, double(0)));
            vals_r__ = context__.vals_r("p_CAT");
            pos__ = 0;
            size_t p_CAT_k_0_max__ = get_base1(D, 5, "D", 1);
            size_t p_CAT_k_1_max__ = 6;
            for (size_t k_1__ = 0; k_1__ < p_CAT_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < p_CAT_k_0_max__; ++k_0__) {
                    p_CAT[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 303;
            validate_non_negative_index("p_OFS", "get_base1(D, 6, \"D\", 1)", get_base1(D, 6, "D", 1));
            validate_non_negative_index("p_OFS", "3", 3);
            context__.validate_dims("data initialization", "p_OFS", "double", context__.to_vec(get_base1(D, 6, "D", 1),3));
            p_OFS = std::vector<std::vector<double> >(get_base1(D, 6, "D", 1), std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("p_OFS");
            pos__ = 0;
            size_t p_OFS_k_0_max__ = get_base1(D, 6, "D", 1);
            size_t p_OFS_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < p_OFS_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < p_OFS_k_0_max__; ++k_0__) {
                    p_OFS[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 304;
            validate_non_negative_index("p_SIG", "3", 3);
            context__.validate_dims("data initialization", "p_SIG", "double", context__.to_vec(3));
            p_SIG = std::vector<double>(3, double(0));
            vals_r__ = context__.vals_r("p_SIG");
            pos__ = 0;
            size_t p_SIG_k_0_max__ = 3;
            for (size_t k_0__ = 0; k_0__ < p_SIG_k_0_max__; ++k_0__) {
                p_SIG[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 305;
            validate_non_negative_index("p_PHI", "3", 3);
            context__.validate_dims("data initialization", "p_PHI", "double", context__.to_vec(3));
            p_PHI = std::vector<double>(3, double(0));
            vals_r__ = context__.vals_r("p_PHI");
            pos__ = 0;
            size_t p_PHI_k_0_max__ = 3;
            for (size_t k_0__ = 0; k_0__ < p_PHI_k_0_max__; ++k_0__) {
                p_PHI[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 306;
            validate_non_negative_index("p_BET", "2", 2);
            context__.validate_dims("data initialization", "p_BET", "double", context__.to_vec(2));
            p_BET = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("p_BET");
            pos__ = 0;
            size_t p_BET_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < p_BET_k_0_max__; ++k_0__) {
                p_BET[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 307;
            validate_non_negative_index("p_ONS", "N_cases", N_cases);
            validate_non_negative_index("p_ONS", "3", 3);
            context__.validate_dims("data initialization", "p_ONS", "double", context__.to_vec(N_cases,3));
            p_ONS = std::vector<std::vector<double> >(N_cases, std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("p_ONS");
            pos__ = 0;
            size_t p_ONS_k_0_max__ = N_cases;
            size_t p_ONS_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < p_ONS_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < p_ONS_k_0_max__; ++k_0__) {
                    p_ONS[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 310;
            context__.validate_dims("data initialization", "M_max", "int", context__.to_vec());
            M_max = int(0);
            vals_i__ = context__.vals_i("M_max");
            pos__ = 0;
            M_max = vals_i__[pos__++];
            check_greater_or_equal(function__, "M_max", M_max, 0);
            check_less_or_equal(function__, "M_max", M_max, n);
            current_statement_begin__ = 311;
            validate_non_negative_index("caseID_to_rows", "N_cases", N_cases);
            validate_non_negative_index("caseID_to_rows", "M_max", M_max);
            context__.validate_dims("data initialization", "caseID_to_rows", "int", context__.to_vec(N_cases,M_max));
            caseID_to_rows = std::vector<std::vector<int> >(N_cases, std::vector<int>(M_max, int(0)));
            vals_i__ = context__.vals_i("caseID_to_rows");
            pos__ = 0;
            size_t caseID_to_rows_k_0_max__ = N_cases;
            size_t caseID_to_rows_k_1_max__ = M_max;
            for (size_t k_1__ = 0; k_1__ < caseID_to_rows_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < caseID_to_rows_k_0_max__; ++k_0__) {
                    caseID_to_rows[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t caseID_to_rows_i_0_max__ = N_cases;
            size_t caseID_to_rows_i_1_max__ = M_max;
            for (size_t i_0__ = 0; i_0__ < caseID_to_rows_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < caseID_to_rows_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "caseID_to_rows[i_0__][i_1__]", caseID_to_rows[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 312;
            validate_non_negative_index("row_to_caseID", "n", n);
            context__.validate_dims("data initialization", "row_to_caseID", "int", context__.to_vec(n));
            row_to_caseID = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("row_to_caseID");
            pos__ = 0;
            size_t row_to_caseID_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < row_to_caseID_k_0_max__; ++k_0__) {
                row_to_caseID[k_0__] = vals_i__[pos__++];
            }
            size_t row_to_caseID_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < row_to_caseID_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "row_to_caseID[i_0__]", row_to_caseID[i_0__], 0);
                check_less_or_equal(function__, "row_to_caseID[i_0__]", row_to_caseID[i_0__], N_cases);
            }
            current_statement_begin__ = 313;
            validate_non_negative_index("caseID_nrows", "N_cases", N_cases);
            context__.validate_dims("data initialization", "caseID_nrows", "int", context__.to_vec(N_cases));
            caseID_nrows = std::vector<int>(N_cases, int(0));
            vals_i__ = context__.vals_i("caseID_nrows");
            pos__ = 0;
            size_t caseID_nrows_k_0_max__ = N_cases;
            for (size_t k_0__ = 0; k_0__ < caseID_nrows_k_0_max__; ++k_0__) {
                caseID_nrows[k_0__] = vals_i__[pos__++];
            }
            size_t caseID_nrows_i_0_max__ = N_cases;
            for (size_t i_0__ = 0; i_0__ < caseID_nrows_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "caseID_nrows[i_0__]", caseID_nrows[i_0__], 0);
                check_less_or_equal(function__, "caseID_nrows[i_0__]", caseID_nrows[i_0__], M_max);
            }
            current_statement_begin__ = 316;
            validate_non_negative_index("T_observed", "N_cases", N_cases);
            context__.validate_dims("data initialization", "T_observed", "vector_d", context__.to_vec(N_cases));
            T_observed = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_cases);
            vals_r__ = context__.vals_r("T_observed");
            pos__ = 0;
            size_t T_observed_j_1_max__ = N_cases;
            for (size_t j_1__ = 0; j_1__ < T_observed_j_1_max__; ++j_1__) {
                T_observed(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 317;
            validate_non_negative_index("L_ons", "N_cases", N_cases);
            validate_non_negative_index("L_ons", "UNCRT", UNCRT);
            context__.validate_dims("data initialization", "L_ons", "vector_d", context__.to_vec(UNCRT,N_cases));
            L_ons = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(UNCRT, Eigen::Matrix<double, Eigen::Dynamic, 1>(N_cases));
            vals_r__ = context__.vals_r("L_ons");
            pos__ = 0;
            size_t L_ons_j_1_max__ = N_cases;
            size_t L_ons_k_0_max__ = UNCRT;
            for (size_t j_1__ = 0; j_1__ < L_ons_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < L_ons_k_0_max__; ++k_0__) {
                    L_ons[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 318;
            validate_non_negative_index("U_ons", "N_cases", N_cases);
            validate_non_negative_index("U_ons", "UNCRT", UNCRT);
            context__.validate_dims("data initialization", "U_ons", "vector_d", context__.to_vec(UNCRT,N_cases));
            U_ons = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(UNCRT, Eigen::Matrix<double, Eigen::Dynamic, 1>(N_cases));
            vals_r__ = context__.vals_r("U_ons");
            pos__ = 0;
            size_t U_ons_j_1_max__ = N_cases;
            size_t U_ons_k_0_max__ = UNCRT;
            for (size_t j_1__ = 0; j_1__ < U_ons_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < U_ons_k_0_max__; ++k_0__) {
                    U_ons[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 321;
            context__.validate_dims("data initialization", "DELTA", "double", context__.to_vec());
            DELTA = double(0);
            vals_r__ = context__.vals_r("DELTA");
            pos__ = 0;
            DELTA = vals_r__[pos__++];
            current_statement_begin__ = 322;
            validate_non_negative_index("vm_params", "2", 2);
            context__.validate_dims("data initialization", "vm_params", "double", context__.to_vec(2));
            vm_params = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("vm_params");
            pos__ = 0;
            size_t vm_params_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < vm_params_k_0_max__; ++k_0__) {
                vm_params[k_0__] = vals_r__[pos__++];
            }
            // initialize transformed data variables
            current_statement_begin__ = 328;
            nf = int(0);
            stan::math::fill(nf, std::numeric_limits<int>::min());
            stan::math::assign(nf,(((1 + get_base1(D, 3, "D", 1)) + get_base1(D, 5, "D", 1)) + get_base1(D, 6, "D", 1)));
            current_statement_begin__ = 329;
            sum_D = int(0);
            stan::math::fill(sum_D, std::numeric_limits<int>::min());
            stan::math::assign(sum_D,sum(D));
            current_statement_begin__ = 330;
            validate_non_negative_index("KF", "n", n);
            validate_non_negative_index("KF", "n", n);
            validate_non_negative_index("KF", "nf", nf);
            KF = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(nf, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, n));
            stan::math::fill(KF, DUMMY_VAR__);
            stan::math::assign(KF,STAN_kernels_fixed(X, X_notnan, D, N_tot, N_cat, pstream__));
            current_statement_begin__ = 331;
            DO_GEN_QUANT = int(0);
            stan::math::fill(DO_GEN_QUANT, std::numeric_limits<int>::min());
            stan::math::assign(DO_GEN_QUANT,((1 - F_IS_SAMPLED) * (1 - SKIP_GQ)));
            // execute transformed data statements
            current_statement_begin__ = 333;
            if (as_bool(logical_eq(VERBOSE, 1))) {
                current_statement_begin__ = 334;
                if (pstream__) {
                    stan_print(pstream__," ");
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 335;
                if (pstream__) {
                    stan_print(pstream__,"* Number of data points = ");
                    stan_print(pstream__,n);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 336;
                if (pstream__) {
                    stan_print(pstream__,"* Number of model components = ");
                    stan_print(pstream__,sum_D);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 337;
                if (pstream__) {
                    stan_print(pstream__,"* Number of individuals = ");
                    stan_print(pstream__,N_tot);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 338;
                if (pstream__) {
                    stan_print(pstream__,"* Additional model info:");
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 339;
                if (pstream__) {
                    stan_print(pstream__,"  - LH = ");
                    stan_print(pstream__,LH);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 340;
                if (pstream__) {
                    stan_print(pstream__,"  - D = ");
                    stan_print(pstream__,D);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 341;
                if (pstream__) {
                    stan_print(pstream__,"  - F_IS_SAMPLED = ");
                    stan_print(pstream__,F_IS_SAMPLED);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 342;
                if (as_bool(logical_eq(get_base1(D, 3, "D", 1), 1))) {
                    current_statement_begin__ = 343;
                    if (pstream__) {
                        stan_print(pstream__,"* Disease modeling info: ");
                        *pstream__ << std::endl;
                    }
                    current_statement_begin__ = 344;
                    if (pstream__) {
                        stan_print(pstream__,"  - Number of cases = ");
                        stan_print(pstream__,N_cases);
                        *pstream__ << std::endl;
                    }
                    current_statement_begin__ = 345;
                    if (pstream__) {
                        stan_print(pstream__,"  - UNCRT = ");
                        stan_print(pstream__,UNCRT);
                        *pstream__ << std::endl;
                    }
                    current_statement_begin__ = 346;
                    if (pstream__) {
                        stan_print(pstream__,"  - HMGNS = ");
                        stan_print(pstream__,HMGNS);
                        *pstream__ << std::endl;
                    }
                    current_statement_begin__ = 347;
                    if (pstream__) {
                        stan_print(pstream__,"  - USE_VAR_MASK = ");
                        stan_print(pstream__,USE_VAR_MASK);
                        *pstream__ << std::endl;
                    }
                    current_statement_begin__ = 348;
                    if (as_bool(logical_eq(USE_VAR_MASK, 1))) {
                        current_statement_begin__ = 349;
                        if (pstream__) {
                            stan_print(pstream__,"      o vm_params = ");
                            stan_print(pstream__,vm_params);
                            *pstream__ << std::endl;
                        }
                    }
                }
                current_statement_begin__ = 352;
                if (pstream__) {
                    stan_print(pstream__," ");
                    *pstream__ << std::endl;
                }
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 360;
            validate_non_negative_index("alpha_idAge", "get_base1(D, 1, \"D\", 1)", get_base1(D, 1, "D", 1));
            num_params_r__ += (1 * get_base1(D, 1, "D", 1));
            current_statement_begin__ = 361;
            validate_non_negative_index("alpha_sharedAge", "get_base1(D, 2, \"D\", 1)", get_base1(D, 2, "D", 1));
            num_params_r__ += (1 * get_base1(D, 2, "D", 1));
            current_statement_begin__ = 362;
            validate_non_negative_index("alpha_diseaseAge", "get_base1(D, 3, \"D\", 1)", get_base1(D, 3, "D", 1));
            num_params_r__ += (1 * get_base1(D, 3, "D", 1));
            current_statement_begin__ = 363;
            validate_non_negative_index("alpha_continuous", "get_base1(D, 4, \"D\", 1)", get_base1(D, 4, "D", 1));
            num_params_r__ += (1 * get_base1(D, 4, "D", 1));
            current_statement_begin__ = 364;
            validate_non_negative_index("alpha_categAge", "get_base1(D, 5, \"D\", 1)", get_base1(D, 5, "D", 1));
            num_params_r__ += (1 * get_base1(D, 5, "D", 1));
            current_statement_begin__ = 365;
            validate_non_negative_index("alpha_categOffset", "get_base1(D, 6, \"D\", 1)", get_base1(D, 6, "D", 1));
            num_params_r__ += (1 * get_base1(D, 6, "D", 1));
            current_statement_begin__ = 368;
            validate_non_negative_index("ell_idAge", "get_base1(D, 1, \"D\", 1)", get_base1(D, 1, "D", 1));
            num_params_r__ += (1 * get_base1(D, 1, "D", 1));
            current_statement_begin__ = 369;
            validate_non_negative_index("ell_sharedAge", "get_base1(D, 2, \"D\", 1)", get_base1(D, 2, "D", 1));
            num_params_r__ += (1 * get_base1(D, 2, "D", 1));
            current_statement_begin__ = 370;
            validate_non_negative_index("ell_diseaseAge", "get_base1(D, 3, \"D\", 1)", get_base1(D, 3, "D", 1));
            num_params_r__ += (1 * get_base1(D, 3, "D", 1));
            current_statement_begin__ = 371;
            validate_non_negative_index("ell_continuous", "get_base1(D, 4, \"D\", 1)", get_base1(D, 4, "D", 1));
            num_params_r__ += (1 * get_base1(D, 4, "D", 1));
            current_statement_begin__ = 372;
            validate_non_negative_index("ell_categAge", "get_base1(D, 5, \"D\", 1)", get_base1(D, 5, "D", 1));
            num_params_r__ += (1 * get_base1(D, 5, "D", 1));
            current_statement_begin__ = 375;
            validate_non_negative_index("warp_steepness", "get_base1(D, 3, \"D\", 1)", get_base1(D, 3, "D", 1));
            num_params_r__ += (1 * get_base1(D, 3, "D", 1));
            current_statement_begin__ = 376;
            validate_non_negative_index("sigma_n", "(primitive_value(logical_eq(LH, 1)) || primitive_value(logical_eq(LH, 0)))", (primitive_value(logical_eq(LH, 1)) || primitive_value(logical_eq(LH, 0))));
            num_params_r__ += (1 * (primitive_value(logical_eq(LH, 1)) || primitive_value(logical_eq(LH, 0))));
            current_statement_begin__ = 377;
            validate_non_negative_index("ETA", "n", n);
            validate_non_negative_index("ETA", "F_IS_SAMPLED", F_IS_SAMPLED);
            validate_non_negative_index("ETA", "sum_D", sum_D);
            num_params_r__ += ((n * F_IS_SAMPLED) * sum_D);
            current_statement_begin__ = 378;
            validate_non_negative_index("phi", "(primitive_value(logical_eq(LH, 3)) || primitive_value(logical_eq(LH, 0)))", (primitive_value(logical_eq(LH, 3)) || primitive_value(logical_eq(LH, 0))));
            num_params_r__ += (1 * (primitive_value(logical_eq(LH, 3)) || primitive_value(logical_eq(LH, 0))));
            current_statement_begin__ = 381;
            validate_non_negative_index("beta", "N_cases", N_cases);
            validate_non_negative_index("beta", "logical_eq(HMGNS, 0)", logical_eq(HMGNS, 0));
            num_params_r__ += (N_cases * logical_eq(HMGNS, 0));
            current_statement_begin__ = 382;
            validate_non_negative_index("T_raw", "N_cases", N_cases);
            validate_non_negative_index("T_raw", "logical_eq(UNCRT, 1)", logical_eq(UNCRT, 1));
            num_params_r__ += (N_cases * logical_eq(UNCRT, 1));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_lgp() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 360;
        if (!(context__.contains_r("alpha_idAge")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_idAge missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_idAge");
        pos__ = 0U;
        validate_non_negative_index("alpha_idAge", "get_base1(D, 1, \"D\", 1)", get_base1(D, 1, "D", 1));
        context__.validate_dims("parameter initialization", "alpha_idAge", "double", context__.to_vec(get_base1(D, 1, "D", 1)));
        std::vector<double> alpha_idAge(get_base1(D, 1, "D", 1), double(0));
        size_t alpha_idAge_k_0_max__ = get_base1(D, 1, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_idAge_k_0_max__; ++k_0__) {
            alpha_idAge[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_idAge_i_0_max__ = get_base1(D, 1, "D", 1);
        for (size_t i_0__ = 0; i_0__ < alpha_idAge_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, alpha_idAge[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_idAge: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 361;
        if (!(context__.contains_r("alpha_sharedAge")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_sharedAge missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_sharedAge");
        pos__ = 0U;
        validate_non_negative_index("alpha_sharedAge", "get_base1(D, 2, \"D\", 1)", get_base1(D, 2, "D", 1));
        context__.validate_dims("parameter initialization", "alpha_sharedAge", "double", context__.to_vec(get_base1(D, 2, "D", 1)));
        std::vector<double> alpha_sharedAge(get_base1(D, 2, "D", 1), double(0));
        size_t alpha_sharedAge_k_0_max__ = get_base1(D, 2, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_sharedAge_k_0_max__; ++k_0__) {
            alpha_sharedAge[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_sharedAge_i_0_max__ = get_base1(D, 2, "D", 1);
        for (size_t i_0__ = 0; i_0__ < alpha_sharedAge_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, alpha_sharedAge[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_sharedAge: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 362;
        if (!(context__.contains_r("alpha_diseaseAge")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_diseaseAge missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_diseaseAge");
        pos__ = 0U;
        validate_non_negative_index("alpha_diseaseAge", "get_base1(D, 3, \"D\", 1)", get_base1(D, 3, "D", 1));
        context__.validate_dims("parameter initialization", "alpha_diseaseAge", "double", context__.to_vec(get_base1(D, 3, "D", 1)));
        std::vector<double> alpha_diseaseAge(get_base1(D, 3, "D", 1), double(0));
        size_t alpha_diseaseAge_k_0_max__ = get_base1(D, 3, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_diseaseAge_k_0_max__; ++k_0__) {
            alpha_diseaseAge[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_diseaseAge_i_0_max__ = get_base1(D, 3, "D", 1);
        for (size_t i_0__ = 0; i_0__ < alpha_diseaseAge_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, alpha_diseaseAge[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_diseaseAge: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 363;
        if (!(context__.contains_r("alpha_continuous")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_continuous missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_continuous");
        pos__ = 0U;
        validate_non_negative_index("alpha_continuous", "get_base1(D, 4, \"D\", 1)", get_base1(D, 4, "D", 1));
        context__.validate_dims("parameter initialization", "alpha_continuous", "double", context__.to_vec(get_base1(D, 4, "D", 1)));
        std::vector<double> alpha_continuous(get_base1(D, 4, "D", 1), double(0));
        size_t alpha_continuous_k_0_max__ = get_base1(D, 4, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_continuous_k_0_max__; ++k_0__) {
            alpha_continuous[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_continuous_i_0_max__ = get_base1(D, 4, "D", 1);
        for (size_t i_0__ = 0; i_0__ < alpha_continuous_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, alpha_continuous[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_continuous: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 364;
        if (!(context__.contains_r("alpha_categAge")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_categAge missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_categAge");
        pos__ = 0U;
        validate_non_negative_index("alpha_categAge", "get_base1(D, 5, \"D\", 1)", get_base1(D, 5, "D", 1));
        context__.validate_dims("parameter initialization", "alpha_categAge", "double", context__.to_vec(get_base1(D, 5, "D", 1)));
        std::vector<double> alpha_categAge(get_base1(D, 5, "D", 1), double(0));
        size_t alpha_categAge_k_0_max__ = get_base1(D, 5, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_categAge_k_0_max__; ++k_0__) {
            alpha_categAge[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_categAge_i_0_max__ = get_base1(D, 5, "D", 1);
        for (size_t i_0__ = 0; i_0__ < alpha_categAge_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, alpha_categAge[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_categAge: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 365;
        if (!(context__.contains_r("alpha_categOffset")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_categOffset missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_categOffset");
        pos__ = 0U;
        validate_non_negative_index("alpha_categOffset", "get_base1(D, 6, \"D\", 1)", get_base1(D, 6, "D", 1));
        context__.validate_dims("parameter initialization", "alpha_categOffset", "double", context__.to_vec(get_base1(D, 6, "D", 1)));
        std::vector<double> alpha_categOffset(get_base1(D, 6, "D", 1), double(0));
        size_t alpha_categOffset_k_0_max__ = get_base1(D, 6, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_categOffset_k_0_max__; ++k_0__) {
            alpha_categOffset[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_categOffset_i_0_max__ = get_base1(D, 6, "D", 1);
        for (size_t i_0__ = 0; i_0__ < alpha_categOffset_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, alpha_categOffset[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_categOffset: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 368;
        if (!(context__.contains_r("ell_idAge")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ell_idAge missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ell_idAge");
        pos__ = 0U;
        validate_non_negative_index("ell_idAge", "get_base1(D, 1, \"D\", 1)", get_base1(D, 1, "D", 1));
        context__.validate_dims("parameter initialization", "ell_idAge", "double", context__.to_vec(get_base1(D, 1, "D", 1)));
        std::vector<double> ell_idAge(get_base1(D, 1, "D", 1), double(0));
        size_t ell_idAge_k_0_max__ = get_base1(D, 1, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_idAge_k_0_max__; ++k_0__) {
            ell_idAge[k_0__] = vals_r__[pos__++];
        }
        size_t ell_idAge_i_0_max__ = get_base1(D, 1, "D", 1);
        for (size_t i_0__ = 0; i_0__ < ell_idAge_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, ell_idAge[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ell_idAge: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 369;
        if (!(context__.contains_r("ell_sharedAge")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ell_sharedAge missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ell_sharedAge");
        pos__ = 0U;
        validate_non_negative_index("ell_sharedAge", "get_base1(D, 2, \"D\", 1)", get_base1(D, 2, "D", 1));
        context__.validate_dims("parameter initialization", "ell_sharedAge", "double", context__.to_vec(get_base1(D, 2, "D", 1)));
        std::vector<double> ell_sharedAge(get_base1(D, 2, "D", 1), double(0));
        size_t ell_sharedAge_k_0_max__ = get_base1(D, 2, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_sharedAge_k_0_max__; ++k_0__) {
            ell_sharedAge[k_0__] = vals_r__[pos__++];
        }
        size_t ell_sharedAge_i_0_max__ = get_base1(D, 2, "D", 1);
        for (size_t i_0__ = 0; i_0__ < ell_sharedAge_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, ell_sharedAge[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ell_sharedAge: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 370;
        if (!(context__.contains_r("ell_diseaseAge")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ell_diseaseAge missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ell_diseaseAge");
        pos__ = 0U;
        validate_non_negative_index("ell_diseaseAge", "get_base1(D, 3, \"D\", 1)", get_base1(D, 3, "D", 1));
        context__.validate_dims("parameter initialization", "ell_diseaseAge", "double", context__.to_vec(get_base1(D, 3, "D", 1)));
        std::vector<double> ell_diseaseAge(get_base1(D, 3, "D", 1), double(0));
        size_t ell_diseaseAge_k_0_max__ = get_base1(D, 3, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_diseaseAge_k_0_max__; ++k_0__) {
            ell_diseaseAge[k_0__] = vals_r__[pos__++];
        }
        size_t ell_diseaseAge_i_0_max__ = get_base1(D, 3, "D", 1);
        for (size_t i_0__ = 0; i_0__ < ell_diseaseAge_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, ell_diseaseAge[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ell_diseaseAge: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 371;
        if (!(context__.contains_r("ell_continuous")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ell_continuous missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ell_continuous");
        pos__ = 0U;
        validate_non_negative_index("ell_continuous", "get_base1(D, 4, \"D\", 1)", get_base1(D, 4, "D", 1));
        context__.validate_dims("parameter initialization", "ell_continuous", "double", context__.to_vec(get_base1(D, 4, "D", 1)));
        std::vector<double> ell_continuous(get_base1(D, 4, "D", 1), double(0));
        size_t ell_continuous_k_0_max__ = get_base1(D, 4, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_continuous_k_0_max__; ++k_0__) {
            ell_continuous[k_0__] = vals_r__[pos__++];
        }
        size_t ell_continuous_i_0_max__ = get_base1(D, 4, "D", 1);
        for (size_t i_0__ = 0; i_0__ < ell_continuous_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, ell_continuous[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ell_continuous: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 372;
        if (!(context__.contains_r("ell_categAge")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ell_categAge missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ell_categAge");
        pos__ = 0U;
        validate_non_negative_index("ell_categAge", "get_base1(D, 5, \"D\", 1)", get_base1(D, 5, "D", 1));
        context__.validate_dims("parameter initialization", "ell_categAge", "double", context__.to_vec(get_base1(D, 5, "D", 1)));
        std::vector<double> ell_categAge(get_base1(D, 5, "D", 1), double(0));
        size_t ell_categAge_k_0_max__ = get_base1(D, 5, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_categAge_k_0_max__; ++k_0__) {
            ell_categAge[k_0__] = vals_r__[pos__++];
        }
        size_t ell_categAge_i_0_max__ = get_base1(D, 5, "D", 1);
        for (size_t i_0__ = 0; i_0__ < ell_categAge_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, ell_categAge[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ell_categAge: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 375;
        if (!(context__.contains_r("warp_steepness")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable warp_steepness missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("warp_steepness");
        pos__ = 0U;
        validate_non_negative_index("warp_steepness", "get_base1(D, 3, \"D\", 1)", get_base1(D, 3, "D", 1));
        context__.validate_dims("parameter initialization", "warp_steepness", "double", context__.to_vec(get_base1(D, 3, "D", 1)));
        std::vector<double> warp_steepness(get_base1(D, 3, "D", 1), double(0));
        size_t warp_steepness_k_0_max__ = get_base1(D, 3, "D", 1);
        for (size_t k_0__ = 0; k_0__ < warp_steepness_k_0_max__; ++k_0__) {
            warp_steepness[k_0__] = vals_r__[pos__++];
        }
        size_t warp_steepness_i_0_max__ = get_base1(D, 3, "D", 1);
        for (size_t i_0__ = 0; i_0__ < warp_steepness_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, warp_steepness[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable warp_steepness: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 376;
        if (!(context__.contains_r("sigma_n")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_n missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_n");
        pos__ = 0U;
        validate_non_negative_index("sigma_n", "(primitive_value(logical_eq(LH, 1)) || primitive_value(logical_eq(LH, 0)))", (primitive_value(logical_eq(LH, 1)) || primitive_value(logical_eq(LH, 0))));
        context__.validate_dims("parameter initialization", "sigma_n", "double", context__.to_vec((primitive_value(logical_eq(LH, 1)) || primitive_value(logical_eq(LH, 0)))));
        std::vector<double> sigma_n((primitive_value(logical_eq(LH, 1)) || primitive_value(logical_eq(LH, 0))), double(0));
        size_t sigma_n_k_0_max__ = (primitive_value(logical_eq(LH, 1)) || primitive_value(logical_eq(LH, 0)));
        for (size_t k_0__ = 0; k_0__ < sigma_n_k_0_max__; ++k_0__) {
            sigma_n[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_n_i_0_max__ = (primitive_value(logical_eq(LH, 1)) || primitive_value(logical_eq(LH, 0)));
        for (size_t i_0__ = 0; i_0__ < sigma_n_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma_n[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_n: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 377;
        if (!(context__.contains_r("ETA")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ETA missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ETA");
        pos__ = 0U;
        validate_non_negative_index("ETA", "n", n);
        validate_non_negative_index("ETA", "F_IS_SAMPLED", F_IS_SAMPLED);
        validate_non_negative_index("ETA", "sum_D", sum_D);
        context__.validate_dims("parameter initialization", "ETA", "vector_d", context__.to_vec(F_IS_SAMPLED,sum_D,n));
        std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > ETA(F_IS_SAMPLED, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(sum_D, Eigen::Matrix<double, Eigen::Dynamic, 1>(n)));
        size_t ETA_j_1_max__ = n;
        size_t ETA_k_0_max__ = F_IS_SAMPLED;
        size_t ETA_k_1_max__ = sum_D;
        for (size_t j_1__ = 0; j_1__ < ETA_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < ETA_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < ETA_k_0_max__; ++k_0__) {
                    ETA[k_0__][k_1__](j_1__) = vals_r__[pos__++];
                }
            }
        }
        size_t ETA_i_0_max__ = F_IS_SAMPLED;
        size_t ETA_i_1_max__ = sum_D;
        for (size_t i_0__ = 0; i_0__ < ETA_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < ETA_i_1_max__; ++i_1__) {
                try {
                    writer__.vector_unconstrain(ETA[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ETA: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 378;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "(primitive_value(logical_eq(LH, 3)) || primitive_value(logical_eq(LH, 0)))", (primitive_value(logical_eq(LH, 3)) || primitive_value(logical_eq(LH, 0))));
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec((primitive_value(logical_eq(LH, 3)) || primitive_value(logical_eq(LH, 0)))));
        std::vector<double> phi((primitive_value(logical_eq(LH, 3)) || primitive_value(logical_eq(LH, 0))), double(0));
        size_t phi_k_0_max__ = (primitive_value(logical_eq(LH, 3)) || primitive_value(logical_eq(LH, 0)));
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            phi[k_0__] = vals_r__[pos__++];
        }
        size_t phi_i_0_max__ = (primitive_value(logical_eq(LH, 3)) || primitive_value(logical_eq(LH, 0)));
        for (size_t i_0__ = 0; i_0__ < phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 381;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "N_cases", N_cases);
        validate_non_negative_index("beta", "logical_eq(HMGNS, 0)", logical_eq(HMGNS, 0));
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(logical_eq(HMGNS, 0),N_cases));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta(logical_eq(HMGNS, 0), Eigen::Matrix<double, Eigen::Dynamic, 1>(N_cases));
        size_t beta_j_1_max__ = N_cases;
        size_t beta_k_0_max__ = logical_eq(HMGNS, 0);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                beta[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t beta_i_0_max__ = logical_eq(HMGNS, 0);
        for (size_t i_0__ = 0; i_0__ < beta_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lub_unconstrain(0, 1, beta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 382;
        if (!(context__.contains_r("T_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable T_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("T_raw");
        pos__ = 0U;
        validate_non_negative_index("T_raw", "N_cases", N_cases);
        validate_non_negative_index("T_raw", "logical_eq(UNCRT, 1)", logical_eq(UNCRT, 1));
        context__.validate_dims("parameter initialization", "T_raw", "vector_d", context__.to_vec(logical_eq(UNCRT, 1),N_cases));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > T_raw(logical_eq(UNCRT, 1), Eigen::Matrix<double, Eigen::Dynamic, 1>(N_cases));
        size_t T_raw_j_1_max__ = N_cases;
        size_t T_raw_k_0_max__ = logical_eq(UNCRT, 1);
        for (size_t j_1__ = 0; j_1__ < T_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < T_raw_k_0_max__; ++k_0__) {
                T_raw[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t T_raw_i_0_max__ = logical_eq(UNCRT, 1);
        for (size_t i_0__ = 0; i_0__ < T_raw_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lub_unconstrain(0, 1, T_raw[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable T_raw: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 360;
            std::vector<local_scalar_t__> alpha_idAge;
            size_t alpha_idAge_d_0_max__ = get_base1(D, 1, "D", 1);
            alpha_idAge.reserve(alpha_idAge_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_idAge_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha_idAge.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    alpha_idAge.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 361;
            std::vector<local_scalar_t__> alpha_sharedAge;
            size_t alpha_sharedAge_d_0_max__ = get_base1(D, 2, "D", 1);
            alpha_sharedAge.reserve(alpha_sharedAge_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_sharedAge_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha_sharedAge.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    alpha_sharedAge.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 362;
            std::vector<local_scalar_t__> alpha_diseaseAge;
            size_t alpha_diseaseAge_d_0_max__ = get_base1(D, 3, "D", 1);
            alpha_diseaseAge.reserve(alpha_diseaseAge_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_diseaseAge_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha_diseaseAge.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    alpha_diseaseAge.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 363;
            std::vector<local_scalar_t__> alpha_continuous;
            size_t alpha_continuous_d_0_max__ = get_base1(D, 4, "D", 1);
            alpha_continuous.reserve(alpha_continuous_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_continuous_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha_continuous.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    alpha_continuous.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 364;
            std::vector<local_scalar_t__> alpha_categAge;
            size_t alpha_categAge_d_0_max__ = get_base1(D, 5, "D", 1);
            alpha_categAge.reserve(alpha_categAge_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_categAge_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha_categAge.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    alpha_categAge.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 365;
            std::vector<local_scalar_t__> alpha_categOffset;
            size_t alpha_categOffset_d_0_max__ = get_base1(D, 6, "D", 1);
            alpha_categOffset.reserve(alpha_categOffset_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_categOffset_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha_categOffset.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    alpha_categOffset.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 368;
            std::vector<local_scalar_t__> ell_idAge;
            size_t ell_idAge_d_0_max__ = get_base1(D, 1, "D", 1);
            ell_idAge.reserve(ell_idAge_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ell_idAge_d_0_max__; ++d_0__) {
                if (jacobian__)
                    ell_idAge.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    ell_idAge.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 369;
            std::vector<local_scalar_t__> ell_sharedAge;
            size_t ell_sharedAge_d_0_max__ = get_base1(D, 2, "D", 1);
            ell_sharedAge.reserve(ell_sharedAge_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ell_sharedAge_d_0_max__; ++d_0__) {
                if (jacobian__)
                    ell_sharedAge.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    ell_sharedAge.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 370;
            std::vector<local_scalar_t__> ell_diseaseAge;
            size_t ell_diseaseAge_d_0_max__ = get_base1(D, 3, "D", 1);
            ell_diseaseAge.reserve(ell_diseaseAge_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ell_diseaseAge_d_0_max__; ++d_0__) {
                if (jacobian__)
                    ell_diseaseAge.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    ell_diseaseAge.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 371;
            std::vector<local_scalar_t__> ell_continuous;
            size_t ell_continuous_d_0_max__ = get_base1(D, 4, "D", 1);
            ell_continuous.reserve(ell_continuous_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ell_continuous_d_0_max__; ++d_0__) {
                if (jacobian__)
                    ell_continuous.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    ell_continuous.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 372;
            std::vector<local_scalar_t__> ell_categAge;
            size_t ell_categAge_d_0_max__ = get_base1(D, 5, "D", 1);
            ell_categAge.reserve(ell_categAge_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ell_categAge_d_0_max__; ++d_0__) {
                if (jacobian__)
                    ell_categAge.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    ell_categAge.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 375;
            std::vector<local_scalar_t__> warp_steepness;
            size_t warp_steepness_d_0_max__ = get_base1(D, 3, "D", 1);
            warp_steepness.reserve(warp_steepness_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < warp_steepness_d_0_max__; ++d_0__) {
                if (jacobian__)
                    warp_steepness.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    warp_steepness.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 376;
            std::vector<local_scalar_t__> sigma_n;
            size_t sigma_n_d_0_max__ = (primitive_value(logical_eq(LH, 1)) || primitive_value(logical_eq(LH, 0)));
            sigma_n.reserve(sigma_n_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_n_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma_n.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma_n.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 377;
            std::vector<std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > > ETA;
            size_t ETA_d_0_max__ = F_IS_SAMPLED;
            size_t ETA_d_1_max__ = sum_D;
            ETA.resize(ETA_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ETA_d_0_max__; ++d_0__) {
                ETA[d_0__].reserve(ETA_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < ETA_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        ETA[d_0__].push_back(in__.vector_constrain(n, lp__));
                    else
                        ETA[d_0__].push_back(in__.vector_constrain(n));
                }
            }
            current_statement_begin__ = 378;
            std::vector<local_scalar_t__> phi;
            size_t phi_d_0_max__ = (primitive_value(logical_eq(LH, 3)) || primitive_value(logical_eq(LH, 0)));
            phi.reserve(phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    phi.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    phi.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 381;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > beta;
            size_t beta_d_0_max__ = logical_eq(HMGNS, 0);
            beta.reserve(beta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta.push_back(in__.vector_lub_constrain(0, 1, N_cases, lp__));
                else
                    beta.push_back(in__.vector_lub_constrain(0, 1, N_cases));
            }
            current_statement_begin__ = 382;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > T_raw;
            size_t T_raw_d_0_max__ = logical_eq(UNCRT, 1);
            T_raw.reserve(T_raw_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < T_raw_d_0_max__; ++d_0__) {
                if (jacobian__)
                    T_raw.push_back(in__.vector_lub_constrain(0, 1, N_cases, lp__));
                else
                    T_raw.push_back(in__.vector_lub_constrain(0, 1, N_cases));
            }
            // transformed parameters
            current_statement_begin__ = 388;
            validate_non_negative_index("T_effect", "N_cases", N_cases);
            validate_non_negative_index("T_effect", "UNCRT", UNCRT);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > T_effect(UNCRT, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(N_cases));
            stan::math::initialize(T_effect, DUMMY_VAR__);
            stan::math::fill(T_effect, DUMMY_VAR__);
            current_statement_begin__ = 389;
            validate_non_negative_index("F", "n", n);
            validate_non_negative_index("F", "F_IS_SAMPLED", F_IS_SAMPLED);
            validate_non_negative_index("F", "sum_D", sum_D);
            std::vector<std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > > F(F_IS_SAMPLED, std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> >(sum_D, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(n)));
            stan::math::initialize(F, DUMMY_VAR__);
            stan::math::fill(F, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 390;
            if (as_bool(UNCRT)) {
                current_statement_begin__ = 391;
                stan::model::assign(T_effect, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            add(get_base1(L_ons, 1, "L_ons", 1), elt_multiply(subtract(get_base1(U_ons, 1, "U_ons", 1), get_base1(L_ons, 1, "L_ons", 1)), get_base1(T_raw, 1, "T_raw", 1))), 
                            "assigning variable T_effect");
            }
            current_statement_begin__ = 393;
            if (as_bool(F_IS_SAMPLED)) {
                {
                current_statement_begin__ = 394;
                validate_non_negative_index("KX", "n", n);
                validate_non_negative_index("KX", "n", n);
                validate_non_negative_index("KX", "sum_D", sum_D);
                std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX(sum_D, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n, n));
                stan::math::initialize(KX, DUMMY_VAR__);
                stan::math::fill(KX, DUMMY_VAR__);
                stan::math::assign(KX,STAN_kernels(X, caseID_to_rows, row_to_caseID, caseID_nrows, KF, T_effect, T_observed, D, UNCRT, HMGNS, USE_VAR_MASK, vm_params, alpha_idAge, alpha_sharedAge, alpha_diseaseAge, alpha_continuous, alpha_categAge, alpha_categOffset, ell_idAge, ell_sharedAge, ell_diseaseAge, ell_continuous, ell_categAge, warp_steepness, beta, pstream__));
                current_statement_begin__ = 395;
                for (int r = 1; r <= sum_D; ++r) {
                    {
                    current_statement_begin__ = 396;
                    validate_non_negative_index("EYE", "n", n);
                    validate_non_negative_index("EYE", "n", n);
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> EYE(n, n);
                    stan::math::initialize(EYE, DUMMY_VAR__);
                    stan::math::fill(EYE, DUMMY_VAR__);
                    stan::math::assign(EYE,diag_matrix(rep_vector(DELTA, n)));
                    current_statement_begin__ = 397;
                    validate_non_negative_index("Lxr", "n", n);
                    validate_non_negative_index("Lxr", "n", n);
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Lxr(n, n);
                    stan::math::initialize(Lxr, DUMMY_VAR__);
                    stan::math::fill(Lxr, DUMMY_VAR__);
                    stan::math::assign(Lxr,cholesky_decompose(add(get_base1(KX, r, "KX", 1), EYE)));
                    current_statement_begin__ = 398;
                    stan::model::assign(F, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(r), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), 
                                multiply(Lxr, stan::model::rvalue(ETA, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(r), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "ETA")), 
                                "assigning variable F");
                    }
                }
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 388;
            size_t T_effect_k_0_max__ = UNCRT;
            size_t T_effect_j_1_max__ = N_cases;
            for (size_t k_0__ = 0; k_0__ < T_effect_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < T_effect_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(T_effect[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: T_effect" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable T_effect: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 389;
            size_t F_k_0_max__ = F_IS_SAMPLED;
            size_t F_k_1_max__ = sum_D;
            size_t F_j_1_max__ = n;
            for (size_t k_0__ = 0; k_0__ < F_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < F_k_1_max__; ++k_1__) {
                    for (size_t j_1__ = 0; j_1__ < F_j_1_max__; ++j_1__) {
                        if (stan::math::is_uninitialized(F[k_0__][k_1__](j_1__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: F" << "[" << k_0__ << "]" << "[" << k_1__ << "]" << "(" << j_1__ << ")";
                            stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable F: ") + msg__.str()), current_statement_begin__, prog_reader__());
                        }
                    }
                }
            }
            // model body
            current_statement_begin__ = 407;
            if (as_bool(logical_eq(get_base1(D, 1, "D", 1), 1))) {
                current_statement_begin__ = 408;
                lp_accum__.add(STAN_log_prior(get_base1(alpha_idAge, 1, "alpha_idAge", 1), stan::model::rvalue(t_ID, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list())), "t_ID"), stan::model::rvalue(p_ID, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list())), "p_ID"), pstream__));
                current_statement_begin__ = 409;
                lp_accum__.add(STAN_log_prior(get_base1(ell_idAge, 1, "ell_idAge", 1), stan::model::rvalue(t_ID, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(3, 4), stan::model::nil_index_list())), "t_ID"), stan::model::rvalue(p_ID, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(4, 6), stan::model::nil_index_list())), "p_ID"), pstream__));
            }
            current_statement_begin__ = 413;
            if (as_bool(logical_eq(get_base1(D, 2, "D", 1), 1))) {
                current_statement_begin__ = 414;
                lp_accum__.add(STAN_log_prior(get_base1(alpha_sharedAge, 1, "alpha_sharedAge", 1), stan::model::rvalue(t_A, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list())), "t_A"), stan::model::rvalue(p_A, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list())), "p_A"), pstream__));
                current_statement_begin__ = 415;
                lp_accum__.add(STAN_log_prior(get_base1(ell_sharedAge, 1, "ell_sharedAge", 1), stan::model::rvalue(t_A, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(3, 4), stan::model::nil_index_list())), "t_A"), stan::model::rvalue(p_A, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(4, 6), stan::model::nil_index_list())), "p_A"), pstream__));
            }
            current_statement_begin__ = 419;
            if (as_bool(logical_eq(get_base1(D, 3, "D", 1), 1))) {
                current_statement_begin__ = 420;
                lp_accum__.add(STAN_log_prior(get_base1(alpha_diseaseAge, 1, "alpha_diseaseAge", 1), stan::model::rvalue(t_D, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list())), "t_D"), stan::model::rvalue(p_D, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list())), "p_D"), pstream__));
                current_statement_begin__ = 421;
                lp_accum__.add(STAN_log_prior(get_base1(ell_diseaseAge, 1, "ell_diseaseAge", 1), stan::model::rvalue(t_D, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(3, 4), stan::model::nil_index_list())), "t_D"), stan::model::rvalue(p_D, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(4, 6), stan::model::nil_index_list())), "p_D"), pstream__));
                current_statement_begin__ = 422;
                lp_accum__.add(STAN_log_prior(get_base1(warp_steepness, 1, "warp_steepness", 1), stan::model::rvalue(t_D, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(5, 6), stan::model::nil_index_list())), "t_D"), stan::model::rvalue(p_D, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(7, 9), stan::model::nil_index_list())), "p_D"), pstream__));
            }
            current_statement_begin__ = 426;
            for (int j = 1; j <= get_base1(D, 4, "D", 1); ++j) {
                current_statement_begin__ = 427;
                lp_accum__.add(STAN_log_prior(get_base1(alpha_continuous, j, "alpha_continuous", 1), stan::model::rvalue(t_CNT, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list())), "t_CNT"), stan::model::rvalue(p_CNT, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list())), "p_CNT"), pstream__));
                current_statement_begin__ = 428;
                lp_accum__.add(STAN_log_prior(get_base1(ell_continuous, j, "ell_continuous", 1), stan::model::rvalue(t_CNT, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(3, 4), stan::model::nil_index_list())), "t_CNT"), stan::model::rvalue(p_CNT, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(4, 6), stan::model::nil_index_list())), "p_CNT"), pstream__));
            }
            current_statement_begin__ = 432;
            for (int j = 1; j <= get_base1(D, 5, "D", 1); ++j) {
                current_statement_begin__ = 433;
                lp_accum__.add(STAN_log_prior(get_base1(alpha_categAge, j, "alpha_categAge", 1), stan::model::rvalue(t_CAT, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list())), "t_CAT"), stan::model::rvalue(p_CAT, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list())), "p_CAT"), pstream__));
                current_statement_begin__ = 434;
                lp_accum__.add(STAN_log_prior(get_base1(ell_categAge, j, "ell_categAge", 1), stan::model::rvalue(t_CAT, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(3, 4), stan::model::nil_index_list())), "t_CAT"), stan::model::rvalue(p_CAT, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(4, 6), stan::model::nil_index_list())), "p_CAT"), pstream__));
            }
            current_statement_begin__ = 438;
            for (int j = 1; j <= get_base1(D, 6, "D", 1); ++j) {
                current_statement_begin__ = 439;
                lp_accum__.add(STAN_log_prior(get_base1(alpha_categOffset, j, "alpha_categOffset", 1), stan::model::rvalue(t_OFS, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list())), "t_OFS"), stan::model::rvalue(p_OFS, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list())), "p_OFS"), pstream__));
            }
            current_statement_begin__ = 443;
            if (as_bool(logical_eq(LH, 1))) {
                current_statement_begin__ = 444;
                lp_accum__.add(STAN_log_prior(get_base1(sigma_n, 1, "sigma_n", 1), stan::model::rvalue(t_SIG, stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list()), "t_SIG"), stan::model::rvalue(p_SIG, stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list()), "p_SIG"), pstream__));
            } else if (as_bool(logical_eq(LH, 3))) {
                current_statement_begin__ = 446;
                lp_accum__.add(STAN_log_prior(get_base1(phi, 1, "phi", 1), stan::model::rvalue(t_PHI, stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list()), "t_PHI"), stan::model::rvalue(p_PHI, stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list()), "p_PHI"), pstream__));
            } else if (as_bool(logical_eq(LH, 0))) {
                current_statement_begin__ = 448;
                lp_accum__.add(STAN_log_prior(get_base1(sigma_n, 1, "sigma_n", 1), stan::model::rvalue(t_SIG, stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list()), "t_SIG"), stan::model::rvalue(p_SIG, stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list()), "p_SIG"), pstream__));
                current_statement_begin__ = 449;
                lp_accum__.add(STAN_log_prior(get_base1(phi, 1, "phi", 1), stan::model::rvalue(t_PHI, stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list()), "t_PHI"), stan::model::rvalue(p_PHI, stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list()), "p_PHI"), pstream__));
            }
            current_statement_begin__ = 453;
            if (as_bool(UNCRT)) {
                {
                current_statement_begin__ = 454;
                local_scalar_t__ tx(DUMMY_VAR__);
                (void) tx;  // dummy to suppress unused var warning
                stan::math::initialize(tx, DUMMY_VAR__);
                stan::math::fill(tx, DUMMY_VAR__);
                current_statement_begin__ = 455;
                for (int k = 1; k <= N_cases; ++k) {
                    current_statement_begin__ = 456;
                    if (as_bool(logical_eq(RELATIVE, 1))) {
                        current_statement_begin__ = 457;
                        stan::math::assign(tx, (-(get_base1(T_observed, k, "T_observed", 1)) + get_base1(get_base1(T_effect, 1, "T_effect", 1), k, "T_effect", 2)));
                    } else if (as_bool(logical_eq(BACKWARDS, 1))) {
                        current_statement_begin__ = 459;
                        stan::math::assign(tx, (get_base1(T_observed, k, "T_observed", 1) - get_base1(get_base1(T_effect, 1, "T_effect", 1), k, "T_effect", 2)));
                    } else {
                        current_statement_begin__ = 461;
                        stan::math::assign(tx, get_base1(get_base1(T_effect, 1, "T_effect", 1), k, "T_effect", 2));
                    }
                    current_statement_begin__ = 463;
                    lp_accum__.add(STAN_log_prior(tx, stan::model::rvalue(t_ONS, stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list())), "t_ONS"), stan::model::rvalue(p_ONS, stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list())), "p_ONS"), pstream__));
                }
                }
            }
            current_statement_begin__ = 468;
            if (as_bool(logical_eq(HMGNS, 0))) {
                current_statement_begin__ = 469;
                lp_accum__.add(beta_log(get_base1(beta, 1, "beta", 1), get_base1(p_BET, 1, "p_BET", 1), get_base1(p_BET, 2, "p_BET", 1)));
            }
            current_statement_begin__ = 473;
            if (as_bool(F_IS_SAMPLED)) {
                current_statement_begin__ = 474;
                for (int j = 1; j <= sum_D; ++j) {
                    current_statement_begin__ = 475;
                    lp_accum__.add(normal_log(get_base1(get_base1(ETA, 1, "ETA", 1), j, "ETA", 2), 0, 1));
                }
            }
            current_statement_begin__ = 478;
            if (as_bool(logical_neq(LH, 0))) {
                current_statement_begin__ = 480;
                if (as_bool(F_IS_SAMPLED)) {
                    {
                    current_statement_begin__ = 483;
                    validate_non_negative_index("F_ss", "n", n);
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> F_ss(n);
                    stan::math::initialize(F_ss, DUMMY_VAR__);
                    stan::math::fill(F_ss, DUMMY_VAR__);
                    stan::math::assign(F_ss,C_hat);
                    current_statement_begin__ = 484;
                    for (int i = 1; i <= n; ++i) {
                        current_statement_begin__ = 485;
                        stan::model::assign(F_ss, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(F_ss, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "F_ss") + sum(stan::model::rvalue(F, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()))), "F"))), 
                                    "assigning variable F_ss");
                    }
                    current_statement_begin__ = 489;
                    if (as_bool(logical_eq(LH, 1))) {
                        {
                        current_statement_begin__ = 491;
                        validate_non_negative_index("SIGMA", "n", n);
                        std::vector<local_scalar_t__  > SIGMA(n, local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(SIGMA, DUMMY_VAR__);
                        stan::math::fill(SIGMA, DUMMY_VAR__);
                        stan::math::assign(SIGMA,to_array_1d(rep_vector(get_base1(sigma_n, 1, "sigma_n", 1), n)));
                        current_statement_begin__ = 492;
                        validate_non_negative_index("MU", "n", n);
                        std::vector<local_scalar_t__  > MU(n, local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(MU, DUMMY_VAR__);
                        stan::math::fill(MU, DUMMY_VAR__);
                        stan::math::assign(MU,to_array_1d(F_ss));
                        current_statement_begin__ = 493;
                        lp_accum__.add(normal_log(y, MU, SIGMA));
                        }
                    } else if (as_bool(logical_eq(LH, 2))) {
                        {
                        current_statement_begin__ = 496;
                        validate_non_negative_index("LOG_MU", "n", n);
                        std::vector<local_scalar_t__  > LOG_MU(n, local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(LOG_MU, DUMMY_VAR__);
                        stan::math::fill(LOG_MU, DUMMY_VAR__);
                        stan::math::assign(LOG_MU,to_array_1d(F_ss));
                        current_statement_begin__ = 497;
                        lp_accum__.add(poisson_log_log(y_int, LOG_MU));
                        }
                    } else if (as_bool(logical_eq(LH, 3))) {
                        {
                        current_statement_begin__ = 500;
                        validate_non_negative_index("LOG_MU", "n", n);
                        std::vector<local_scalar_t__  > LOG_MU(n, local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(LOG_MU, DUMMY_VAR__);
                        stan::math::fill(LOG_MU, DUMMY_VAR__);
                        stan::math::assign(LOG_MU,to_array_1d(F_ss));
                        current_statement_begin__ = 501;
                        validate_non_negative_index("PHI", "n", n);
                        std::vector<local_scalar_t__  > PHI(n, local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(PHI, DUMMY_VAR__);
                        stan::math::fill(PHI, DUMMY_VAR__);
                        stan::math::assign(PHI,to_array_1d(rep_vector(get_base1(phi, 1, "phi", 1), n)));
                        current_statement_begin__ = 502;
                        lp_accum__.add(neg_binomial_2_log_log(y_int, LOG_MU, PHI));
                        }
                    } else if (as_bool(logical_eq(LH, 4))) {
                        {
                        current_statement_begin__ = 505;
                        validate_non_negative_index("LOGIT_P", "n", n);
                        std::vector<local_scalar_t__  > LOGIT_P(n, local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(LOGIT_P, DUMMY_VAR__);
                        stan::math::fill(LOGIT_P, DUMMY_VAR__);
                        stan::math::assign(LOGIT_P,to_array_1d(F_ss));
                        current_statement_begin__ = 506;
                        lp_accum__.add(binomial_logit_log(y_int, N_trials, LOGIT_P));
                        }
                    } else {
                        current_statement_begin__ = 508;
                        std::stringstream errmsg_stream__;
                        errmsg_stream__ << "Unknown observation model!";
                        throw std::domain_error(errmsg_stream__.str());
                    }
                    }
                } else {
                    {
                    current_statement_begin__ = 513;
                    validate_non_negative_index("Ky", "n", n);
                    validate_non_negative_index("Ky", "n", n);
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Ky(n, n);
                    stan::math::initialize(Ky, DUMMY_VAR__);
                    stan::math::fill(Ky, DUMMY_VAR__);
                    current_statement_begin__ = 514;
                    validate_non_negative_index("Kx", "n", n);
                    validate_non_negative_index("Kx", "n", n);
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Kx(n, n);
                    stan::math::initialize(Kx, DUMMY_VAR__);
                    stan::math::fill(Kx, DUMMY_VAR__);
                    stan::math::assign(Kx,diag_matrix(rep_vector(DELTA, n)));
                    current_statement_begin__ = 515;
                    validate_non_negative_index("KX", "n", n);
                    validate_non_negative_index("KX", "n", n);
                    validate_non_negative_index("KX", "sum_D", sum_D);
                    std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX(sum_D, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n, n));
                    stan::math::initialize(KX, DUMMY_VAR__);
                    stan::math::fill(KX, DUMMY_VAR__);
                    stan::math::assign(KX,STAN_kernels(X, caseID_to_rows, row_to_caseID, caseID_nrows, KF, T_effect, T_observed, D, UNCRT, HMGNS, USE_VAR_MASK, vm_params, alpha_idAge, alpha_sharedAge, alpha_diseaseAge, alpha_continuous, alpha_categAge, alpha_categOffset, ell_idAge, ell_sharedAge, ell_diseaseAge, ell_continuous, ell_categAge, warp_steepness, beta, pstream__));
                    current_statement_begin__ = 516;
                    for (int j = 1; j <= sum_D; ++j) {
                        current_statement_begin__ = 516;
                        stan::math::assign(Kx, add(Kx, get_base1(KX, j, "KX", 1)));
                    }
                    current_statement_begin__ = 517;
                    stan::math::assign(Ky, add(Kx, diag_matrix(rep_vector(square(get_base1(sigma_n, 1, "sigma_n", 1)), n))));
                    current_statement_begin__ = 518;
                    lp_accum__.add(multi_normal_log(y, C_hat, Ky));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha_idAge");
        names__.push_back("alpha_sharedAge");
        names__.push_back("alpha_diseaseAge");
        names__.push_back("alpha_continuous");
        names__.push_back("alpha_categAge");
        names__.push_back("alpha_categOffset");
        names__.push_back("ell_idAge");
        names__.push_back("ell_sharedAge");
        names__.push_back("ell_diseaseAge");
        names__.push_back("ell_continuous");
        names__.push_back("ell_categAge");
        names__.push_back("warp_steepness");
        names__.push_back("sigma_n");
        names__.push_back("ETA");
        names__.push_back("phi");
        names__.push_back("beta");
        names__.push_back("T_raw");
        names__.push_back("T_effect");
        names__.push_back("F");
        names__.push_back("F_mean_cmp");
        names__.push_back("F_var_cmp");
        names__.push_back("F_mean_tot");
        names__.push_back("F_var_tot");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(get_base1(D, 1, "D", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(D, 2, "D", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(D, 3, "D", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(D, 4, "D", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(D, 5, "D", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(D, 6, "D", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(D, 1, "D", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(D, 2, "D", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(D, 3, "D", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(D, 4, "D", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(D, 5, "D", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(D, 3, "D", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((primitive_value(logical_eq(LH, 1)) || primitive_value(logical_eq(LH, 0))));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(F_IS_SAMPLED);
        dims__.push_back(sum_D);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((primitive_value(logical_eq(LH, 3)) || primitive_value(logical_eq(LH, 0))));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(HMGNS, 0));
        dims__.push_back(N_cases);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(UNCRT, 1));
        dims__.push_back(N_cases);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(UNCRT);
        dims__.push_back(N_cases);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(F_IS_SAMPLED);
        dims__.push_back(sum_D);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(DO_GEN_QUANT);
        dims__.push_back(sum_D);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(DO_GEN_QUANT);
        dims__.push_back(sum_D);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(DO_GEN_QUANT);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(DO_GEN_QUANT);
        dims__.push_back(n);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_lgp_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> alpha_idAge;
        size_t alpha_idAge_d_0_max__ = get_base1(D, 1, "D", 1);
        alpha_idAge.reserve(alpha_idAge_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_idAge_d_0_max__; ++d_0__) {
            alpha_idAge.push_back(in__.scalar_lb_constrain(0));
        }
        size_t alpha_idAge_k_0_max__ = get_base1(D, 1, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_idAge_k_0_max__; ++k_0__) {
            vars__.push_back(alpha_idAge[k_0__]);
        }
        std::vector<double> alpha_sharedAge;
        size_t alpha_sharedAge_d_0_max__ = get_base1(D, 2, "D", 1);
        alpha_sharedAge.reserve(alpha_sharedAge_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_sharedAge_d_0_max__; ++d_0__) {
            alpha_sharedAge.push_back(in__.scalar_lb_constrain(0));
        }
        size_t alpha_sharedAge_k_0_max__ = get_base1(D, 2, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_sharedAge_k_0_max__; ++k_0__) {
            vars__.push_back(alpha_sharedAge[k_0__]);
        }
        std::vector<double> alpha_diseaseAge;
        size_t alpha_diseaseAge_d_0_max__ = get_base1(D, 3, "D", 1);
        alpha_diseaseAge.reserve(alpha_diseaseAge_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_diseaseAge_d_0_max__; ++d_0__) {
            alpha_diseaseAge.push_back(in__.scalar_lb_constrain(0));
        }
        size_t alpha_diseaseAge_k_0_max__ = get_base1(D, 3, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_diseaseAge_k_0_max__; ++k_0__) {
            vars__.push_back(alpha_diseaseAge[k_0__]);
        }
        std::vector<double> alpha_continuous;
        size_t alpha_continuous_d_0_max__ = get_base1(D, 4, "D", 1);
        alpha_continuous.reserve(alpha_continuous_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_continuous_d_0_max__; ++d_0__) {
            alpha_continuous.push_back(in__.scalar_lb_constrain(0));
        }
        size_t alpha_continuous_k_0_max__ = get_base1(D, 4, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_continuous_k_0_max__; ++k_0__) {
            vars__.push_back(alpha_continuous[k_0__]);
        }
        std::vector<double> alpha_categAge;
        size_t alpha_categAge_d_0_max__ = get_base1(D, 5, "D", 1);
        alpha_categAge.reserve(alpha_categAge_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_categAge_d_0_max__; ++d_0__) {
            alpha_categAge.push_back(in__.scalar_lb_constrain(0));
        }
        size_t alpha_categAge_k_0_max__ = get_base1(D, 5, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_categAge_k_0_max__; ++k_0__) {
            vars__.push_back(alpha_categAge[k_0__]);
        }
        std::vector<double> alpha_categOffset;
        size_t alpha_categOffset_d_0_max__ = get_base1(D, 6, "D", 1);
        alpha_categOffset.reserve(alpha_categOffset_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_categOffset_d_0_max__; ++d_0__) {
            alpha_categOffset.push_back(in__.scalar_lb_constrain(0));
        }
        size_t alpha_categOffset_k_0_max__ = get_base1(D, 6, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_categOffset_k_0_max__; ++k_0__) {
            vars__.push_back(alpha_categOffset[k_0__]);
        }
        std::vector<double> ell_idAge;
        size_t ell_idAge_d_0_max__ = get_base1(D, 1, "D", 1);
        ell_idAge.reserve(ell_idAge_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ell_idAge_d_0_max__; ++d_0__) {
            ell_idAge.push_back(in__.scalar_lb_constrain(0));
        }
        size_t ell_idAge_k_0_max__ = get_base1(D, 1, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_idAge_k_0_max__; ++k_0__) {
            vars__.push_back(ell_idAge[k_0__]);
        }
        std::vector<double> ell_sharedAge;
        size_t ell_sharedAge_d_0_max__ = get_base1(D, 2, "D", 1);
        ell_sharedAge.reserve(ell_sharedAge_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ell_sharedAge_d_0_max__; ++d_0__) {
            ell_sharedAge.push_back(in__.scalar_lb_constrain(0));
        }
        size_t ell_sharedAge_k_0_max__ = get_base1(D, 2, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_sharedAge_k_0_max__; ++k_0__) {
            vars__.push_back(ell_sharedAge[k_0__]);
        }
        std::vector<double> ell_diseaseAge;
        size_t ell_diseaseAge_d_0_max__ = get_base1(D, 3, "D", 1);
        ell_diseaseAge.reserve(ell_diseaseAge_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ell_diseaseAge_d_0_max__; ++d_0__) {
            ell_diseaseAge.push_back(in__.scalar_lb_constrain(0));
        }
        size_t ell_diseaseAge_k_0_max__ = get_base1(D, 3, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_diseaseAge_k_0_max__; ++k_0__) {
            vars__.push_back(ell_diseaseAge[k_0__]);
        }
        std::vector<double> ell_continuous;
        size_t ell_continuous_d_0_max__ = get_base1(D, 4, "D", 1);
        ell_continuous.reserve(ell_continuous_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ell_continuous_d_0_max__; ++d_0__) {
            ell_continuous.push_back(in__.scalar_lb_constrain(0));
        }
        size_t ell_continuous_k_0_max__ = get_base1(D, 4, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_continuous_k_0_max__; ++k_0__) {
            vars__.push_back(ell_continuous[k_0__]);
        }
        std::vector<double> ell_categAge;
        size_t ell_categAge_d_0_max__ = get_base1(D, 5, "D", 1);
        ell_categAge.reserve(ell_categAge_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ell_categAge_d_0_max__; ++d_0__) {
            ell_categAge.push_back(in__.scalar_lb_constrain(0));
        }
        size_t ell_categAge_k_0_max__ = get_base1(D, 5, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_categAge_k_0_max__; ++k_0__) {
            vars__.push_back(ell_categAge[k_0__]);
        }
        std::vector<double> warp_steepness;
        size_t warp_steepness_d_0_max__ = get_base1(D, 3, "D", 1);
        warp_steepness.reserve(warp_steepness_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < warp_steepness_d_0_max__; ++d_0__) {
            warp_steepness.push_back(in__.scalar_lb_constrain(0));
        }
        size_t warp_steepness_k_0_max__ = get_base1(D, 3, "D", 1);
        for (size_t k_0__ = 0; k_0__ < warp_steepness_k_0_max__; ++k_0__) {
            vars__.push_back(warp_steepness[k_0__]);
        }
        std::vector<double> sigma_n;
        size_t sigma_n_d_0_max__ = (primitive_value(logical_eq(LH, 1)) || primitive_value(logical_eq(LH, 0)));
        sigma_n.reserve(sigma_n_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_n_d_0_max__; ++d_0__) {
            sigma_n.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_n_k_0_max__ = (primitive_value(logical_eq(LH, 1)) || primitive_value(logical_eq(LH, 0)));
        for (size_t k_0__ = 0; k_0__ < sigma_n_k_0_max__; ++k_0__) {
            vars__.push_back(sigma_n[k_0__]);
        }
        std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > ETA;
        size_t ETA_d_0_max__ = F_IS_SAMPLED;
        size_t ETA_d_1_max__ = sum_D;
        ETA.resize(ETA_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ETA_d_0_max__; ++d_0__) {
            ETA[d_0__].reserve(ETA_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < ETA_d_1_max__; ++d_1__) {
                ETA[d_0__].push_back(in__.vector_constrain(n));
            }
        }
        size_t ETA_j_1_max__ = n;
        size_t ETA_k_0_max__ = F_IS_SAMPLED;
        size_t ETA_k_1_max__ = sum_D;
        for (size_t j_1__ = 0; j_1__ < ETA_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < ETA_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < ETA_k_0_max__; ++k_0__) {
                    vars__.push_back(ETA[k_0__][k_1__](j_1__));
                }
            }
        }
        std::vector<double> phi;
        size_t phi_d_0_max__ = (primitive_value(logical_eq(LH, 3)) || primitive_value(logical_eq(LH, 0)));
        phi.reserve(phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
            phi.push_back(in__.scalar_lb_constrain(0));
        }
        size_t phi_k_0_max__ = (primitive_value(logical_eq(LH, 3)) || primitive_value(logical_eq(LH, 0)));
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            vars__.push_back(phi[k_0__]);
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta;
        size_t beta_d_0_max__ = logical_eq(HMGNS, 0);
        beta.reserve(beta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_d_0_max__; ++d_0__) {
            beta.push_back(in__.vector_lub_constrain(0, 1, N_cases));
        }
        size_t beta_j_1_max__ = N_cases;
        size_t beta_k_0_max__ = logical_eq(HMGNS, 0);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                vars__.push_back(beta[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > T_raw;
        size_t T_raw_d_0_max__ = logical_eq(UNCRT, 1);
        T_raw.reserve(T_raw_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < T_raw_d_0_max__; ++d_0__) {
            T_raw.push_back(in__.vector_lub_constrain(0, 1, N_cases));
        }
        size_t T_raw_j_1_max__ = N_cases;
        size_t T_raw_k_0_max__ = logical_eq(UNCRT, 1);
        for (size_t j_1__ = 0; j_1__ < T_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < T_raw_k_0_max__; ++k_0__) {
                vars__.push_back(T_raw[k_0__](j_1__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 388;
            validate_non_negative_index("T_effect", "N_cases", N_cases);
            validate_non_negative_index("T_effect", "UNCRT", UNCRT);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > T_effect(UNCRT, Eigen::Matrix<double, Eigen::Dynamic, 1>(N_cases));
            stan::math::initialize(T_effect, DUMMY_VAR__);
            stan::math::fill(T_effect, DUMMY_VAR__);
            current_statement_begin__ = 389;
            validate_non_negative_index("F", "n", n);
            validate_non_negative_index("F", "F_IS_SAMPLED", F_IS_SAMPLED);
            validate_non_negative_index("F", "sum_D", sum_D);
            std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > F(F_IS_SAMPLED, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(sum_D, Eigen::Matrix<double, Eigen::Dynamic, 1>(n)));
            stan::math::initialize(F, DUMMY_VAR__);
            stan::math::fill(F, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 390;
            if (as_bool(UNCRT)) {
                current_statement_begin__ = 391;
                stan::model::assign(T_effect, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            add(get_base1(L_ons, 1, "L_ons", 1), elt_multiply(subtract(get_base1(U_ons, 1, "U_ons", 1), get_base1(L_ons, 1, "L_ons", 1)), get_base1(T_raw, 1, "T_raw", 1))), 
                            "assigning variable T_effect");
            }
            current_statement_begin__ = 393;
            if (as_bool(F_IS_SAMPLED)) {
                {
                current_statement_begin__ = 394;
                validate_non_negative_index("KX", "n", n);
                validate_non_negative_index("KX", "n", n);
                validate_non_negative_index("KX", "sum_D", sum_D);
                std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX(sum_D, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n, n));
                stan::math::initialize(KX, DUMMY_VAR__);
                stan::math::fill(KX, DUMMY_VAR__);
                stan::math::assign(KX,STAN_kernels(X, caseID_to_rows, row_to_caseID, caseID_nrows, KF, T_effect, T_observed, D, UNCRT, HMGNS, USE_VAR_MASK, vm_params, alpha_idAge, alpha_sharedAge, alpha_diseaseAge, alpha_continuous, alpha_categAge, alpha_categOffset, ell_idAge, ell_sharedAge, ell_diseaseAge, ell_continuous, ell_categAge, warp_steepness, beta, pstream__));
                current_statement_begin__ = 395;
                for (int r = 1; r <= sum_D; ++r) {
                    {
                    current_statement_begin__ = 396;
                    validate_non_negative_index("EYE", "n", n);
                    validate_non_negative_index("EYE", "n", n);
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> EYE(n, n);
                    stan::math::initialize(EYE, DUMMY_VAR__);
                    stan::math::fill(EYE, DUMMY_VAR__);
                    stan::math::assign(EYE,diag_matrix(rep_vector(DELTA, n)));
                    current_statement_begin__ = 397;
                    validate_non_negative_index("Lxr", "n", n);
                    validate_non_negative_index("Lxr", "n", n);
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Lxr(n, n);
                    stan::math::initialize(Lxr, DUMMY_VAR__);
                    stan::math::fill(Lxr, DUMMY_VAR__);
                    stan::math::assign(Lxr,cholesky_decompose(add(get_base1(KX, r, "KX", 1), EYE)));
                    current_statement_begin__ = 398;
                    stan::model::assign(F, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(r), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), 
                                multiply(Lxr, stan::model::rvalue(ETA, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(r), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "ETA")), 
                                "assigning variable F");
                    }
                }
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t T_effect_j_1_max__ = N_cases;
                size_t T_effect_k_0_max__ = UNCRT;
                for (size_t j_1__ = 0; j_1__ < T_effect_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < T_effect_k_0_max__; ++k_0__) {
                        vars__.push_back(T_effect[k_0__](j_1__));
                    }
                }
                size_t F_j_1_max__ = n;
                size_t F_k_0_max__ = F_IS_SAMPLED;
                size_t F_k_1_max__ = sum_D;
                for (size_t j_1__ = 0; j_1__ < F_j_1_max__; ++j_1__) {
                    for (size_t k_1__ = 0; k_1__ < F_k_1_max__; ++k_1__) {
                        for (size_t k_0__ = 0; k_0__ < F_k_0_max__; ++k_0__) {
                            vars__.push_back(F[k_0__][k_1__](j_1__));
                        }
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 526;
            validate_non_negative_index("F_mean_cmp", "n", n);
            validate_non_negative_index("F_mean_cmp", "DO_GEN_QUANT", DO_GEN_QUANT);
            validate_non_negative_index("F_mean_cmp", "sum_D", sum_D);
            std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > F_mean_cmp(DO_GEN_QUANT, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(sum_D, Eigen::Matrix<double, Eigen::Dynamic, 1>(n)));
            stan::math::initialize(F_mean_cmp, DUMMY_VAR__);
            stan::math::fill(F_mean_cmp, DUMMY_VAR__);
            current_statement_begin__ = 527;
            validate_non_negative_index("F_var_cmp", "n", n);
            validate_non_negative_index("F_var_cmp", "DO_GEN_QUANT", DO_GEN_QUANT);
            validate_non_negative_index("F_var_cmp", "sum_D", sum_D);
            std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > F_var_cmp(DO_GEN_QUANT, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(sum_D, Eigen::Matrix<double, Eigen::Dynamic, 1>(n)));
            stan::math::initialize(F_var_cmp, DUMMY_VAR__);
            stan::math::fill(F_var_cmp, DUMMY_VAR__);
            current_statement_begin__ = 528;
            validate_non_negative_index("F_mean_tot", "n", n);
            validate_non_negative_index("F_mean_tot", "DO_GEN_QUANT", DO_GEN_QUANT);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > F_mean_tot(DO_GEN_QUANT, Eigen::Matrix<double, Eigen::Dynamic, 1>(n));
            stan::math::initialize(F_mean_tot, DUMMY_VAR__);
            stan::math::fill(F_mean_tot, DUMMY_VAR__);
            current_statement_begin__ = 529;
            validate_non_negative_index("F_var_tot", "n", n);
            validate_non_negative_index("F_var_tot", "DO_GEN_QUANT", DO_GEN_QUANT);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > F_var_tot(DO_GEN_QUANT, Eigen::Matrix<double, Eigen::Dynamic, 1>(n));
            stan::math::initialize(F_var_tot, DUMMY_VAR__);
            stan::math::fill(F_var_tot, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 531;
            if (as_bool(DO_GEN_QUANT)) {
                {
                current_statement_begin__ = 532;
                validate_non_negative_index("A", "n", n);
                validate_non_negative_index("A", "n", n);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> A(n, n);
                stan::math::initialize(A, DUMMY_VAR__);
                stan::math::fill(A, DUMMY_VAR__);
                current_statement_begin__ = 533;
                validate_non_negative_index("v", "n", n);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v(n);
                stan::math::initialize(v, DUMMY_VAR__);
                stan::math::fill(v, DUMMY_VAR__);
                current_statement_begin__ = 534;
                validate_non_negative_index("Ky", "n", n);
                validate_non_negative_index("Ky", "n", n);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Ky(n, n);
                stan::math::initialize(Ky, DUMMY_VAR__);
                stan::math::fill(Ky, DUMMY_VAR__);
                current_statement_begin__ = 535;
                validate_non_negative_index("Ly", "n", n);
                validate_non_negative_index("Ly", "n", n);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Ly(n, n);
                stan::math::initialize(Ly, DUMMY_VAR__);
                stan::math::fill(Ly, DUMMY_VAR__);
                current_statement_begin__ = 536;
                validate_non_negative_index("Kx", "n", n);
                validate_non_negative_index("Kx", "n", n);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Kx(n, n);
                stan::math::initialize(Kx, DUMMY_VAR__);
                stan::math::fill(Kx, DUMMY_VAR__);
                stan::math::assign(Kx,diag_matrix(rep_vector(DELTA, n)));
                current_statement_begin__ = 537;
                validate_non_negative_index("KX", "n", n);
                validate_non_negative_index("KX", "n", n);
                validate_non_negative_index("KX", "sum_D", sum_D);
                std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX(sum_D, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n, n));
                stan::math::initialize(KX, DUMMY_VAR__);
                stan::math::fill(KX, DUMMY_VAR__);
                stan::math::assign(KX,STAN_kernels(X, caseID_to_rows, row_to_caseID, caseID_nrows, KF, T_effect, T_observed, D, UNCRT, HMGNS, USE_VAR_MASK, vm_params, alpha_idAge, alpha_sharedAge, alpha_diseaseAge, alpha_continuous, alpha_categAge, alpha_categOffset, ell_idAge, ell_sharedAge, ell_diseaseAge, ell_continuous, ell_categAge, warp_steepness, beta, pstream__));
                current_statement_begin__ = 538;
                for (int j = 1; j <= sum_D; ++j) {
                    current_statement_begin__ = 538;
                    stan::math::assign(Kx, add(Kx, get_base1(KX, j, "KX", 1)));
                }
                current_statement_begin__ = 539;
                stan::math::assign(Ky, add(Kx, diag_matrix(rep_vector(square(get_base1(sigma_n, 1, "sigma_n", 1)), n))));
                current_statement_begin__ = 540;
                stan::math::assign(Ly, cholesky_decompose(Ky));
                current_statement_begin__ = 541;
                stan::math::assign(v, mdivide_left_tri_low(Ly, y));
                current_statement_begin__ = 542;
                for (int j = 1; j <= sum_D; ++j) {
                    current_statement_begin__ = 543;
                    stan::math::assign(A, mdivide_left_tri_low(Ly, transpose(get_base1(KX, j, "KX", 1))));
                    current_statement_begin__ = 544;
                    stan::model::assign(F_mean_cmp, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                multiply(transpose(A), v), 
                                "assigning variable F_mean_cmp");
                    current_statement_begin__ = 545;
                    stan::model::assign(F_var_cmp, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                diagonal(subtract(get_base1(KX, j, "KX", 1), crossprod(A))), 
                                "assigning variable F_var_cmp");
                }
                current_statement_begin__ = 547;
                stan::math::assign(A, mdivide_left_tri_low(Ly, transpose(Kx)));
                current_statement_begin__ = 548;
                stan::model::assign(F_mean_tot, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            multiply(transpose(A), v), 
                            "assigning variable F_mean_tot");
                current_statement_begin__ = 549;
                stan::model::assign(F_var_tot, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            diagonal(subtract(Kx, crossprod(A))), 
                            "assigning variable F_var_tot");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 526;
            size_t F_mean_cmp_j_1_max__ = n;
            size_t F_mean_cmp_k_0_max__ = DO_GEN_QUANT;
            size_t F_mean_cmp_k_1_max__ = sum_D;
            for (size_t j_1__ = 0; j_1__ < F_mean_cmp_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < F_mean_cmp_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < F_mean_cmp_k_0_max__; ++k_0__) {
                        vars__.push_back(F_mean_cmp[k_0__][k_1__](j_1__));
                    }
                }
            }
            current_statement_begin__ = 527;
            size_t F_var_cmp_j_1_max__ = n;
            size_t F_var_cmp_k_0_max__ = DO_GEN_QUANT;
            size_t F_var_cmp_k_1_max__ = sum_D;
            for (size_t j_1__ = 0; j_1__ < F_var_cmp_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < F_var_cmp_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < F_var_cmp_k_0_max__; ++k_0__) {
                        vars__.push_back(F_var_cmp[k_0__][k_1__](j_1__));
                    }
                }
            }
            current_statement_begin__ = 528;
            size_t F_mean_tot_j_1_max__ = n;
            size_t F_mean_tot_k_0_max__ = DO_GEN_QUANT;
            for (size_t j_1__ = 0; j_1__ < F_mean_tot_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < F_mean_tot_k_0_max__; ++k_0__) {
                    vars__.push_back(F_mean_tot[k_0__](j_1__));
                }
            }
            current_statement_begin__ = 529;
            size_t F_var_tot_j_1_max__ = n;
            size_t F_var_tot_k_0_max__ = DO_GEN_QUANT;
            for (size_t j_1__ = 0; j_1__ < F_var_tot_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < F_var_tot_k_0_max__; ++k_0__) {
                    vars__.push_back(F_var_tot[k_0__](j_1__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_lgp";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_idAge_k_0_max__ = get_base1(D, 1, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_idAge_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_idAge" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_sharedAge_k_0_max__ = get_base1(D, 2, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_sharedAge_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_sharedAge" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_diseaseAge_k_0_max__ = get_base1(D, 3, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_diseaseAge_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_diseaseAge" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_continuous_k_0_max__ = get_base1(D, 4, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_continuous_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_continuous" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_categAge_k_0_max__ = get_base1(D, 5, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_categAge_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_categAge" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_categOffset_k_0_max__ = get_base1(D, 6, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_categOffset_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_categOffset" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ell_idAge_k_0_max__ = get_base1(D, 1, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_idAge_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ell_idAge" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ell_sharedAge_k_0_max__ = get_base1(D, 2, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_sharedAge_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ell_sharedAge" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ell_diseaseAge_k_0_max__ = get_base1(D, 3, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_diseaseAge_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ell_diseaseAge" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ell_continuous_k_0_max__ = get_base1(D, 4, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_continuous_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ell_continuous" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ell_categAge_k_0_max__ = get_base1(D, 5, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_categAge_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ell_categAge" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t warp_steepness_k_0_max__ = get_base1(D, 3, "D", 1);
        for (size_t k_0__ = 0; k_0__ < warp_steepness_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "warp_steepness" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_n_k_0_max__ = (primitive_value(logical_eq(LH, 1)) || primitive_value(logical_eq(LH, 0)));
        for (size_t k_0__ = 0; k_0__ < sigma_n_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_n" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ETA_j_1_max__ = n;
        size_t ETA_k_0_max__ = F_IS_SAMPLED;
        size_t ETA_k_1_max__ = sum_D;
        for (size_t j_1__ = 0; j_1__ < ETA_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < ETA_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < ETA_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "ETA" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t phi_k_0_max__ = (primitive_value(logical_eq(LH, 3)) || primitive_value(logical_eq(LH, 0)));
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = N_cases;
        size_t beta_k_0_max__ = logical_eq(HMGNS, 0);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t T_raw_j_1_max__ = N_cases;
        size_t T_raw_k_0_max__ = logical_eq(UNCRT, 1);
        for (size_t j_1__ = 0; j_1__ < T_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < T_raw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "T_raw" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t T_effect_j_1_max__ = N_cases;
            size_t T_effect_k_0_max__ = UNCRT;
            for (size_t j_1__ = 0; j_1__ < T_effect_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < T_effect_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "T_effect" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t F_j_1_max__ = n;
            size_t F_k_0_max__ = F_IS_SAMPLED;
            size_t F_k_1_max__ = sum_D;
            for (size_t j_1__ = 0; j_1__ < F_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < F_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < F_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "F" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t F_mean_cmp_j_1_max__ = n;
        size_t F_mean_cmp_k_0_max__ = DO_GEN_QUANT;
        size_t F_mean_cmp_k_1_max__ = sum_D;
        for (size_t j_1__ = 0; j_1__ < F_mean_cmp_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < F_mean_cmp_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < F_mean_cmp_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "F_mean_cmp" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t F_var_cmp_j_1_max__ = n;
        size_t F_var_cmp_k_0_max__ = DO_GEN_QUANT;
        size_t F_var_cmp_k_1_max__ = sum_D;
        for (size_t j_1__ = 0; j_1__ < F_var_cmp_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < F_var_cmp_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < F_var_cmp_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "F_var_cmp" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t F_mean_tot_j_1_max__ = n;
        size_t F_mean_tot_k_0_max__ = DO_GEN_QUANT;
        for (size_t j_1__ = 0; j_1__ < F_mean_tot_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < F_mean_tot_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "F_mean_tot" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t F_var_tot_j_1_max__ = n;
        size_t F_var_tot_k_0_max__ = DO_GEN_QUANT;
        for (size_t j_1__ = 0; j_1__ < F_var_tot_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < F_var_tot_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "F_var_tot" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_idAge_k_0_max__ = get_base1(D, 1, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_idAge_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_idAge" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_sharedAge_k_0_max__ = get_base1(D, 2, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_sharedAge_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_sharedAge" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_diseaseAge_k_0_max__ = get_base1(D, 3, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_diseaseAge_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_diseaseAge" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_continuous_k_0_max__ = get_base1(D, 4, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_continuous_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_continuous" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_categAge_k_0_max__ = get_base1(D, 5, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_categAge_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_categAge" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_categOffset_k_0_max__ = get_base1(D, 6, "D", 1);
        for (size_t k_0__ = 0; k_0__ < alpha_categOffset_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_categOffset" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ell_idAge_k_0_max__ = get_base1(D, 1, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_idAge_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ell_idAge" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ell_sharedAge_k_0_max__ = get_base1(D, 2, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_sharedAge_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ell_sharedAge" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ell_diseaseAge_k_0_max__ = get_base1(D, 3, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_diseaseAge_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ell_diseaseAge" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ell_continuous_k_0_max__ = get_base1(D, 4, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_continuous_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ell_continuous" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ell_categAge_k_0_max__ = get_base1(D, 5, "D", 1);
        for (size_t k_0__ = 0; k_0__ < ell_categAge_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ell_categAge" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t warp_steepness_k_0_max__ = get_base1(D, 3, "D", 1);
        for (size_t k_0__ = 0; k_0__ < warp_steepness_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "warp_steepness" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_n_k_0_max__ = (primitive_value(logical_eq(LH, 1)) || primitive_value(logical_eq(LH, 0)));
        for (size_t k_0__ = 0; k_0__ < sigma_n_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_n" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ETA_j_1_max__ = n;
        size_t ETA_k_0_max__ = F_IS_SAMPLED;
        size_t ETA_k_1_max__ = sum_D;
        for (size_t j_1__ = 0; j_1__ < ETA_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < ETA_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < ETA_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "ETA" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t phi_k_0_max__ = (primitive_value(logical_eq(LH, 3)) || primitive_value(logical_eq(LH, 0)));
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = N_cases;
        size_t beta_k_0_max__ = logical_eq(HMGNS, 0);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t T_raw_j_1_max__ = N_cases;
        size_t T_raw_k_0_max__ = logical_eq(UNCRT, 1);
        for (size_t j_1__ = 0; j_1__ < T_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < T_raw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "T_raw" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t T_effect_j_1_max__ = N_cases;
            size_t T_effect_k_0_max__ = UNCRT;
            for (size_t j_1__ = 0; j_1__ < T_effect_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < T_effect_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "T_effect" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t F_j_1_max__ = n;
            size_t F_k_0_max__ = F_IS_SAMPLED;
            size_t F_k_1_max__ = sum_D;
            for (size_t j_1__ = 0; j_1__ < F_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < F_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < F_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "F" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t F_mean_cmp_j_1_max__ = n;
        size_t F_mean_cmp_k_0_max__ = DO_GEN_QUANT;
        size_t F_mean_cmp_k_1_max__ = sum_D;
        for (size_t j_1__ = 0; j_1__ < F_mean_cmp_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < F_mean_cmp_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < F_mean_cmp_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "F_mean_cmp" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t F_var_cmp_j_1_max__ = n;
        size_t F_var_cmp_k_0_max__ = DO_GEN_QUANT;
        size_t F_var_cmp_k_1_max__ = sum_D;
        for (size_t j_1__ = 0; j_1__ < F_var_cmp_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < F_var_cmp_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < F_var_cmp_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "F_var_cmp" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t F_mean_tot_j_1_max__ = n;
        size_t F_mean_tot_k_0_max__ = DO_GEN_QUANT;
        for (size_t j_1__ = 0; j_1__ < F_mean_tot_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < F_mean_tot_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "F_mean_tot" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t F_var_tot_j_1_max__ = n;
        size_t F_var_tot_k_0_max__ = DO_GEN_QUANT;
        for (size_t j_1__ = 0; j_1__ < F_var_tot_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < F_var_tot_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "F_var_tot" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_lgp_namespace::model_lgp stan_model;
#endif
