// [[Rcpp::depends(StanHeaders)]]
// [[Rcpp::depends(rstan)]]
// [[Rcpp::depends(RcppEigen)]]
// [[Rcpp::depends(BH)]]
#include <stan/math/prim/mat/fun/Eigen.hpp>
#include <boost/integer/integer_log2.hpp>
// REMOVED #include <exporter.h> by dev-cpp.R 
#include <RcppEigen.h>
// Code generated by Stan version 2.21.0
#include <stan/model/standalone_functions_header.hpp>
namespace user_ba55d9c055a2c2b2d9685c6148ca0029 { 
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using namespace stan::math;
typedef Eigen::Matrix<double, Eigen::Dynamic, 1> vector_d;
typedef Eigen::Matrix<double, 1, Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> matrix_d;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "unknown file name");
    reader.add_event(427, 425, "end", "unknown file name");
    return reader;
}
template <typename T0__>
void
STAN_check_real_positive(const T0__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 6;
        if (as_bool(logical_lte(a, 0))) {
            current_statement_begin__ = 6;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "argument must be positive!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 7;
        if (as_bool(is_nan(a))) {
            current_statement_begin__ = 7;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "argument must not be NaN!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 8;
        if (as_bool(is_inf(a))) {
            current_statement_begin__ = 8;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "argument must be finite!";
            throw std::domain_error(errmsg_stream__.str());
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_check_real_positive_functor__ {
    template <typename T0__>
        void
    operator()(const T0__& a, std::ostream* pstream__) const {
        return STAN_check_real_positive(a, pstream__);
    }
};
template <typename T0__>
void
STAN_check_prob_positive(const T0__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 13;
        if (as_bool((primitive_value(logical_lte(a, 0)) || primitive_value(logical_gt(a, 1))))) {
            current_statement_begin__ = 13;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "argument must be on the interval (0, 1]!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 14;
        if (as_bool(is_nan(a))) {
            current_statement_begin__ = 14;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "argument must not be NaN!";
            throw std::domain_error(errmsg_stream__.str());
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_check_prob_positive_functor__ {
    template <typename T0__>
        void
    operator()(const T0__& a, std::ostream* pstream__) const {
        return STAN_check_prob_positive(a, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
STAN_warp_input(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                    const T1__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 19;
        STAN_check_real_positive(a, pstream__);
        current_statement_begin__ = 20;
        return stan::math::promote_scalar<fun_return_scalar_t__>(add(-(1), multiply(2, inv(add(1, stan::math::exp(multiply(-(a), x)))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_warp_input_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                    const T1__& a, std::ostream* pstream__) const {
        return STAN_warp_input(x, a, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
STAN_var_mask(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                  const T1__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 25;
        STAN_check_real_positive(a, pstream__);
        current_statement_begin__ = 26;
        return stan::math::promote_scalar<fun_return_scalar_t__>(inv(add(1, stan::math::exp(multiply(-(a), x)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_var_mask_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                  const T1__& a, std::ostream* pstream__) const {
        return STAN_var_mask(x, a, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_expand(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                const std::vector<int>& idx_expand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 31;
        int L(0);
        (void) L;  // dummy to suppress unused var warning
        stan::math::fill(L, std::numeric_limits<int>::min());
        stan::math::assign(L,num_elements(v));
        current_statement_begin__ = 32;
        validate_non_negative_index("v_add0", "(L + 1)", (L + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v_add0((L + 1));
        stan::math::initialize(v_add0, DUMMY_VAR__);
        stan::math::fill(v_add0, DUMMY_VAR__);
        stan::math::assign(v_add0,rep_vector(0.0, (L + 1)));
        current_statement_begin__ = 33;
        stan::model::assign(v_add0, 
                    stan::model::cons_list(stan::model::index_min_max(2, (L + 1)), stan::model::nil_index_list()), 
                    v, 
                    "assigning variable v_add0");
        current_statement_begin__ = 34;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::model::rvalue(v_add0, stan::model::cons_list(stan::model::index_multi(idx_expand), stan::model::nil_index_list()), "v_add0"));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_expand_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                const std::vector<int>& idx_expand, std::ostream* pstream__) const {
        return STAN_expand(v, idx_expand, pstream__);
    }
};
template <typename T0__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic, 1>
STAN_edit_x_cont(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_cont,
                     const std::vector<int>& idx_expand,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& teff_obs,
                     const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& teff, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 44;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(x_cont));
        current_statement_begin__ = 45;
        validate_non_negative_index("x_teff_obs", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_teff_obs(n);
        stan::math::initialize(x_teff_obs, DUMMY_VAR__);
        stan::math::fill(x_teff_obs, DUMMY_VAR__);
        stan::math::assign(x_teff_obs,STAN_expand(teff_obs, idx_expand, pstream__));
        current_statement_begin__ = 46;
        validate_non_negative_index("x_teff", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_teff(n);
        stan::math::initialize(x_teff, DUMMY_VAR__);
        stan::math::fill(x_teff, DUMMY_VAR__);
        stan::math::assign(x_teff,STAN_expand(teff, idx_expand, pstream__));
        current_statement_begin__ = 47;
        return stan::math::promote_scalar<fun_return_scalar_t__>(subtract(add(x_cont, x_teff_obs), x_teff));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_edit_x_cont_functor__ {
    template <typename T0__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_cont,
                     const std::vector<int>& idx_expand,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& teff_obs,
                     const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& teff, std::ostream* pstream__) const {
        return STAN_edit_x_cont(x_cont, idx_expand, teff_obs, teff, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_zerosum(const std::vector<int>& x1,
                             const std::vector<int>& x2,
                             const int& num_cat, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 55;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));
        current_statement_begin__ = 56;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));
        current_statement_begin__ = 57;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 58;
        if (as_bool(logical_lte(num_cat, 1))) {
            current_statement_begin__ = 59;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "STAN_kernel_base_zerosum: <num_cat> must be at least 2!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 61;
        for (int i = 1; i <= n1; ++i) {
            current_statement_begin__ = 62;
            for (int j = 1; j <= n2; ++j) {
                current_statement_begin__ = 63;
                if (as_bool(logical_eq(get_base1(x1, i, "x1", 1), get_base1(x2, j, "x2", 1)))) {
                    current_statement_begin__ = 64;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                1, 
                                "assigning variable K");
                } else {
                    current_statement_begin__ = 66;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                -(inv((num_cat - 1))), 
                                "assigning variable K");
                }
            }
        }
        current_statement_begin__ = 70;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_base_zerosum_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                             const std::vector<int>& x2,
                             const int& num_cat, std::ostream* pstream__) const {
        return STAN_kernel_base_zerosum(x1, x2, num_cat, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_cat(const std::vector<int>& x1,
                         const std::vector<int>& x2, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 78;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));
        current_statement_begin__ = 79;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));
        current_statement_begin__ = 80;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 81;
        for (int i = 1; i <= n1; ++i) {
            current_statement_begin__ = 82;
            for (int j = 1; j <= n2; ++j) {
                current_statement_begin__ = 83;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            logical_eq(get_base1(x1, i, "x1", 1), get_base1(x2, j, "x2", 1)), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 86;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_base_cat_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                         const std::vector<int>& x2, std::ostream* pstream__) const {
        return STAN_kernel_base_cat(x1, x2, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_bin_mask(const std::vector<int>& x1,
                              const std::vector<int>& x2, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 94;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));
        current_statement_begin__ = 95;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));
        current_statement_begin__ = 96;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 97;
        for (int i = 1; i <= n1; ++i) {
            current_statement_begin__ = 98;
            for (int j = 1; j <= n2; ++j) {
                current_statement_begin__ = 99;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            (logical_eq(get_base1(x1, i, "x1", 1), 0) * logical_eq(get_base1(x2, j, "x2", 1), 0)), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 102;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_base_bin_mask_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                              const std::vector<int>& x2, std::ostream* pstream__) const {
        return STAN_kernel_base_bin_mask(x1, x2, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_const(const std::vector<int>& x1,
                      const std::vector<int>& x2,
                      const int& kernel_type,
                      const int& num_cat, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 115;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));
        current_statement_begin__ = 116;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));
        current_statement_begin__ = 117;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 118;
        if (as_bool(logical_eq(kernel_type, 0))) {
            current_statement_begin__ = 119;
            stan::math::assign(K, STAN_kernel_base_zerosum(x1, x2, num_cat, pstream__));
        } else if (as_bool(logical_eq(kernel_type, 1))) {
            current_statement_begin__ = 121;
            stan::math::assign(K, STAN_kernel_base_cat(x1, x2, pstream__));
        } else if (as_bool(logical_eq(kernel_type, 2))) {
            current_statement_begin__ = 123;
            stan::math::assign(K, STAN_kernel_base_bin_mask(x1, x2, pstream__));
        } else {
            current_statement_begin__ = 125;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "invalid kernel type, must be 0, 1 or 2! found = ";
            errmsg_stream__ << kernel_type;
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 127;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_const_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                      const std::vector<int>& x2,
                      const int& kernel_type,
                      const int& num_cat, std::ostream* pstream__) const {
        return STAN_kernel_const(x1, x2, kernel_type, num_cat, pstream__);
    }
};
std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_const_all(const int& n1,
                          const int& n2,
                          const std::vector<std::vector<int> >& x1,
                          const std::vector<std::vector<int> >& x2,
                          const std::vector<std::vector<int> >& x1_mask,
                          const std::vector<std::vector<int> >& x2_mask,
                          const std::vector<int>& num_levels,
                          const std::vector<std::vector<int> >& components, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 144;
        int L1(0);
        (void) L1;  // dummy to suppress unused var warning
        stan::math::fill(L1, std::numeric_limits<int>::min());
        stan::math::assign(L1,size(x1));
        current_statement_begin__ = 145;
        int L2(0);
        (void) L2;  // dummy to suppress unused var warning
        stan::math::fill(L2, std::numeric_limits<int>::min());
        stan::math::assign(L2,size(x2));
        current_statement_begin__ = 146;
        int L3(0);
        (void) L3;  // dummy to suppress unused var warning
        stan::math::fill(L3, std::numeric_limits<int>::min());
        stan::math::assign(L3,size(num_levels));
        current_statement_begin__ = 147;
        int L4(0);
        (void) L4;  // dummy to suppress unused var warning
        stan::math::fill(L4, std::numeric_limits<int>::min());
        stan::math::assign(L4,size(get_base1(components, 1, "components", 1)));
        current_statement_begin__ = 148;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(components));
        current_statement_begin__ = 149;
        validate_non_negative_index("K_const", "n1", n1);
        validate_non_negative_index("K_const", "n2", n2);
        validate_non_negative_index("K_const", "num_comps", num_comps);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > K_const(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n1, n2));
        stan::math::initialize(K_const, DUMMY_VAR__);
        stan::math::fill(K_const, DUMMY_VAR__);
        current_statement_begin__ = 150;
        if (as_bool(logical_neq(L1, L2))) {
            current_statement_begin__ = 151;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "first dims of <x1> and <x2> must match! ";
            errmsg_stream__ << "found = (";
            errmsg_stream__ << L1;
            errmsg_stream__ << ", ";
            errmsg_stream__ << L2;
            errmsg_stream__ << ")";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 154;
        if (as_bool(logical_neq(L1, L3))) {
            current_statement_begin__ = 155;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "size of <num_levels> must match first dim of <x1> and <x2>! ";
            errmsg_stream__ << "found = ";
            errmsg_stream__ << L3;
            errmsg_stream__ << ", should be = ";
            errmsg_stream__ << L1;
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 158;
        if (as_bool(logical_neq(L4, 9))) {
            current_statement_begin__ = 159;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "second dimension of <components> must be 9!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 162;
        for (int j = 1; j <= num_comps; ++j) {
            {
            current_statement_begin__ = 163;
            validate_non_negative_index("K", "n1", n1);
            validate_non_negative_index("K", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K, DUMMY_VAR__);
            current_statement_begin__ = 164;
            validate_non_negative_index("opts", "9", 9);
            std::vector<int  > opts(9, int(0));
            stan::math::fill(opts, std::numeric_limits<int>::min());
            stan::math::assign(opts,get_base1(components, j, "components", 1));
            current_statement_begin__ = 165;
            int ctype(0);
            (void) ctype;  // dummy to suppress unused var warning
            stan::math::fill(ctype, std::numeric_limits<int>::min());
            stan::math::assign(ctype,get_base1(opts, 1, "opts", 1));
            current_statement_begin__ = 166;
            int ktype(0);
            (void) ktype;  // dummy to suppress unused var warning
            stan::math::fill(ktype, std::numeric_limits<int>::min());
            stan::math::assign(ktype,get_base1(opts, 2, "opts", 1));
            current_statement_begin__ = 167;
            int idx_cat(0);
            (void) idx_cat;  // dummy to suppress unused var warning
            stan::math::fill(idx_cat, std::numeric_limits<int>::min());
            stan::math::assign(idx_cat,get_base1(opts, 8, "opts", 1));
            current_statement_begin__ = 168;
            int idx_cont(0);
            (void) idx_cont;  // dummy to suppress unused var warning
            stan::math::fill(idx_cont, std::numeric_limits<int>::min());
            stan::math::assign(idx_cont,get_base1(opts, 9, "opts", 1));
            current_statement_begin__ = 171;
            if (as_bool(logical_neq(idx_cont, 0))) {
                current_statement_begin__ = 172;
                stan::math::assign(K, STAN_kernel_const(get_base1(x1_mask, idx_cont, "x1_mask", 1), get_base1(x2_mask, idx_cont, "x2_mask", 1), 2, 0, pstream__));
            } else {
                current_statement_begin__ = 174;
                stan::math::assign(K, rep_matrix(1, n1, n2));
            }
            current_statement_begin__ = 178;
            if (as_bool((primitive_value(logical_eq(ctype, 0)) || primitive_value(logical_eq(ctype, 2))))) {
                {
                current_statement_begin__ = 179;
                int M(0);
                (void) M;  // dummy to suppress unused var warning
                stan::math::fill(M, std::numeric_limits<int>::min());
                stan::math::assign(M,get_base1(num_levels, idx_cat, "num_levels", 1));
                current_statement_begin__ = 180;
                stan::math::assign(K, elt_multiply(K, STAN_kernel_const(get_base1(x1, idx_cat, "x1", 1), get_base1(x2, idx_cat, "x2", 1), ktype, M, pstream__)));
                }
            }
            current_statement_begin__ = 182;
            stan::model::assign(K_const, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        K, 
                        "assigning variable K_const");
            }
        }
        current_statement_begin__ = 184;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K_const);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_const_all_functor__ {
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const int& n1,
                          const int& n2,
                          const std::vector<std::vector<int> >& x1,
                          const std::vector<std::vector<int> >& x2,
                          const std::vector<std::vector<int> >& x1_mask,
                          const std::vector<std::vector<int> >& x2_mask,
                          const std::vector<int>& num_levels,
                          const std::vector<std::vector<int> >& components, std::ostream* pstream__) const {
        return STAN_kernel_const_all(n1, n2, x1, x2, x1_mask, x2_mask, num_levels, components, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_var_mask(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                              const T2__& steepness,
                              const std::vector<T3__>& vm_params, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 193;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));
        current_statement_begin__ = 194;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));
        current_statement_begin__ = 195;
        local_scalar_t__ a(DUMMY_VAR__);
        (void) a;  // dummy to suppress unused var warning
        stan::math::initialize(a, DUMMY_VAR__);
        stan::math::fill(a, DUMMY_VAR__);
        stan::math::assign(a,(steepness * get_base1(vm_params, 2, "vm_params", 1)));
        current_statement_begin__ = 196;
        local_scalar_t__ r(DUMMY_VAR__);
        (void) r;  // dummy to suppress unused var warning
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);
        stan::math::assign(r,(inv(a) * logit(get_base1(vm_params, 1, "vm_params", 1))));
        current_statement_begin__ = 197;
        validate_non_negative_index("s1", "n1", n1);
        validate_non_negative_index("s1", "1", 1);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> s1(n1, 1);
        stan::math::initialize(s1, DUMMY_VAR__);
        stan::math::fill(s1, DUMMY_VAR__);
        stan::math::assign(s1,to_matrix(STAN_var_mask(subtract(x1, r), a, pstream__)));
        current_statement_begin__ = 198;
        validate_non_negative_index("s2", "n2", n2);
        validate_non_negative_index("s2", "1", 1);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> s2(n2, 1);
        stan::math::initialize(s2, DUMMY_VAR__);
        stan::math::fill(s2, DUMMY_VAR__);
        stan::math::assign(s2,to_matrix(STAN_var_mask(subtract(x2, r), a, pstream__)));
        current_statement_begin__ = 199;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        stan::math::assign(K,multiply(s1, transpose(s2)));
        current_statement_begin__ = 200;
        STAN_check_real_positive(steepness, pstream__);
        current_statement_begin__ = 201;
        STAN_check_real_positive(get_base1(vm_params, 2, "vm_params", 1), pstream__);
        current_statement_begin__ = 202;
        STAN_check_prob_positive(get_base1(vm_params, 1, "vm_params", 1), pstream__);
        current_statement_begin__ = 203;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_base_var_mask_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                              const T2__& steepness,
                              const std::vector<T3__>& vm_params, std::ostream* pstream__) const {
        return STAN_kernel_base_var_mask(x1, x2, steepness, vm_params, pstream__);
    }
};
template <typename T2__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T16__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T9__, T10__, typename boost::math::tools::promote_args<T11__, T12__, T13__, T16__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_all(const int& n1,
                    const int& n2,
                    const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                    const std::vector<std::vector<int> >& components,
                    const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, 1> >& x1,
                    const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic, 1> >& x2,
                    const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic, 1> >& x1_unnorm,
                    const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic, 1> >& x2_unnorm,
                    const std::vector<T8__>& alpha,
                    const std::vector<T9__>& ell,
                    const std::vector<T10__>& wrp,
                    const std::vector<Eigen::Matrix<T11__, Eigen::Dynamic, 1> >& beta,
                    const std::vector<Eigen::Matrix<T12__, Eigen::Dynamic, 1> >& teff,
                    const std::vector<std::vector<T13__> >& vm_params,
                    const std::vector<int>& idx1_expand,
                    const std::vector<int>& idx2_expand,
                    const std::vector<Eigen::Matrix<T16__, Eigen::Dynamic, 1> >& teff_obs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T9__, T10__, typename boost::math::tools::promote_args<T11__, T12__, T13__, T16__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 229;
        int idx_ell(0);
        (void) idx_ell;  // dummy to suppress unused var warning
        stan::math::fill(idx_ell, std::numeric_limits<int>::min());
        stan::math::assign(idx_ell,0);
        current_statement_begin__ = 230;
        int idx_wrp(0);
        (void) idx_wrp;  // dummy to suppress unused var warning
        stan::math::fill(idx_wrp, std::numeric_limits<int>::min());
        stan::math::assign(idx_wrp,0);
        current_statement_begin__ = 231;
        int idx_alpha(0);
        (void) idx_alpha;  // dummy to suppress unused var warning
        stan::math::fill(idx_alpha, std::numeric_limits<int>::min());
        stan::math::assign(idx_alpha,0);
        current_statement_begin__ = 232;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(components));
        current_statement_begin__ = 233;
        validate_non_negative_index("KX", "n1", n1);
        validate_non_negative_index("KX", "n2", n2);
        validate_non_negative_index("KX", "num_comps", num_comps);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n1, n2));
        stan::math::initialize(KX, DUMMY_VAR__);
        stan::math::fill(KX, DUMMY_VAR__);
        current_statement_begin__ = 234;
        int L1(0);
        (void) L1;  // dummy to suppress unused var warning
        stan::math::fill(L1, std::numeric_limits<int>::min());
        stan::math::assign(L1,size(x1));
        current_statement_begin__ = 235;
        int L2(0);
        (void) L2;  // dummy to suppress unused var warning
        stan::math::fill(L2, std::numeric_limits<int>::min());
        stan::math::assign(L2,size(x2));
        current_statement_begin__ = 236;
        int L3(0);
        (void) L3;  // dummy to suppress unused var warning
        stan::math::fill(L3, std::numeric_limits<int>::min());
        stan::math::assign(L3,size(K_const));
        current_statement_begin__ = 237;
        int L4(0);
        (void) L4;  // dummy to suppress unused var warning
        stan::math::fill(L4, std::numeric_limits<int>::min());
        stan::math::assign(L4,size(get_base1(components, 1, "components", 1)));
        current_statement_begin__ = 240;
        if (as_bool(logical_neq(L1, L2))) {
            current_statement_begin__ = 241;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "first dims of <x1> and <x2> must match! ";
            errmsg_stream__ << "found = (";
            errmsg_stream__ << L1;
            errmsg_stream__ << ", ";
            errmsg_stream__ << L2;
            errmsg_stream__ << ")";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 244;
        if (as_bool(logical_neq(num_comps, L3))) {
            current_statement_begin__ = 245;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "first dim of <components> and first dim of <K_const> must match! ";
            errmsg_stream__ << "found = (";
            errmsg_stream__ << num_comps;
            errmsg_stream__ << ", ";
            errmsg_stream__ << L3;
            errmsg_stream__ << ")";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 248;
        if (as_bool(logical_neq(L4, 9))) {
            current_statement_begin__ = 249;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "second dimension of <components> must be 9!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 253;
        for (int j = 1; j <= num_comps; ++j) {
            {
            current_statement_begin__ = 256;
            validate_non_negative_index("K", "n1", n1);
            validate_non_negative_index("K", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K, DUMMY_VAR__);
            stan::math::assign(K,get_base1(K_const, j, "K_const", 1));
            current_statement_begin__ = 257;
            validate_non_negative_index("X1", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> X1(n1);
            stan::math::initialize(X1, DUMMY_VAR__);
            stan::math::fill(X1, DUMMY_VAR__);
            current_statement_begin__ = 258;
            validate_non_negative_index("X2", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> X2(n2);
            stan::math::initialize(X2, DUMMY_VAR__);
            stan::math::fill(X2, DUMMY_VAR__);
            current_statement_begin__ = 261;
            validate_non_negative_index("opts", "9", 9);
            std::vector<int  > opts(9, int(0));
            stan::math::fill(opts, std::numeric_limits<int>::min());
            stan::math::assign(opts,get_base1(components, j, "components", 1));
            current_statement_begin__ = 262;
            int ctype(0);
            (void) ctype;  // dummy to suppress unused var warning
            stan::math::fill(ctype, std::numeric_limits<int>::min());
            stan::math::assign(ctype,get_base1(opts, 1, "opts", 1));
            current_statement_begin__ = 263;
            int idx_cont(0);
            (void) idx_cont;  // dummy to suppress unused var warning
            stan::math::fill(idx_cont, std::numeric_limits<int>::min());
            stan::math::assign(idx_cont,get_base1(opts, 9, "opts", 1));
            current_statement_begin__ = 264;
            int is_heter(0);
            (void) is_heter;  // dummy to suppress unused var warning
            stan::math::fill(is_heter, std::numeric_limits<int>::min());
            stan::math::assign(is_heter,get_base1(opts, 4, "opts", 1));
            current_statement_begin__ = 265;
            int is_warped(0);
            (void) is_warped;  // dummy to suppress unused var warning
            stan::math::fill(is_warped, std::numeric_limits<int>::min());
            stan::math::assign(is_warped,get_base1(opts, 5, "opts", 1));
            current_statement_begin__ = 266;
            int is_var_masked(0);
            (void) is_var_masked;  // dummy to suppress unused var warning
            stan::math::fill(is_var_masked, std::numeric_limits<int>::min());
            stan::math::assign(is_var_masked,get_base1(opts, 6, "opts", 1));
            current_statement_begin__ = 267;
            int is_uncrt(0);
            (void) is_uncrt;  // dummy to suppress unused var warning
            stan::math::fill(is_uncrt, std::numeric_limits<int>::min());
            stan::math::assign(is_uncrt,get_base1(opts, 7, "opts", 1));
            current_statement_begin__ = 270;
            if (as_bool(logical_neq(ctype, 0))) {
                current_statement_begin__ = 271;
                if (as_bool(is_warped)) {
                    current_statement_begin__ = 272;
                    stan::math::assign(X1, get_base1(x1_unnorm, idx_cont, "x1_unnorm", 1));
                    current_statement_begin__ = 273;
                    stan::math::assign(X2, get_base1(x2_unnorm, idx_cont, "x2_unnorm", 1));
                } else {
                    current_statement_begin__ = 275;
                    stan::math::assign(X1, get_base1(x1, idx_cont, "x1", 1));
                    current_statement_begin__ = 276;
                    stan::math::assign(X2, get_base1(x2, idx_cont, "x2", 1));
                }
            }
            current_statement_begin__ = 281;
            if (as_bool(is_warped)) {
                {
                current_statement_begin__ = 282;
                local_scalar_t__ s(DUMMY_VAR__);
                (void) s;  // dummy to suppress unused var warning
                stan::math::initialize(s, DUMMY_VAR__);
                stan::math::fill(s, DUMMY_VAR__);
                current_statement_begin__ = 283;
                stan::math::assign(idx_wrp, (idx_wrp + 1));
                current_statement_begin__ = 286;
                if (as_bool(is_uncrt)) {
                    current_statement_begin__ = 287;
                    stan::math::assign(X1, STAN_edit_x_cont(X1, idx1_expand, get_base1(teff_obs, 1, "teff_obs", 1), get_base1(teff, 1, "teff", 1), pstream__));
                    current_statement_begin__ = 288;
                    stan::math::assign(X2, STAN_edit_x_cont(X2, idx2_expand, get_base1(teff_obs, 1, "teff_obs", 1), get_base1(teff, 1, "teff", 1), pstream__));
                }
                current_statement_begin__ = 292;
                stan::math::assign(s, get_base1(wrp, idx_wrp, "wrp", 1));
                current_statement_begin__ = 293;
                stan::math::assign(X1, STAN_warp_input(X1, s, pstream__));
                current_statement_begin__ = 294;
                stan::math::assign(X2, STAN_warp_input(X2, s, pstream__));
                current_statement_begin__ = 297;
                if (as_bool(is_var_masked)) {
                    current_statement_begin__ = 298;
                    stan::math::assign(K, elt_multiply(K, STAN_kernel_base_var_mask(X1, X2, s, get_base1(vm_params, idx_wrp, "vm_params", 1), pstream__)));
                }
                }
            }
            current_statement_begin__ = 303;
            stan::math::assign(idx_alpha, (idx_alpha + 1));
            current_statement_begin__ = 304;
            if (as_bool(logical_neq(ctype, 0))) {
                current_statement_begin__ = 305;
                stan::math::assign(idx_ell, (idx_ell + 1));
                current_statement_begin__ = 306;
                stan::math::assign(K, elt_multiply(K, cov_exp_quad(to_array_1d(X1), to_array_1d(X2), get_base1(alpha, idx_alpha, "alpha", 1), get_base1(ell, idx_ell, "ell", 1))));
            } else {
                current_statement_begin__ = 309;
                stan::math::assign(K, multiply(square(get_base1(alpha, idx_alpha, "alpha", 1)), K));
            }
            current_statement_begin__ = 313;
            if (as_bool(is_heter)) {
                {
                current_statement_begin__ = 314;
                validate_non_negative_index("b1", "n1", n1);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b1(n1);
                stan::math::initialize(b1, DUMMY_VAR__);
                stan::math::fill(b1, DUMMY_VAR__);
                stan::math::assign(b1,STAN_expand(get_base1(beta, 1, "beta", 1), idx1_expand, pstream__));
                current_statement_begin__ = 315;
                validate_non_negative_index("b2", "n2", n2);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b2(n2);
                stan::math::initialize(b2, DUMMY_VAR__);
                stan::math::fill(b2, DUMMY_VAR__);
                stan::math::assign(b2,STAN_expand(get_base1(beta, 1, "beta", 1), idx2_expand, pstream__));
                current_statement_begin__ = 316;
                validate_non_negative_index("K_beta", "n1", n1);
                validate_non_negative_index("K_beta", "n2", n2);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K_beta(n1, n2);
                stan::math::initialize(K_beta, DUMMY_VAR__);
                stan::math::fill(K_beta, DUMMY_VAR__);
                stan::math::assign(K_beta,multiply(to_matrix(b1), transpose(to_matrix(b2))));
                current_statement_begin__ = 317;
                stan::math::assign(K, elt_multiply(K, K_beta));
                }
            }
            current_statement_begin__ = 321;
            stan::model::assign(KX, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        K, 
                        "assigning variable KX");
            }
        }
        current_statement_begin__ = 324;
        return stan::math::promote_scalar<fun_return_scalar_t__>(KX);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_all_functor__ {
    template <typename T2__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T16__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T9__, T10__, typename boost::math::tools::promote_args<T11__, T12__, T13__, T16__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const int& n1,
                    const int& n2,
                    const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                    const std::vector<std::vector<int> >& components,
                    const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, 1> >& x1,
                    const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic, 1> >& x2,
                    const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic, 1> >& x1_unnorm,
                    const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic, 1> >& x2_unnorm,
                    const std::vector<T8__>& alpha,
                    const std::vector<T9__>& ell,
                    const std::vector<T10__>& wrp,
                    const std::vector<Eigen::Matrix<T11__, Eigen::Dynamic, 1> >& beta,
                    const std::vector<Eigen::Matrix<T12__, Eigen::Dynamic, 1> >& teff,
                    const std::vector<std::vector<T13__> >& vm_params,
                    const std::vector<int>& idx1_expand,
                    const std::vector<int>& idx2_expand,
                    const std::vector<Eigen::Matrix<T16__, Eigen::Dynamic, 1> >& teff_obs, std::ostream* pstream__) const {
        return STAN_kernel_all(n1, n2, K_const, components, x1, x2, x1_unnorm, x2_unnorm, alpha, ell, wrp, beta, teff, vm_params, idx1_expand, idx2_expand, teff_obs, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1> >
STAN_gp_posterior_helper(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& Ly,
                             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& K,
                             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& v, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 328;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(v));
        current_statement_begin__ = 329;
        validate_non_negative_index("A", "n", n);
        validate_non_negative_index("A", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> A(n, n);
        stan::math::initialize(A, DUMMY_VAR__);
        stan::math::fill(A, DUMMY_VAR__);
        stan::math::assign(A,mdivide_left_tri_low(Ly, transpose(K)));
        current_statement_begin__ = 330;
        validate_non_negative_index("f_post", "n", n);
        validate_non_negative_index("f_post", "2", 2);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > f_post(2, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(n));
        stan::math::initialize(f_post, DUMMY_VAR__);
        stan::math::fill(f_post, DUMMY_VAR__);
        current_statement_begin__ = 331;
        stan::model::assign(f_post, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    multiply(transpose(A), v), 
                    "assigning variable f_post");
        current_statement_begin__ = 332;
        stan::model::assign(f_post, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    diagonal(subtract(K, crossprod(A))), 
                    "assigning variable f_post");
        current_statement_begin__ = 333;
        return stan::math::promote_scalar<fun_return_scalar_t__>(f_post);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_gp_posterior_helper_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1> >
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& Ly,
                             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& K,
                             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& v, std::ostream* pstream__) const {
        return STAN_gp_posterior_helper(Ly, K, v, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, 1> >
STAN_gp_posterior(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& KX,
                      const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& y,
                      const T2__& delta,
                      const T3__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 345;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(KX));
        current_statement_begin__ = 346;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(y));
        current_statement_begin__ = 347;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,(num_comps + 1));
        current_statement_begin__ = 348;
        validate_non_negative_index("inds", "2", 2);
        std::vector<int  > inds(2, int(0));
        stan::math::fill(inds, std::numeric_limits<int>::min());
        current_statement_begin__ = 349;
        validate_non_negative_index("F_POST", "n", n);
        validate_non_negative_index("F_POST", "(2 * J)", (2 * J));
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > F_POST((2 * J), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(n));
        stan::math::initialize(F_POST, DUMMY_VAR__);
        stan::math::fill(F_POST, DUMMY_VAR__);
        current_statement_begin__ = 350;
        validate_non_negative_index("v", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v(n);
        stan::math::initialize(v, DUMMY_VAR__);
        stan::math::fill(v, DUMMY_VAR__);
        current_statement_begin__ = 351;
        validate_non_negative_index("Ky", "n", n);
        validate_non_negative_index("Ky", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Ky(n, n);
        stan::math::initialize(Ky, DUMMY_VAR__);
        stan::math::fill(Ky, DUMMY_VAR__);
        current_statement_begin__ = 352;
        validate_non_negative_index("Ly", "n", n);
        validate_non_negative_index("Ly", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Ly(n, n);
        stan::math::initialize(Ly, DUMMY_VAR__);
        stan::math::fill(Ly, DUMMY_VAR__);
        current_statement_begin__ = 355;
        validate_non_negative_index("Kx", "n", n);
        validate_non_negative_index("Kx", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Kx(n, n);
        stan::math::initialize(Kx, DUMMY_VAR__);
        stan::math::fill(Kx, DUMMY_VAR__);
        stan::math::assign(Kx,rep_matrix(0.0, n, n));
        current_statement_begin__ = 356;
        validate_non_negative_index("delta_vec", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta_vec(n);
        stan::math::initialize(delta_vec, DUMMY_VAR__);
        stan::math::fill(delta_vec, DUMMY_VAR__);
        stan::math::assign(delta_vec,rep_vector(delta, n));
        current_statement_begin__ = 357;
        validate_non_negative_index("sigma2_vec", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma2_vec(n);
        stan::math::initialize(sigma2_vec, DUMMY_VAR__);
        stan::math::fill(sigma2_vec, DUMMY_VAR__);
        stan::math::assign(sigma2_vec,rep_vector(square(sigma), n));
        current_statement_begin__ = 358;
        for (int j = 1; j <= num_comps; ++j) {
            current_statement_begin__ = 359;
            stan::math::assign(Kx, add(Kx, get_base1(KX, j, "KX", 1)));
        }
        current_statement_begin__ = 361;
        stan::math::assign(Ky, add(add(Kx, diag_matrix(sigma2_vec)), diag_matrix(multiply(num_comps, delta_vec))));
        current_statement_begin__ = 364;
        stan::math::assign(Ly, cholesky_decompose(Ky));
        current_statement_begin__ = 365;
        stan::math::assign(v, mdivide_left_tri_low(Ly, y));
        current_statement_begin__ = 368;
        for (int j = 1; j <= num_comps; ++j) {
            current_statement_begin__ = 369;
            stan::math::assign(inds, static_cast<std::vector<int> >(stan::math::array_builder<int >().add(j).add((J + j)).array()));
            current_statement_begin__ = 370;
            stan::model::assign(F_POST, 
                        stan::model::cons_list(stan::model::index_multi(inds), stan::model::nil_index_list()), 
                        STAN_gp_posterior_helper(Ly, get_base1(KX, j, "KX", 1), v, pstream__), 
                        "assigning variable F_POST");
        }
        current_statement_begin__ = 374;
        stan::math::assign(inds, static_cast<std::vector<int> >(stan::math::array_builder<int >().add(J).add((2 * J)).array()));
        current_statement_begin__ = 375;
        stan::model::assign(F_POST, 
                    stan::model::cons_list(stan::model::index_multi(inds), stan::model::nil_index_list()), 
                    STAN_gp_posterior_helper(Ly, Kx, v, pstream__), 
                    "assigning variable F_POST");
        current_statement_begin__ = 376;
        return stan::math::promote_scalar<fun_return_scalar_t__>(F_POST);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_gp_posterior_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, 1> >
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& KX,
                      const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& y,
                      const T2__& delta,
                      const T3__& sigma, std::ostream* pstream__) const {
        return STAN_gp_posterior(KX, y, delta, sigma, pstream__);
    }
};
template <typename T0__, typename T2__>
typename boost::math::tools::promote_args<T0__, T2__>::type
STAN_log_prior(const T0__& x,
                   const std::vector<int>& types,
                   const std::vector<T2__>& hyper, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 385;
        local_scalar_t__ lp(DUMMY_VAR__);
        (void) lp;  // dummy to suppress unused var warning
        stan::math::initialize(lp, DUMMY_VAR__);
        stan::math::fill(lp, DUMMY_VAR__);
        current_statement_begin__ = 386;
        local_scalar_t__ a(DUMMY_VAR__);
        (void) a;  // dummy to suppress unused var warning
        stan::math::initialize(a, DUMMY_VAR__);
        stan::math::fill(a, DUMMY_VAR__);
        stan::math::assign(a,get_base1(hyper, 1, "hyper", 1));
        current_statement_begin__ = 387;
        local_scalar_t__ b(DUMMY_VAR__);
        (void) b;  // dummy to suppress unused var warning
        stan::math::initialize(b, DUMMY_VAR__);
        stan::math::fill(b, DUMMY_VAR__);
        stan::math::assign(b,get_base1(hyper, 2, "hyper", 1));
        current_statement_begin__ = 388;
        local_scalar_t__ c(DUMMY_VAR__);
        (void) c;  // dummy to suppress unused var warning
        stan::math::initialize(c, DUMMY_VAR__);
        stan::math::fill(c, DUMMY_VAR__);
        stan::math::assign(c,get_base1(hyper, 3, "hyper", 1));
        current_statement_begin__ = 389;
        local_scalar_t__ theta(DUMMY_VAR__);
        (void) theta;  // dummy to suppress unused var warning
        stan::math::initialize(theta, DUMMY_VAR__);
        stan::math::fill(theta, DUMMY_VAR__);
        current_statement_begin__ = 390;
        int L1(0);
        (void) L1;  // dummy to suppress unused var warning
        stan::math::fill(L1, std::numeric_limits<int>::min());
        stan::math::assign(L1,size(types));
        current_statement_begin__ = 391;
        int L2(0);
        (void) L2;  // dummy to suppress unused var warning
        stan::math::fill(L2, std::numeric_limits<int>::min());
        stan::math::assign(L2,size(hyper));
        current_statement_begin__ = 392;
        if (as_bool(logical_neq(L1, 2))) {
            current_statement_begin__ = 392;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "size of <types> must be 2, found = ";
            errmsg_stream__ << L1;
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 393;
        if (as_bool(logical_neq(L2, 3))) {
            current_statement_begin__ = 393;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "size of <hyper> must be 3, found = ";
            errmsg_stream__ << L2;
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 396;
        if (as_bool(logical_eq(get_base1(types, 2, "types", 1), 0))) {
            current_statement_begin__ = 397;
            stan::math::assign(lp, 0);
            current_statement_begin__ = 398;
            stan::math::assign(theta, x);
        } else if (as_bool(logical_eq(get_base1(types, 2, "types", 1), 1))) {
            current_statement_begin__ = 400;
            stan::math::assign(lp, stan::math::log(stan::math::fabs((2 * x))));
            current_statement_begin__ = 401;
            stan::math::assign(theta, square(x));
        } else {
            current_statement_begin__ = 403;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "types[2] must be either 0 or 1, found = ";
            errmsg_stream__ << get_base1(types, 2, "types", 1);
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 407;
        if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 1))) {
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 2))) {
            current_statement_begin__ = 410;
            stan::math::assign(lp, (lp + normal_log(theta, a, b)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 3))) {
            current_statement_begin__ = 412;
            stan::math::assign(lp, (lp + student_t_log(theta, a, 0.0, 1.0)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 4))) {
            current_statement_begin__ = 414;
            stan::math::assign(lp, (lp + gamma_log(theta, a, b)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 5))) {
            current_statement_begin__ = 416;
            stan::math::assign(lp, (lp + inv_gamma_log(theta, a, b)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 6))) {
            current_statement_begin__ = 418;
            stan::math::assign(lp, (lp + lognormal_log(theta, a, b)));
        } else {
            current_statement_begin__ = 420;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "types[1] must be an integer between 1 and 6, found = ";
            errmsg_stream__ << get_base1(types, 1, "types", 1);
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 423;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_log_prior_functor__ {
    template <typename T0__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T2__>::type
    operator()(const T0__& x,
                   const std::vector<int>& types,
                   const std::vector<T2__>& hyper, std::ostream* pstream__) const {
        return STAN_log_prior(x, types, hyper, pstream__);
    }
};
 } 
// [[Rcpp::export]]
void
STAN_check_real_positive(const double& a, std::ostream* pstream__ = 0){
  
user_ba55d9c055a2c2b2d9685c6148ca0029::STAN_check_real_positive<double>(a, pstream__);
}
// [[Rcpp::export]]
void
STAN_check_prob_positive(const double& a, std::ostream* pstream__ = 0){
  
user_ba55d9c055a2c2b2d9685c6148ca0029::STAN_check_prob_positive<double>(a, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_warp_input(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x,
                    const double& a, std::ostream* pstream__ = 0){
  return 
user_ba55d9c055a2c2b2d9685c6148ca0029::STAN_warp_input<double, double>(x, a, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_var_mask(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x,
                  const double& a, std::ostream* pstream__ = 0){
  return 
user_ba55d9c055a2c2b2d9685c6148ca0029::STAN_var_mask<double, double>(x, a, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_expand(const Eigen::Matrix<double, Eigen::Dynamic, 1>& v,
                const std::vector<int>& idx_expand, std::ostream* pstream__ = 0){
  return 
user_ba55d9c055a2c2b2d9685c6148ca0029::STAN_expand<double>(v, idx_expand, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_edit_x_cont(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x_cont,
                     const std::vector<int>& idx_expand,
                     const Eigen::Matrix<double, Eigen::Dynamic, 1>& teff_obs,
                     const Eigen::Matrix<double, Eigen::Dynamic, 1>& teff, std::ostream* pstream__ = 0){
  return 
user_ba55d9c055a2c2b2d9685c6148ca0029::STAN_edit_x_cont<double, double, double>(x_cont, idx_expand, teff_obs, teff, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_zerosum(const std::vector<int>& x1,
                             const std::vector<int>& x2,
                             const int& num_cat, std::ostream* pstream__ = 0){
  return 
user_ba55d9c055a2c2b2d9685c6148ca0029::STAN_kernel_base_zerosum(x1, x2, num_cat, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_cat(const std::vector<int>& x1,
                         const std::vector<int>& x2, std::ostream* pstream__ = 0){
  return 
user_ba55d9c055a2c2b2d9685c6148ca0029::STAN_kernel_base_cat(x1, x2, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_bin_mask(const std::vector<int>& x1,
                              const std::vector<int>& x2, std::ostream* pstream__ = 0){
  return 
user_ba55d9c055a2c2b2d9685c6148ca0029::STAN_kernel_base_bin_mask(x1, x2, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_const(const std::vector<int>& x1,
                      const std::vector<int>& x2,
                      const int& kernel_type,
                      const int& num_cat, std::ostream* pstream__ = 0){
  return 
user_ba55d9c055a2c2b2d9685c6148ca0029::STAN_kernel_const(x1, x2, kernel_type, num_cat, pstream__);
}
// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_const_all(const int& n1,
                          const int& n2,
                          const std::vector<std::vector<int> >& x1,
                          const std::vector<std::vector<int> >& x2,
                          const std::vector<std::vector<int> >& x1_mask,
                          const std::vector<std::vector<int> >& x2_mask,
                          const std::vector<int>& num_levels,
                          const std::vector<std::vector<int> >& components, std::ostream* pstream__ = 0){
  return 
user_ba55d9c055a2c2b2d9685c6148ca0029::STAN_kernel_const_all(n1, n2, x1, x2, x1_mask, x2_mask, num_levels, components, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_var_mask(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x1,
                              const Eigen::Matrix<double, Eigen::Dynamic, 1>& x2,
                              const double& steepness,
                              const std::vector<double>& vm_params, std::ostream* pstream__ = 0){
  return 
user_ba55d9c055a2c2b2d9685c6148ca0029::STAN_kernel_base_var_mask<double, double, double, double>(x1, x2, steepness, vm_params, pstream__);
}
// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_all(const int& n1,
                    const int& n2,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                    const std::vector<std::vector<int> >& components,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& x1,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& x2,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& x1_unnorm,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& x2_unnorm,
                    const std::vector<double>& alpha,
                    const std::vector<double>& ell,
                    const std::vector<double>& wrp,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& beta,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& teff,
                    const std::vector<std::vector<double> >& vm_params,
                    const std::vector<int>& idx1_expand,
                    const std::vector<int>& idx2_expand,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& teff_obs, std::ostream* pstream__ = 0){
  return 
user_ba55d9c055a2c2b2d9685c6148ca0029::STAN_kernel_all<double, double, double, double, double, double, double, double, double, double, double, double>(n1, n2, K_const, components, x1, x2, x1_unnorm, x2_unnorm, alpha, ell, wrp, beta, teff, vm_params, idx1_expand, idx2_expand, teff_obs, pstream__);
}
// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >
STAN_gp_posterior_helper(const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& Ly,
                             const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& K,
                             const Eigen::Matrix<double, Eigen::Dynamic, 1>& v, std::ostream* pstream__ = 0){
  return 
user_ba55d9c055a2c2b2d9685c6148ca0029::STAN_gp_posterior_helper<double, double, double>(Ly, K, v, pstream__);
}
// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >
STAN_gp_posterior(const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& KX,
                      const Eigen::Matrix<double, Eigen::Dynamic, 1>& y,
                      const double& delta,
                      const double& sigma, std::ostream* pstream__ = 0){
  return 
user_ba55d9c055a2c2b2d9685c6148ca0029::STAN_gp_posterior<double, double, double, double>(KX, y, delta, sigma, pstream__);
}
// [[Rcpp::export]]
double
STAN_log_prior(const double& x,
                   const std::vector<int>& types,
                   const std::vector<double>& hyper, std::ostream* pstream__ = 0){
  return 
user_ba55d9c055a2c2b2d9685c6148ca0029::STAN_log_prior<double, double>(x, types, hyper, pstream__);
}
