// [[Rcpp::depends(StanHeaders)]]
// [[Rcpp::depends(rstan)]]
// [[Rcpp::depends(RcppEigen)]]
// [[Rcpp::depends(BH)]]
#include <stan/math/prim/mat/fun/Eigen.hpp>
#include <boost/integer/integer_log2.hpp>
#include <exporter.h>
#include <RcppEigen.h>
// Code generated by Stan version 2.21.0

#include <stan/model/standalone_functions_header.hpp>

namespace user_dff3da8f6c90f97fde66aef4f06b2bab { 
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using namespace stan::math;

typedef Eigen::Matrix<double, Eigen::Dynamic, 1> vector_d;

typedef Eigen::Matrix<double, 1, Eigen::Dynamic> row_vector_d;

typedef Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> matrix_d;


stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "unknown file name");
    reader.add_event(502, 500, "end", "unknown file name");
    return reader;
}

template <typename T0__>
void
STAN_check_real_positive(const T0__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 4;
        if (as_bool(logical_lte(a, 0))) {

            current_statement_begin__ = 4;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "argument must be positive!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 5;
        if (as_bool(is_nan(a))) {

            current_statement_begin__ = 5;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "argument must not be NaN!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 6;
        if (as_bool(is_inf(a))) {

            current_statement_begin__ = 6;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "argument must be finite!";
            throw std::domain_error(errmsg_stream__.str());
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_check_real_positive_functor__ {
    template <typename T0__>
        void
    operator()(const T0__& a, std::ostream* pstream__) const {
        return STAN_check_real_positive(a, pstream__);
    }
};

template <typename T0__>
void
STAN_check_prob_positive(const T0__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 11;
        if (as_bool((primitive_value(logical_lte(a, 0)) || primitive_value(logical_gt(a, 1))))) {

            current_statement_begin__ = 11;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "argument must be on the interval (0, 1]!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 12;
        if (as_bool(is_nan(a))) {

            current_statement_begin__ = 12;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "argument must not be NaN!";
            throw std::domain_error(errmsg_stream__.str());
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_check_prob_positive_functor__ {
    template <typename T0__>
        void
    operator()(const T0__& a, std::ostream* pstream__) const {
        return STAN_check_prob_positive(a, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
STAN_warp_input(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                    const T1__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 17;
        STAN_check_real_positive(a, pstream__);
        current_statement_begin__ = 18;
        return stan::math::promote_scalar<fun_return_scalar_t__>(add(-(1), multiply(2, inv(add(1, stan::math::exp(multiply(-(a), x)))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_warp_input_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                    const T1__& a, std::ostream* pstream__) const {
        return STAN_warp_input(x, a, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
STAN_var_mask(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                  const T1__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 23;
        STAN_check_real_positive(a, pstream__);
        current_statement_begin__ = 24;
        return stan::math::promote_scalar<fun_return_scalar_t__>(inv(add(1, stan::math::exp(multiply(-(a), x)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_var_mask_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                  const T1__& a, std::ostream* pstream__) const {
        return STAN_var_mask(x, a, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_expand(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                const std::vector<int>& idx_expand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 29;
        int L(0);
        (void) L;  // dummy to suppress unused var warning
        stan::math::fill(L, std::numeric_limits<int>::min());
        stan::math::assign(L,num_elements(v));

        current_statement_begin__ = 30;
        validate_non_negative_index("v_add0", "(L + 1)", (L + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v_add0((L + 1));
        stan::math::initialize(v_add0, DUMMY_VAR__);
        stan::math::fill(v_add0, DUMMY_VAR__);
        stan::math::assign(v_add0,rep_vector(0.0, (L + 1)));


        current_statement_begin__ = 31;
        stan::model::assign(v_add0, 
                    stan::model::cons_list(stan::model::index_min_max(2, (L + 1)), stan::model::nil_index_list()), 
                    v, 
                    "assigning variable v_add0");
        current_statement_begin__ = 32;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::model::rvalue(v_add0, stan::model::cons_list(stan::model::index_multi(idx_expand), stan::model::nil_index_list()), "v_add0"));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_expand_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                const std::vector<int>& idx_expand, std::ostream* pstream__) const {
        return STAN_expand(v, idx_expand, pstream__);
    }
};

template <typename T0__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic, 1>
STAN_edit_dis_age(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_dis_age,
                      const std::vector<int>& idx_expand,
                      const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& teff_obs,
                      const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& teff, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 42;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(x_dis_age));

        current_statement_begin__ = 43;
        validate_non_negative_index("x_teff_obs", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_teff_obs(n);
        stan::math::initialize(x_teff_obs, DUMMY_VAR__);
        stan::math::fill(x_teff_obs, DUMMY_VAR__);
        stan::math::assign(x_teff_obs,STAN_expand(teff_obs, idx_expand, pstream__));

        current_statement_begin__ = 44;
        validate_non_negative_index("x_teff", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_teff(n);
        stan::math::initialize(x_teff, DUMMY_VAR__);
        stan::math::fill(x_teff, DUMMY_VAR__);
        stan::math::assign(x_teff,STAN_expand(teff, idx_expand, pstream__));


        current_statement_begin__ = 45;
        return stan::math::promote_scalar<fun_return_scalar_t__>(subtract(add(x_dis_age, x_teff_obs), x_teff));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_edit_dis_age_functor__ {
    template <typename T0__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_dis_age,
                      const std::vector<int>& idx_expand,
                      const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& teff_obs,
                      const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& teff, std::ostream* pstream__) const {
        return STAN_edit_dis_age(x_dis_age, idx_expand, teff_obs, teff, pstream__);
    }
};

Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_zerosum(const std::vector<int>& x1,
                             const std::vector<int>& x2,
                             const int& num_cat, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 53;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));

        current_statement_begin__ = 54;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));

        current_statement_begin__ = 55;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);


        current_statement_begin__ = 56;
        if (as_bool(logical_lte(num_cat, 1))) {

            current_statement_begin__ = 57;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "STAN_kernel_base_zerosum: <num_cat> must be at least 2!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 59;
        for (int i = 1; i <= n1; ++i) {

            current_statement_begin__ = 60;
            for (int j = 1; j <= n2; ++j) {

                current_statement_begin__ = 61;
                if (as_bool(logical_eq(get_base1(x1, i, "x1", 1), get_base1(x2, j, "x2", 1)))) {

                    current_statement_begin__ = 62;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                1, 
                                "assigning variable K");
                } else {

                    current_statement_begin__ = 64;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                -(inv((num_cat - 1))), 
                                "assigning variable K");
                }
            }
        }
        current_statement_begin__ = 68;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_kernel_base_zerosum_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                             const std::vector<int>& x2,
                             const int& num_cat, std::ostream* pstream__) const {
        return STAN_kernel_base_zerosum(x1, x2, num_cat, pstream__);
    }
};

Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_cat(const std::vector<int>& x1,
                         const std::vector<int>& x2, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 76;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));

        current_statement_begin__ = 77;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));

        current_statement_begin__ = 78;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);


        current_statement_begin__ = 79;
        for (int i = 1; i <= n1; ++i) {

            current_statement_begin__ = 80;
            for (int j = 1; j <= n2; ++j) {

                current_statement_begin__ = 81;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            logical_eq(get_base1(x1, i, "x1", 1), get_base1(x2, j, "x2", 1)), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 84;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_kernel_base_cat_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                         const std::vector<int>& x2, std::ostream* pstream__) const {
        return STAN_kernel_base_cat(x1, x2, pstream__);
    }
};

Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_bin(const std::vector<int>& x1,
                         const std::vector<int>& x2,
                         const int& c, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 93;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));

        current_statement_begin__ = 94;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));

        current_statement_begin__ = 95;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);


        current_statement_begin__ = 96;
        for (int i = 1; i <= n1; ++i) {

            current_statement_begin__ = 97;
            for (int j = 1; j <= n2; ++j) {

                current_statement_begin__ = 98;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            (logical_eq(get_base1(x1, i, "x1", 1), c) * logical_eq(get_base1(x2, j, "x2", 1), c)), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 101;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_kernel_base_bin_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                         const std::vector<int>& x2,
                         const int& c, std::ostream* pstream__) const {
        return STAN_kernel_base_bin(x1, x2, c, pstream__);
    }
};

Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_disease_mask(const std::vector<int>& x1,
                                  const std::vector<int>& x2, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 109;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));

        current_statement_begin__ = 110;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));

        current_statement_begin__ = 111;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);


        current_statement_begin__ = 112;
        for (int i = 1; i <= n1; ++i) {

            current_statement_begin__ = 113;
            for (int j = 1; j <= n2; ++j) {

                current_statement_begin__ = 114;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            (logical_gt(get_base1(x1, i, "x1", 1), 0) * logical_gt(get_base1(x2, j, "x2", 1), 0)), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 117;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_kernel_base_disease_mask_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                                  const std::vector<int>& x2, std::ostream* pstream__) const {
        return STAN_kernel_base_disease_mask(x1, x2, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_var_mask(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                              const T2__& steepness,
                              const std::vector<T3__>& vm_params, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 127;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));

        current_statement_begin__ = 128;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));

        current_statement_begin__ = 129;
        local_scalar_t__ a(DUMMY_VAR__);
        (void) a;  // dummy to suppress unused var warning
        stan::math::initialize(a, DUMMY_VAR__);
        stan::math::fill(a, DUMMY_VAR__);
        stan::math::assign(a,(steepness * get_base1(vm_params, 2, "vm_params", 1)));

        current_statement_begin__ = 130;
        local_scalar_t__ r(DUMMY_VAR__);
        (void) r;  // dummy to suppress unused var warning
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);
        stan::math::assign(r,(inv(a) * logit(get_base1(vm_params, 1, "vm_params", 1))));

        current_statement_begin__ = 131;
        validate_non_negative_index("s1", "n1", n1);
        validate_non_negative_index("s1", "1", 1);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> s1(n1, 1);
        stan::math::initialize(s1, DUMMY_VAR__);
        stan::math::fill(s1, DUMMY_VAR__);
        stan::math::assign(s1,to_matrix(STAN_var_mask(subtract(x1, r), a, pstream__)));

        current_statement_begin__ = 132;
        validate_non_negative_index("s2", "n2", n2);
        validate_non_negative_index("s2", "1", 1);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> s2(n2, 1);
        stan::math::initialize(s2, DUMMY_VAR__);
        stan::math::fill(s2, DUMMY_VAR__);
        stan::math::assign(s2,to_matrix(STAN_var_mask(subtract(x2, r), a, pstream__)));

        current_statement_begin__ = 133;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        stan::math::assign(K,multiply(s1, transpose(s2)));


        current_statement_begin__ = 134;
        STAN_check_real_positive(steepness, pstream__);
        current_statement_begin__ = 135;
        STAN_check_real_positive(get_base1(vm_params, 2, "vm_params", 1), pstream__);
        current_statement_begin__ = 136;
        STAN_check_prob_positive(get_base1(vm_params, 1, "vm_params", 1), pstream__);
        current_statement_begin__ = 137;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_kernel_base_var_mask_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                              const T2__& steepness,
                              const std::vector<T3__>& vm_params, std::ostream* pstream__) const {
        return STAN_kernel_base_var_mask(x1, x2, steepness, vm_params, pstream__);
    }
};

Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_discrete(const std::vector<int>& x1,
                         const std::vector<int>& x2,
                         const int& kernel_type,
                         const int& num_cat, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 149;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));

        current_statement_begin__ = 150;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));

        current_statement_begin__ = 151;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);


        current_statement_begin__ = 152;
        if (as_bool(logical_eq(kernel_type, 0))) {

            current_statement_begin__ = 153;
            stan::math::assign(K, STAN_kernel_base_zerosum(x1, x2, num_cat, pstream__));
        } else if (as_bool(logical_eq(kernel_type, 1))) {

            current_statement_begin__ = 155;
            stan::math::assign(K, STAN_kernel_base_cat(x1, x2, pstream__));
        } else if (as_bool(logical_eq(kernel_type, 2))) {

            current_statement_begin__ = 157;
            stan::math::assign(K, STAN_kernel_base_bin(x1, x2, 1, pstream__));
        } else {

            current_statement_begin__ = 159;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "invalid kernel type";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 161;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_kernel_discrete_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                         const std::vector<int>& x2,
                         const int& kernel_type,
                         const int& num_cat, std::ostream* pstream__) const {
        return STAN_kernel_discrete(x1, x2, kernel_type, num_cat, pstream__);
    }
};

Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_fixed(const std::vector<int>& x1,
                      const std::vector<int>& x2,
                      const int& num_levels,
                      const int& ctype,
                      const int& ktype, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 175;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));

        current_statement_begin__ = 176;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));

        current_statement_begin__ = 177;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);


        current_statement_begin__ = 178;
        if (as_bool((primitive_value(logical_eq(ctype, 0)) || primitive_value(logical_eq(ctype, 2))))) {

            current_statement_begin__ = 179;
            stan::math::assign(K, STAN_kernel_discrete(x1, x2, ktype, num_levels, pstream__));
        } else if (as_bool(logical_eq(ctype, 3))) {

            current_statement_begin__ = 181;
            stan::math::assign(K, STAN_kernel_base_disease_mask(x1, x2, pstream__));
        } else {

            current_statement_begin__ = 183;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "STAN_kernel_fixed: <ctype> should be 0, 2, or 3!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 185;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_kernel_fixed_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                      const std::vector<int>& x2,
                      const int& num_levels,
                      const int& ctype,
                      const int& ktype, std::ostream* pstream__) const {
        return STAN_kernel_fixed(x1, x2, num_levels, ctype, ktype, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_stationary(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& K_fixed,
                           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x1,
                           const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& x2,
                           const int& ctype,
                           const T4__& alpha,
                           const T5__& ell, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 200;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));

        current_statement_begin__ = 201;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));

        current_statement_begin__ = 202;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);


        current_statement_begin__ = 203;
        if (as_bool((primitive_value(logical_eq(ctype, 1)) || primitive_value(logical_eq(ctype, 2))))) {

            current_statement_begin__ = 204;
            stan::math::assign(K, cov_exp_quad(to_array_1d(x1), to_array_1d(x2), alpha, ell));
            current_statement_begin__ = 205;
            if (as_bool(logical_eq(ctype, 2))) {

                current_statement_begin__ = 206;
                stan::math::assign(K, elt_multiply(K, K_fixed));
            }
        } else {

            current_statement_begin__ = 209;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "STAN_kernel_stationary: <ctype> must be 1 or 2!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 211;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_kernel_stationary_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& K_fixed,
                           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x1,
                           const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& x2,
                           const int& ctype,
                           const T4__& alpha,
                           const T5__& ell, std::ostream* pstream__) const {
        return STAN_kernel_stationary(K_fixed, x1, x2, ctype, alpha, ell, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_nonstationary(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                              const T2__& alpha,
                              const T3__& ell,
                              const T4__& steepness,
                              const std::vector<std::vector<T5__> >& vm_params, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 225;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));

        current_statement_begin__ = 226;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));

        current_statement_begin__ = 227;
        validate_non_negative_index("w1", "n1", n1);
        std::vector<local_scalar_t__  > w1(n1, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(w1, DUMMY_VAR__);
        stan::math::fill(w1, DUMMY_VAR__);
        stan::math::assign(w1,to_array_1d(STAN_warp_input(x1, steepness, pstream__)));

        current_statement_begin__ = 228;
        validate_non_negative_index("w2", "n2", n2);
        std::vector<local_scalar_t__  > w2(n2, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(w2, DUMMY_VAR__);
        stan::math::fill(w2, DUMMY_VAR__);
        stan::math::assign(w2,to_array_1d(STAN_warp_input(x2, steepness, pstream__)));

        current_statement_begin__ = 229;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        stan::math::assign(K,cov_exp_quad(w1, w2, alpha, ell));

        current_statement_begin__ = 232;
        int is_var_masked(0);
        (void) is_var_masked;  // dummy to suppress unused var warning
        stan::math::fill(is_var_masked, std::numeric_limits<int>::min());
        stan::math::assign(is_var_masked,size(vm_params));


        current_statement_begin__ = 233;
        if (as_bool(is_var_masked)) {

            current_statement_begin__ = 234;
            stan::math::assign(K, elt_multiply(K, STAN_kernel_base_var_mask(x1, x2, steepness, get_base1(vm_params, 1, "vm_params", 1), pstream__)));
        }
        current_statement_begin__ = 237;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_kernel_nonstationary_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                              const T2__& alpha,
                              const T3__& ell,
                              const T4__& steepness,
                              const std::vector<std::vector<T5__> >& vm_params, std::ostream* pstream__) const {
        return STAN_kernel_nonstationary(x1, x2, alpha, ell, steepness, vm_params, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T11__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T11__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_disease(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& K_fixed,
                        const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x1,
                        const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& x2,
                        const T3__& alpha,
                        const T4__& ell,
                        const T5__& wrp,
                        const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic, 1> >& beta,
                        const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic, 1> >& teff,
                        const std::vector<std::vector<T8__> >& vm_params,
                        const std::vector<std::vector<int> >& idx1_expand,
                        const std::vector<std::vector<int> >& idx2_expand,
                        const std::vector<Eigen::Matrix<T11__, Eigen::Dynamic, 1> >& teff_obs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T11__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 260;
        int is_heter(0);
        (void) is_heter;  // dummy to suppress unused var warning
        stan::math::fill(is_heter, std::numeric_limits<int>::min());
        stan::math::assign(is_heter,size(beta));

        current_statement_begin__ = 261;
        int is_uncrt(0);
        (void) is_uncrt;  // dummy to suppress unused var warning
        stan::math::fill(is_uncrt, std::numeric_limits<int>::min());
        stan::math::assign(is_uncrt,size(teff));

        current_statement_begin__ = 262;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));

        current_statement_begin__ = 263;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));

        current_statement_begin__ = 264;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        stan::math::assign(K,K_fixed);

        current_statement_begin__ = 267;
        validate_non_negative_index("t1", "n1", n1);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> t1(n1);
        stan::math::initialize(t1, DUMMY_VAR__);
        stan::math::fill(t1, DUMMY_VAR__);

        current_statement_begin__ = 268;
        validate_non_negative_index("t2", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> t2(n2);
        stan::math::initialize(t2, DUMMY_VAR__);
        stan::math::fill(t2, DUMMY_VAR__);


        current_statement_begin__ = 269;
        if (as_bool(is_uncrt)) {

            current_statement_begin__ = 270;
            stan::math::assign(t1, STAN_edit_dis_age(x1, get_base1(idx1_expand, 1, "idx1_expand", 1), get_base1(teff_obs, 1, "teff_obs", 1), get_base1(teff, 1, "teff", 1), pstream__));
            current_statement_begin__ = 271;
            stan::math::assign(t2, STAN_edit_dis_age(x2, get_base1(idx2_expand, 1, "idx2_expand", 1), get_base1(teff_obs, 1, "teff_obs", 1), get_base1(teff, 1, "teff", 1), pstream__));
        } else {

            current_statement_begin__ = 273;
            stan::math::assign(t1, x1);
            current_statement_begin__ = 274;
            stan::math::assign(t2, x2);
        }
        current_statement_begin__ = 278;
        stan::math::assign(K, elt_multiply(K, STAN_kernel_nonstationary(t1, t2, alpha, ell, wrp, vm_params, pstream__)));
        current_statement_begin__ = 281;
        if (as_bool(is_heter)) {
            {
            current_statement_begin__ = 282;
            validate_non_negative_index("b1", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b1(n1);
            stan::math::initialize(b1, DUMMY_VAR__);
            stan::math::fill(b1, DUMMY_VAR__);
            stan::math::assign(b1,STAN_expand(get_base1(beta, 1, "beta", 1), get_base1(idx1_expand, 1, "idx1_expand", 1), pstream__));

            current_statement_begin__ = 283;
            validate_non_negative_index("b2", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b2(n2);
            stan::math::initialize(b2, DUMMY_VAR__);
            stan::math::fill(b2, DUMMY_VAR__);
            stan::math::assign(b2,STAN_expand(get_base1(beta, 1, "beta", 1), get_base1(idx2_expand, 1, "idx2_expand", 1), pstream__));

            current_statement_begin__ = 284;
            validate_non_negative_index("K_beta", "n1", n1);
            validate_non_negative_index("K_beta", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K_beta(n1, n2);
            stan::math::initialize(K_beta, DUMMY_VAR__);
            stan::math::fill(K_beta, DUMMY_VAR__);
            stan::math::assign(K_beta,multiply(to_matrix(b1), transpose(to_matrix(b2))));


            current_statement_begin__ = 285;
            stan::math::assign(K, elt_multiply(K, K_beta));
            }
        }
        current_statement_begin__ = 288;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_kernel_disease_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T11__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T11__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& K_fixed,
                        const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x1,
                        const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& x2,
                        const T3__& alpha,
                        const T4__& ell,
                        const T5__& wrp,
                        const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic, 1> >& beta,
                        const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic, 1> >& teff,
                        const std::vector<std::vector<T8__> >& vm_params,
                        const std::vector<std::vector<int> >& idx1_expand,
                        const std::vector<std::vector<int> >& idx2_expand,
                        const std::vector<Eigen::Matrix<T11__, Eigen::Dynamic, 1> >& teff_obs, std::ostream* pstream__) const {
        return STAN_kernel_disease(K_fixed, x1, x2, alpha, ell, wrp, beta, teff, vm_params, idx1_expand, idx2_expand, teff_obs, pstream__);
    }
};

std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_fixed_all(const int& n1,
                          const int& n2,
                          const std::vector<std::vector<int> >& x1,
                          const std::vector<std::vector<int> >& x2,
                          const std::vector<int>& num_levels,
                          const std::vector<std::vector<int> >& components, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 302;
        int L1(0);
        (void) L1;  // dummy to suppress unused var warning
        stan::math::fill(L1, std::numeric_limits<int>::min());
        stan::math::assign(L1,size(x1));

        current_statement_begin__ = 303;
        int L2(0);
        (void) L2;  // dummy to suppress unused var warning
        stan::math::fill(L2, std::numeric_limits<int>::min());
        stan::math::assign(L2,size(x2));

        current_statement_begin__ = 304;
        int L3(0);
        (void) L3;  // dummy to suppress unused var warning
        stan::math::fill(L3, std::numeric_limits<int>::min());
        stan::math::assign(L3,size(num_levels));

        current_statement_begin__ = 305;
        int L4(0);
        (void) L4;  // dummy to suppress unused var warning
        stan::math::fill(L4, std::numeric_limits<int>::min());
        stan::math::assign(L4,size(components));

        current_statement_begin__ = 306;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(get_base1(components, 1, "components", 1)));

        current_statement_begin__ = 307;
        validate_non_negative_index("K_fixed", "n1", n1);
        validate_non_negative_index("K_fixed", "n2", n2);
        validate_non_negative_index("K_fixed", "num_comps", num_comps);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > K_fixed(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n1, n2));
        stan::math::initialize(K_fixed, DUMMY_VAR__);
        stan::math::fill(K_fixed, DUMMY_VAR__);


        current_statement_begin__ = 308;
        if (as_bool(logical_neq(L1, L2))) {

            current_statement_begin__ = 309;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "first dims of <x1> and <x2> must match! ";
            errmsg_stream__ << "found = (";
            errmsg_stream__ << L1;
            errmsg_stream__ << ", ";
            errmsg_stream__ << L2;
            errmsg_stream__ << ")";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 312;
        if (as_bool(logical_neq(L1, L3))) {

            current_statement_begin__ = 313;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "size of <num_levels> must match first dim of <x1> and <x2>! ";
            errmsg_stream__ << "found = ";
            errmsg_stream__ << L3;
            errmsg_stream__ << ", should be = ";
            errmsg_stream__ << L1;
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 316;
        if (as_bool(logical_neq(L4, 4))) {

            current_statement_begin__ = 317;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "first dimension of <components> must be 4!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 320;
        for (int j = 1; j <= num_comps; ++j) {
            {
            current_statement_begin__ = 321;
            int ctype(0);
            (void) ctype;  // dummy to suppress unused var warning
            stan::math::fill(ctype, std::numeric_limits<int>::min());
            stan::math::assign(ctype,get_base1(get_base1(components, 1, "components", 1), j, "components", 2));


            current_statement_begin__ = 322;
            if (as_bool(logical_neq(ctype, 1))) {
                {
                current_statement_begin__ = 323;
                int ktype(0);
                (void) ktype;  // dummy to suppress unused var warning
                stan::math::fill(ktype, std::numeric_limits<int>::min());
                stan::math::assign(ktype,get_base1(get_base1(components, 2, "components", 1), j, "components", 2));

                current_statement_begin__ = 324;
                int idx(0);
                (void) idx;  // dummy to suppress unused var warning
                stan::math::fill(idx, std::numeric_limits<int>::min());
                stan::math::assign(idx,get_base1(get_base1(components, 3, "components", 1), j, "components", 2));

                current_statement_begin__ = 325;
                validate_non_negative_index("x1_j", "n1", n1);
                std::vector<int  > x1_j(n1, int(0));
                stan::math::fill(x1_j, std::numeric_limits<int>::min());
                stan::math::assign(x1_j,get_base1(x1, idx, "x1", 1));

                current_statement_begin__ = 326;
                validate_non_negative_index("x2_j", "n2", n2);
                std::vector<int  > x2_j(n2, int(0));
                stan::math::fill(x2_j, std::numeric_limits<int>::min());
                stan::math::assign(x2_j,get_base1(x2, idx, "x2", 1));

                current_statement_begin__ = 327;
                int n_levels(0);
                (void) n_levels;  // dummy to suppress unused var warning
                stan::math::fill(n_levels, std::numeric_limits<int>::min());
                stan::math::assign(n_levels,get_base1(num_levels, idx, "num_levels", 1));


                current_statement_begin__ = 328;
                stan::model::assign(K_fixed, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            STAN_kernel_fixed(x1_j, x2_j, n_levels, ctype, ktype, pstream__), 
                            "assigning variable K_fixed");
                }
            } else {

                current_statement_begin__ = 330;
                stan::model::assign(K_fixed, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            rep_matrix(0, n1, n2), 
                            "assigning variable K_fixed");
            }
            }
        }
        current_statement_begin__ = 333;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K_fixed);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_kernel_fixed_all_functor__ {
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const int& n1,
                          const int& n2,
                          const std::vector<std::vector<int> >& x1,
                          const std::vector<std::vector<int> >& x2,
                          const std::vector<int>& num_levels,
                          const std::vector<std::vector<int> >& components, std::ostream* pstream__) const {
        return STAN_kernel_fixed_all(n1, n2, x1, x2, num_levels, components, pstream__);
    }
};

template <typename T2__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T14__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T9__, T10__, typename boost::math::tools::promote_args<T11__, T14__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_all(const int& n1,
                    const int& n2,
                    const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic> >& K_fixed,
                    const std::vector<std::vector<int> >& components,
                    const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, 1> >& x1,
                    const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic, 1> >& x2,
                    const std::vector<T6__>& alpha,
                    const std::vector<T7__>& ell,
                    const std::vector<T8__>& wrp,
                    const std::vector<Eigen::Matrix<T9__, Eigen::Dynamic, 1> >& beta,
                    const std::vector<Eigen::Matrix<T10__, Eigen::Dynamic, 1> >& teff,
                    const std::vector<std::vector<T11__> >& vm_params,
                    const std::vector<std::vector<int> >& idx1_expand,
                    const std::vector<std::vector<int> >& idx2_expand,
                    const std::vector<Eigen::Matrix<T14__, Eigen::Dynamic, 1> >& teff_obs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T9__, T10__, typename boost::math::tools::promote_args<T11__, T14__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 357;
        int ell_idx(0);
        (void) ell_idx;  // dummy to suppress unused var warning
        stan::math::fill(ell_idx, std::numeric_limits<int>::min());
        stan::math::assign(ell_idx,0);

        current_statement_begin__ = 358;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(get_base1(components, 1, "components", 1)));

        current_statement_begin__ = 359;
        validate_non_negative_index("KX", "n1", n1);
        validate_non_negative_index("KX", "n2", n2);
        validate_non_negative_index("KX", "num_comps", num_comps);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n1, n2));
        stan::math::initialize(KX, DUMMY_VAR__);
        stan::math::fill(KX, DUMMY_VAR__);

        current_statement_begin__ = 360;
        int L1(0);
        (void) L1;  // dummy to suppress unused var warning
        stan::math::fill(L1, std::numeric_limits<int>::min());
        stan::math::assign(L1,size(x1));

        current_statement_begin__ = 361;
        int L2(0);
        (void) L2;  // dummy to suppress unused var warning
        stan::math::fill(L2, std::numeric_limits<int>::min());
        stan::math::assign(L2,size(x2));

        current_statement_begin__ = 362;
        int L3(0);
        (void) L3;  // dummy to suppress unused var warning
        stan::math::fill(L3, std::numeric_limits<int>::min());
        stan::math::assign(L3,size(K_fixed));

        current_statement_begin__ = 363;
        int L4(0);
        (void) L4;  // dummy to suppress unused var warning
        stan::math::fill(L4, std::numeric_limits<int>::min());
        stan::math::assign(L4,size(components));


        current_statement_begin__ = 365;
        if (as_bool(logical_neq(L1, L2))) {

            current_statement_begin__ = 366;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "first dims of <x1> and <x2> must match! ";
            errmsg_stream__ << "found = (";
            errmsg_stream__ << L1;
            errmsg_stream__ << ", ";
            errmsg_stream__ << L2;
            errmsg_stream__ << ")";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 369;
        if (as_bool(logical_neq(num_comps, L3))) {

            current_statement_begin__ = 370;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "second dim of <components> and first dim of <K_fixed> must match! ";
            errmsg_stream__ << "found = (";
            errmsg_stream__ << num_comps;
            errmsg_stream__ << ", ";
            errmsg_stream__ << L3;
            errmsg_stream__ << ")";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 373;
        if (as_bool(logical_neq(L4, 4))) {

            current_statement_begin__ = 374;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "first dimension of <components> must be 4!";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 377;
        for (int j = 1; j <= num_comps; ++j) {
            {
            current_statement_begin__ = 380;
            int ctype(0);
            (void) ctype;  // dummy to suppress unused var warning
            stan::math::fill(ctype, std::numeric_limits<int>::min());
            stan::math::assign(ctype,get_base1(get_base1(components, 1, "components", 1), j, "components", 2));

            current_statement_begin__ = 381;
            int idx(0);
            (void) idx;  // dummy to suppress unused var warning
            stan::math::fill(idx, std::numeric_limits<int>::min());
            stan::math::assign(idx,get_base1(get_base1(components, 4, "components", 1), j, "components", 2));


            current_statement_begin__ = 384;
            if (as_bool(logical_eq(ctype, 0))) {

                current_statement_begin__ = 385;
                stan::model::assign(KX, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            multiply(square(get_base1(alpha, j, "alpha", 1)), get_base1(K_fixed, j, "K_fixed", 1)), 
                            "assigning variable KX");
            } else {

                current_statement_begin__ = 387;
                stan::math::assign(ell_idx, (ell_idx + 1));
                current_statement_begin__ = 388;
                if (as_bool(logical_neq(ctype, 3))) {

                    current_statement_begin__ = 389;
                    stan::model::assign(KX, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                STAN_kernel_stationary(get_base1(K_fixed, j, "K_fixed", 1), get_base1(x1, idx, "x1", 1), get_base1(x2, idx, "x2", 1), ctype, get_base1(alpha, j, "alpha", 1), get_base1(ell, ell_idx, "ell", 1), pstream__), 
                                "assigning variable KX");
                } else {

                    current_statement_begin__ = 392;
                    stan::model::assign(KX, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                STAN_kernel_disease(get_base1(K_fixed, j, "K_fixed", 1), get_base1(x1, idx, "x1", 1), get_base1(x2, idx, "x2", 1), get_base1(alpha, j, "alpha", 1), get_base1(ell, ell_idx, "ell", 1), get_base1(wrp, 1, "wrp", 1), beta, teff, vm_params, idx1_expand, idx2_expand, teff_obs, pstream__), 
                                "assigning variable KX");
                }
            }
            }
        }
        current_statement_begin__ = 399;
        return stan::math::promote_scalar<fun_return_scalar_t__>(KX);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_kernel_all_functor__ {
    template <typename T2__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T14__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T9__, T10__, typename boost::math::tools::promote_args<T11__, T14__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const int& n1,
                    const int& n2,
                    const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic> >& K_fixed,
                    const std::vector<std::vector<int> >& components,
                    const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, 1> >& x1,
                    const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic, 1> >& x2,
                    const std::vector<T6__>& alpha,
                    const std::vector<T7__>& ell,
                    const std::vector<T8__>& wrp,
                    const std::vector<Eigen::Matrix<T9__, Eigen::Dynamic, 1> >& beta,
                    const std::vector<Eigen::Matrix<T10__, Eigen::Dynamic, 1> >& teff,
                    const std::vector<std::vector<T11__> >& vm_params,
                    const std::vector<std::vector<int> >& idx1_expand,
                    const std::vector<std::vector<int> >& idx2_expand,
                    const std::vector<Eigen::Matrix<T14__, Eigen::Dynamic, 1> >& teff_obs, std::ostream* pstream__) const {
        return STAN_kernel_all(n1, n2, K_fixed, components, x1, x2, alpha, ell, wrp, beta, teff, vm_params, idx1_expand, idx2_expand, teff_obs, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1> >
STAN_gp_posterior_helper(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& Ly,
                             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& K,
                             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& v, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 403;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(v));

        current_statement_begin__ = 404;
        validate_non_negative_index("A", "n", n);
        validate_non_negative_index("A", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> A(n, n);
        stan::math::initialize(A, DUMMY_VAR__);
        stan::math::fill(A, DUMMY_VAR__);
        stan::math::assign(A,mdivide_left_tri_low(Ly, transpose(K)));

        current_statement_begin__ = 405;
        validate_non_negative_index("f_post", "n", n);
        validate_non_negative_index("f_post", "2", 2);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > f_post(2, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(n));
        stan::math::initialize(f_post, DUMMY_VAR__);
        stan::math::fill(f_post, DUMMY_VAR__);


        current_statement_begin__ = 406;
        stan::model::assign(f_post, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    multiply(transpose(A), v), 
                    "assigning variable f_post");
        current_statement_begin__ = 407;
        stan::model::assign(f_post, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    diagonal(subtract(K, crossprod(A))), 
                    "assigning variable f_post");
        current_statement_begin__ = 408;
        return stan::math::promote_scalar<fun_return_scalar_t__>(f_post);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_gp_posterior_helper_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1> >
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& Ly,
                             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& K,
                             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& v, std::ostream* pstream__) const {
        return STAN_gp_posterior_helper(Ly, K, v, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, 1> >
STAN_gp_posterior(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& KX,
                      const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& y,
                      const T2__& delta,
                      const T3__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 420;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(KX));

        current_statement_begin__ = 421;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(y));

        current_statement_begin__ = 422;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,(num_comps + 1));

        current_statement_begin__ = 423;
        validate_non_negative_index("inds", "2", 2);
        std::vector<int  > inds(2, int(0));
        stan::math::fill(inds, std::numeric_limits<int>::min());

        current_statement_begin__ = 424;
        validate_non_negative_index("F_POST", "n", n);
        validate_non_negative_index("F_POST", "(2 * J)", (2 * J));
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > F_POST((2 * J), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(n));
        stan::math::initialize(F_POST, DUMMY_VAR__);
        stan::math::fill(F_POST, DUMMY_VAR__);

        current_statement_begin__ = 425;
        validate_non_negative_index("v", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v(n);
        stan::math::initialize(v, DUMMY_VAR__);
        stan::math::fill(v, DUMMY_VAR__);

        current_statement_begin__ = 426;
        validate_non_negative_index("Ky", "n", n);
        validate_non_negative_index("Ky", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Ky(n, n);
        stan::math::initialize(Ky, DUMMY_VAR__);
        stan::math::fill(Ky, DUMMY_VAR__);

        current_statement_begin__ = 427;
        validate_non_negative_index("Ly", "n", n);
        validate_non_negative_index("Ly", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Ly(n, n);
        stan::math::initialize(Ly, DUMMY_VAR__);
        stan::math::fill(Ly, DUMMY_VAR__);

        current_statement_begin__ = 430;
        validate_non_negative_index("Kx", "n", n);
        validate_non_negative_index("Kx", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Kx(n, n);
        stan::math::initialize(Kx, DUMMY_VAR__);
        stan::math::fill(Kx, DUMMY_VAR__);
        stan::math::assign(Kx,rep_matrix(0.0, n, n));

        current_statement_begin__ = 431;
        validate_non_negative_index("delta_vec", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta_vec(n);
        stan::math::initialize(delta_vec, DUMMY_VAR__);
        stan::math::fill(delta_vec, DUMMY_VAR__);
        stan::math::assign(delta_vec,rep_vector(delta, n));

        current_statement_begin__ = 432;
        validate_non_negative_index("sigma2_vec", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma2_vec(n);
        stan::math::initialize(sigma2_vec, DUMMY_VAR__);
        stan::math::fill(sigma2_vec, DUMMY_VAR__);
        stan::math::assign(sigma2_vec,rep_vector(square(sigma), n));


        current_statement_begin__ = 433;
        for (int j = 1; j <= num_comps; ++j) {

            current_statement_begin__ = 434;
            stan::math::assign(Kx, add(Kx, get_base1(KX, j, "KX", 1)));
        }
        current_statement_begin__ = 436;
        stan::math::assign(Ky, add(add(Kx, diag_matrix(sigma2_vec)), diag_matrix(multiply(num_comps, delta_vec))));
        current_statement_begin__ = 439;
        stan::math::assign(Ly, cholesky_decompose(Ky));
        current_statement_begin__ = 440;
        stan::math::assign(v, mdivide_left_tri_low(Ly, y));
        current_statement_begin__ = 443;
        for (int j = 1; j <= num_comps; ++j) {

            current_statement_begin__ = 444;
            stan::math::assign(inds, static_cast<std::vector<int> >(stan::math::array_builder<int >().add(j).add((J + j)).array()));
            current_statement_begin__ = 445;
            stan::model::assign(F_POST, 
                        stan::model::cons_list(stan::model::index_multi(inds), stan::model::nil_index_list()), 
                        STAN_gp_posterior_helper(Ly, get_base1(KX, j, "KX", 1), v, pstream__), 
                        "assigning variable F_POST");
        }
        current_statement_begin__ = 449;
        stan::math::assign(inds, static_cast<std::vector<int> >(stan::math::array_builder<int >().add(J).add((2 * J)).array()));
        current_statement_begin__ = 450;
        stan::model::assign(F_POST, 
                    stan::model::cons_list(stan::model::index_multi(inds), stan::model::nil_index_list()), 
                    STAN_gp_posterior_helper(Ly, Kx, v, pstream__), 
                    "assigning variable F_POST");
        current_statement_begin__ = 451;
        return stan::math::promote_scalar<fun_return_scalar_t__>(F_POST);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_gp_posterior_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, 1> >
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& KX,
                      const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& y,
                      const T2__& delta,
                      const T3__& sigma, std::ostream* pstream__) const {
        return STAN_gp_posterior(KX, y, delta, sigma, pstream__);
    }
};

template <typename T0__, typename T2__>
typename boost::math::tools::promote_args<T0__, T2__>::type
STAN_log_prior(const T0__& x,
                   const std::vector<int>& types,
                   const std::vector<T2__>& hyper, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 460;
        local_scalar_t__ lp(DUMMY_VAR__);
        (void) lp;  // dummy to suppress unused var warning
        stan::math::initialize(lp, DUMMY_VAR__);
        stan::math::fill(lp, DUMMY_VAR__);

        current_statement_begin__ = 461;
        local_scalar_t__ a(DUMMY_VAR__);
        (void) a;  // dummy to suppress unused var warning
        stan::math::initialize(a, DUMMY_VAR__);
        stan::math::fill(a, DUMMY_VAR__);
        stan::math::assign(a,get_base1(hyper, 1, "hyper", 1));

        current_statement_begin__ = 462;
        local_scalar_t__ b(DUMMY_VAR__);
        (void) b;  // dummy to suppress unused var warning
        stan::math::initialize(b, DUMMY_VAR__);
        stan::math::fill(b, DUMMY_VAR__);
        stan::math::assign(b,get_base1(hyper, 2, "hyper", 1));

        current_statement_begin__ = 463;
        local_scalar_t__ c(DUMMY_VAR__);
        (void) c;  // dummy to suppress unused var warning
        stan::math::initialize(c, DUMMY_VAR__);
        stan::math::fill(c, DUMMY_VAR__);
        stan::math::assign(c,get_base1(hyper, 3, "hyper", 1));

        current_statement_begin__ = 464;
        local_scalar_t__ theta(DUMMY_VAR__);
        (void) theta;  // dummy to suppress unused var warning
        stan::math::initialize(theta, DUMMY_VAR__);
        stan::math::fill(theta, DUMMY_VAR__);

        current_statement_begin__ = 465;
        int L1(0);
        (void) L1;  // dummy to suppress unused var warning
        stan::math::fill(L1, std::numeric_limits<int>::min());
        stan::math::assign(L1,size(types));

        current_statement_begin__ = 466;
        int L2(0);
        (void) L2;  // dummy to suppress unused var warning
        stan::math::fill(L2, std::numeric_limits<int>::min());
        stan::math::assign(L2,size(hyper));


        current_statement_begin__ = 467;
        if (as_bool(logical_neq(L1, 2))) {

            current_statement_begin__ = 467;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "size of <types> must be 2, found = ";
            errmsg_stream__ << L1;
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 468;
        if (as_bool(logical_neq(L2, 3))) {

            current_statement_begin__ = 468;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "size of <hyper> must be 3, found = ";
            errmsg_stream__ << L2;
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 471;
        if (as_bool(logical_eq(get_base1(types, 2, "types", 1), 0))) {

            current_statement_begin__ = 472;
            stan::math::assign(lp, 0);
            current_statement_begin__ = 473;
            stan::math::assign(theta, x);
        } else if (as_bool(logical_eq(get_base1(types, 2, "types", 1), 1))) {

            current_statement_begin__ = 475;
            stan::math::assign(lp, stan::math::log(stan::math::fabs((2 * x))));
            current_statement_begin__ = 476;
            stan::math::assign(theta, square(x));
        } else {

            current_statement_begin__ = 478;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "types[2] must be either 0 or 1, found = ";
            errmsg_stream__ << get_base1(types, 2, "types", 1);
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 482;
        if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 1))) {

        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 2))) {

            current_statement_begin__ = 485;
            stan::math::assign(lp, (lp + normal_log(theta, a, b)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 3))) {

            current_statement_begin__ = 487;
            stan::math::assign(lp, (lp + student_t_log(theta, a, 0, b)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 4))) {

            current_statement_begin__ = 489;
            stan::math::assign(lp, (lp + gamma_log(theta, a, b)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 5))) {

            current_statement_begin__ = 491;
            stan::math::assign(lp, (lp + inv_gamma_log(theta, a, b)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 6))) {

            current_statement_begin__ = 493;
            stan::math::assign(lp, (lp + lognormal_log(theta, a, b)));
        } else {

            current_statement_begin__ = 495;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "types[1] must be an integer between 1 and 6, found = ";
            errmsg_stream__ << get_base1(types, 1, "types", 1);
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 498;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct STAN_log_prior_functor__ {
    template <typename T0__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T2__>::type
    operator()(const T0__& x,
                   const std::vector<int>& types,
                   const std::vector<T2__>& hyper, std::ostream* pstream__) const {
        return STAN_log_prior(x, types, hyper, pstream__);
    }
};

 } 
// [[Rcpp::export]]
void
STAN_check_real_positive(const double& a, std::ostream* pstream__ = 0){
  
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_check_real_positive<double>(a, pstream__);
}

// [[Rcpp::export]]
void
STAN_check_prob_positive(const double& a, std::ostream* pstream__ = 0){
  
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_check_prob_positive<double>(a, pstream__);
}

// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_warp_input(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x,
                    const double& a, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_warp_input<double, double>(x, a, pstream__);
}

// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_var_mask(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x,
                  const double& a, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_var_mask<double, double>(x, a, pstream__);
}

// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_expand(const Eigen::Matrix<double, Eigen::Dynamic, 1>& v,
                const std::vector<int>& idx_expand, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_expand<double>(v, idx_expand, pstream__);
}

// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_edit_dis_age(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x_dis_age,
                      const std::vector<int>& idx_expand,
                      const Eigen::Matrix<double, Eigen::Dynamic, 1>& teff_obs,
                      const Eigen::Matrix<double, Eigen::Dynamic, 1>& teff, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_edit_dis_age<double, double, double>(x_dis_age, idx_expand, teff_obs, teff, pstream__);
}

// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_zerosum(const std::vector<int>& x1,
                             const std::vector<int>& x2,
                             const int& num_cat, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_kernel_base_zerosum(x1, x2, num_cat, pstream__);
}

// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_cat(const std::vector<int>& x1,
                         const std::vector<int>& x2, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_kernel_base_cat(x1, x2, pstream__);
}

// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_bin(const std::vector<int>& x1,
                         const std::vector<int>& x2,
                         const int& c, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_kernel_base_bin(x1, x2, c, pstream__);
}

// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_disease_mask(const std::vector<int>& x1,
                                  const std::vector<int>& x2, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_kernel_base_disease_mask(x1, x2, pstream__);
}

// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_var_mask(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x1,
                              const Eigen::Matrix<double, Eigen::Dynamic, 1>& x2,
                              const double& steepness,
                              const std::vector<double>& vm_params, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_kernel_base_var_mask<double, double, double, double>(x1, x2, steepness, vm_params, pstream__);
}

// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_discrete(const std::vector<int>& x1,
                         const std::vector<int>& x2,
                         const int& kernel_type,
                         const int& num_cat, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_kernel_discrete(x1, x2, kernel_type, num_cat, pstream__);
}

// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_fixed(const std::vector<int>& x1,
                      const std::vector<int>& x2,
                      const int& num_levels,
                      const int& ctype,
                      const int& ktype, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_kernel_fixed(x1, x2, num_levels, ctype, ktype, pstream__);
}

// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_stationary(const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& K_fixed,
                           const Eigen::Matrix<double, Eigen::Dynamic, 1>& x1,
                           const Eigen::Matrix<double, Eigen::Dynamic, 1>& x2,
                           const int& ctype,
                           const double& alpha,
                           const double& ell, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_kernel_stationary<double, double, double, double, double>(K_fixed, x1, x2, ctype, alpha, ell, pstream__);
}

// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_nonstationary(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x1,
                              const Eigen::Matrix<double, Eigen::Dynamic, 1>& x2,
                              const double& alpha,
                              const double& ell,
                              const double& steepness,
                              const std::vector<std::vector<double> >& vm_params, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_kernel_nonstationary<double, double, double, double, double, double>(x1, x2, alpha, ell, steepness, vm_params, pstream__);
}

// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_disease(const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& K_fixed,
                        const Eigen::Matrix<double, Eigen::Dynamic, 1>& x1,
                        const Eigen::Matrix<double, Eigen::Dynamic, 1>& x2,
                        const double& alpha,
                        const double& ell,
                        const double& wrp,
                        const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& beta,
                        const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& teff,
                        const std::vector<std::vector<double> >& vm_params,
                        const std::vector<std::vector<int> >& idx1_expand,
                        const std::vector<std::vector<int> >& idx2_expand,
                        const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& teff_obs, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_kernel_disease<double, double, double, double, double, double, double, double, double, double>(K_fixed, x1, x2, alpha, ell, wrp, beta, teff, vm_params, idx1_expand, idx2_expand, teff_obs, pstream__);
}

// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_fixed_all(const int& n1,
                          const int& n2,
                          const std::vector<std::vector<int> >& x1,
                          const std::vector<std::vector<int> >& x2,
                          const std::vector<int>& num_levels,
                          const std::vector<std::vector<int> >& components, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_kernel_fixed_all(n1, n2, x1, x2, num_levels, components, pstream__);
}

// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_all(const int& n1,
                    const int& n2,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& K_fixed,
                    const std::vector<std::vector<int> >& components,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& x1,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& x2,
                    const std::vector<double>& alpha,
                    const std::vector<double>& ell,
                    const std::vector<double>& wrp,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& beta,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& teff,
                    const std::vector<std::vector<double> >& vm_params,
                    const std::vector<std::vector<int> >& idx1_expand,
                    const std::vector<std::vector<int> >& idx2_expand,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& teff_obs, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_kernel_all<double, double, double, double, double, double, double, double, double, double>(n1, n2, K_fixed, components, x1, x2, alpha, ell, wrp, beta, teff, vm_params, idx1_expand, idx2_expand, teff_obs, pstream__);
}

// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >
STAN_gp_posterior_helper(const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& Ly,
                             const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& K,
                             const Eigen::Matrix<double, Eigen::Dynamic, 1>& v, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_gp_posterior_helper<double, double, double>(Ly, K, v, pstream__);
}

// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >
STAN_gp_posterior(const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& KX,
                      const Eigen::Matrix<double, Eigen::Dynamic, 1>& y,
                      const double& delta,
                      const double& sigma, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_gp_posterior<double, double, double, double>(KX, y, delta, sigma, pstream__);
}

// [[Rcpp::export]]
double
STAN_log_prior(const double& x,
                   const std::vector<int>& types,
                   const std::vector<double>& hyper, std::ostream* pstream__ = 0){
  return 
user_dff3da8f6c90f97fde66aef4f06b2bab::STAN_log_prior<double, double>(x, types, hyper, pstream__);
}

