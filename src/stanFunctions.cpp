// [[Rcpp::depends(StanHeaders)]]
// [[Rcpp::depends(rstan)]]
// [[Rcpp::depends(RcppEigen)]]
// [[Rcpp::depends(BH)]]
#include <stan/math/prim/mat/fun/Eigen.hpp>
#include <boost/integer/integer_log2.hpp>
// REMOVED #include <exporter.h> by dev-cpp.R 
#include <RcppEigen.h>
// Code generated by Stan version 2.21.0
#include <stan/model/standalone_functions_header.hpp>
namespace user_723e4cc387b03d89e904fb27ad7e6631 { 
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using namespace stan::math;
typedef Eigen::Matrix<double, Eigen::Dynamic, 1> vector_d;
typedef Eigen::Matrix<double, 1, Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> matrix_d;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "unknown file name");
    reader.add_event(632, 630, "end", "unknown file name");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_rep_vector_times(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                          const int& J, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 6;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,num_elements(x));
        current_statement_begin__ = 7;
        validate_non_negative_index("y", "(J * N)", (J * N));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y((J * N));
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        stan::math::assign(y,rep_vector(0.0, (J * N)));
        current_statement_begin__ = 8;
        int idx(0);
        (void) idx;  // dummy to suppress unused var warning
        stan::math::fill(idx, std::numeric_limits<int>::min());
        stan::math::assign(idx,1);
        current_statement_begin__ = 9;
        for (int j = 1; j <= J; ++j) {
            current_statement_begin__ = 10;
            stan::model::assign(y, 
                        stan::model::cons_list(stan::model::index_min_max(idx, ((idx + N) - 1)), stan::model::nil_index_list()), 
                        x, 
                        "assigning variable y");
            current_statement_begin__ = 11;
            stan::math::assign(idx, (idx + N));
        }
        current_statement_begin__ = 13;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_rep_vector_times_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                          const int& J, std::ostream* pstream__) const {
        return STAN_rep_vector_times(x, J, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_rep_vector_each(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                         const int& J, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 18;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,num_elements(x));
        current_statement_begin__ = 19;
        validate_non_negative_index("y", "(J * N)", (J * N));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y((J * N));
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        stan::math::assign(y,rep_vector(0.0, (J * N)));
        current_statement_begin__ = 20;
        int idx(0);
        (void) idx;  // dummy to suppress unused var warning
        stan::math::fill(idx, std::numeric_limits<int>::min());
        stan::math::assign(idx,1);
        current_statement_begin__ = 21;
        for (int n = 1; n <= N; ++n) {
            current_statement_begin__ = 22;
            stan::model::assign(y, 
                        stan::model::cons_list(stan::model::index_min_max(idx, ((idx + J) - 1)), stan::model::nil_index_list()), 
                        rep_vector(get_base1(x, n, "x", 1), J), 
                        "assigning variable y");
            current_statement_begin__ = 23;
            stan::math::assign(idx, (idx + J));
        }
        current_statement_begin__ = 25;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_rep_vector_each_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                         const int& J, std::ostream* pstream__) const {
        return STAN_rep_vector_each(x, J, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_rep_cols_times(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X,
                        const int& J, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 30;
        int R(0);
        (void) R;  // dummy to suppress unused var warning
        stan::math::fill(R, std::numeric_limits<int>::min());
        stan::math::assign(R,rows(X));
        current_statement_begin__ = 31;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,cols(X));
        current_statement_begin__ = 32;
        validate_non_negative_index("Y", "R", R);
        validate_non_negative_index("Y", "(J * N)", (J * N));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Y(R, (J * N));
        stan::math::initialize(Y, DUMMY_VAR__);
        stan::math::fill(Y, DUMMY_VAR__);
        stan::math::assign(Y,rep_matrix(0.0, R, (J * N)));
        current_statement_begin__ = 33;
        int idx(0);
        (void) idx;  // dummy to suppress unused var warning
        stan::math::fill(idx, std::numeric_limits<int>::min());
        stan::math::assign(idx,1);
        current_statement_begin__ = 34;
        for (int j = 1; j <= J; ++j) {
            current_statement_begin__ = 35;
            stan::model::assign(Y, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(idx, ((idx + N) - 1)), stan::model::nil_index_list())), 
                        X, 
                        "assigning variable Y");
            current_statement_begin__ = 36;
            stan::math::assign(idx, (idx + N));
        }
        current_statement_begin__ = 38;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_rep_cols_times_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X,
                        const int& J, std::ostream* pstream__) const {
        return STAN_rep_cols_times(X, J, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_rep_cols_each(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X,
                       const int& J, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 43;
        int R(0);
        (void) R;  // dummy to suppress unused var warning
        stan::math::fill(R, std::numeric_limits<int>::min());
        stan::math::assign(R,rows(X));
        current_statement_begin__ = 44;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,cols(X));
        current_statement_begin__ = 45;
        validate_non_negative_index("Y", "R", R);
        validate_non_negative_index("Y", "(J * N)", (J * N));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Y(R, (J * N));
        stan::math::initialize(Y, DUMMY_VAR__);
        stan::math::fill(Y, DUMMY_VAR__);
        stan::math::assign(Y,rep_matrix(0.0, R, (J * N)));
        current_statement_begin__ = 46;
        int idx(0);
        (void) idx;  // dummy to suppress unused var warning
        stan::math::fill(idx, std::numeric_limits<int>::min());
        stan::math::assign(idx,1);
        current_statement_begin__ = 47;
        for (int n = 1; n <= N; ++n) {
            current_statement_begin__ = 48;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 49;
                stan::model::assign(Y, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(((idx + j) - 1)), stan::model::nil_index_list())), 
                            stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "X"), 
                            "assigning variable Y");
            }
            current_statement_begin__ = 51;
            stan::math::assign(idx, (idx + J));
        }
        current_statement_begin__ = 53;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_rep_cols_each_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X,
                       const int& J, std::ostream* pstream__) const {
        return STAN_rep_cols_each(X, J, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_vectorsum(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& vecs,
                   const int& L, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 58;
        int num_vecs(0);
        (void) num_vecs;  // dummy to suppress unused var warning
        stan::math::fill(num_vecs, std::numeric_limits<int>::min());
        stan::math::assign(num_vecs,size(vecs));
        current_statement_begin__ = 59;
        validate_non_negative_index("s", "L", L);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> s(L);
        stan::math::initialize(s, DUMMY_VAR__);
        stan::math::fill(s, DUMMY_VAR__);
        stan::math::assign(s,rep_vector(0, L));
        current_statement_begin__ = 60;
        for (int j = 1; j <= num_vecs; ++j) {
            current_statement_begin__ = 61;
            stan::math::assign(s, add(s, get_base1(vecs, j, "vecs", 1)));
        }
        current_statement_begin__ = 63;
        return stan::math::promote_scalar<fun_return_scalar_t__>(s);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_vectorsum_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& vecs,
                   const int& L, std::ostream* pstream__) const {
        return STAN_vectorsum(vecs, L, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
STAN_warp_input(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                    const T1__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 68;
        return stan::math::promote_scalar<fun_return_scalar_t__>(add(-(1), multiply(2, inv(add(1, stan::math::exp(multiply(-(a), x)))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_warp_input_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                    const T1__& a, std::ostream* pstream__) const {
        return STAN_warp_input(x, a, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
STAN_var_mask(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                  const T1__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 73;
        return stan::math::promote_scalar<fun_return_scalar_t__>(inv(add(1, stan::math::exp(multiply(-(a), x)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_var_mask_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                  const T1__& a, std::ostream* pstream__) const {
        return STAN_var_mask(x, a, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_expand(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                const std::vector<int>& idx_expand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 78;
        int L(0);
        (void) L;  // dummy to suppress unused var warning
        stan::math::fill(L, std::numeric_limits<int>::min());
        stan::math::assign(L,num_elements(v));
        current_statement_begin__ = 79;
        validate_non_negative_index("v_add0", "(L + 1)", (L + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v_add0((L + 1));
        stan::math::initialize(v_add0, DUMMY_VAR__);
        stan::math::fill(v_add0, DUMMY_VAR__);
        stan::math::assign(v_add0,rep_vector(0.0, (L + 1)));
        current_statement_begin__ = 80;
        stan::model::assign(v_add0, 
                    stan::model::cons_list(stan::model::index_min_max(2, (L + 1)), stan::model::nil_index_list()), 
                    v, 
                    "assigning variable v_add0");
        current_statement_begin__ = 81;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::model::rvalue(v_add0, stan::model::cons_list(stan::model::index_multi(idx_expand), stan::model::nil_index_list()), "v_add0"));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_expand_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                const std::vector<int>& idx_expand, std::ostream* pstream__) const {
        return STAN_expand(v, idx_expand, pstream__);
    }
};
template <typename T0__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic, 1>
STAN_edit_x_cont(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_cont,
                     const std::vector<int>& idx_expand,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& teff_obs,
                     const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& teff, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 91;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(x_cont));
        current_statement_begin__ = 92;
        validate_non_negative_index("x_teff_obs", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_teff_obs(n);
        stan::math::initialize(x_teff_obs, DUMMY_VAR__);
        stan::math::fill(x_teff_obs, DUMMY_VAR__);
        stan::math::assign(x_teff_obs,STAN_expand(teff_obs, idx_expand, pstream__));
        current_statement_begin__ = 93;
        validate_non_negative_index("x_teff", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_teff(n);
        stan::math::initialize(x_teff, DUMMY_VAR__);
        stan::math::fill(x_teff, DUMMY_VAR__);
        stan::math::assign(x_teff,STAN_expand(teff, idx_expand, pstream__));
        current_statement_begin__ = 94;
        return stan::math::promote_scalar<fun_return_scalar_t__>(subtract(add(x_cont, x_teff_obs), x_teff));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_edit_x_cont_functor__ {
    template <typename T0__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_cont,
                     const std::vector<int>& idx_expand,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& teff_obs,
                     const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& teff, std::ostream* pstream__) const {
        return STAN_edit_x_cont(x_cont, idx_expand, teff_obs, teff, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
STAN_quad_form_inv(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                       const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& A, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 99;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(x));
        current_statement_begin__ = 100;
        validate_non_negative_index("L", "n", n);
        validate_non_negative_index("L", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L(n, n);
        stan::math::initialize(L, DUMMY_VAR__);
        stan::math::fill(L, DUMMY_VAR__);
        stan::math::assign(L,cholesky_decompose(A));
        current_statement_begin__ = 101;
        validate_non_negative_index("a", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> a(n);
        stan::math::initialize(a, DUMMY_VAR__);
        stan::math::fill(a, DUMMY_VAR__);
        stan::math::assign(a,mdivide_left_tri_low(L, x));
        current_statement_begin__ = 102;
        return stan::math::promote_scalar<fun_return_scalar_t__>(dot_self(a));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_quad_form_inv_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                       const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& A, std::ostream* pstream__) const {
        return STAN_quad_form_inv(x, A, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_zerosum(const std::vector<int>& x1,
                             const std::vector<int>& x2,
                             const int& num_cat, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 112;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));
        current_statement_begin__ = 113;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));
        current_statement_begin__ = 114;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 118;
        for (int i = 1; i <= n1; ++i) {
            current_statement_begin__ = 119;
            for (int j = 1; j <= n2; ++j) {
                current_statement_begin__ = 120;
                if (as_bool(logical_eq(get_base1(x1, i, "x1", 1), get_base1(x2, j, "x2", 1)))) {
                    current_statement_begin__ = 121;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                1, 
                                "assigning variable K");
                } else {
                    current_statement_begin__ = 123;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                -(inv((num_cat - 1))), 
                                "assigning variable K");
                }
            }
        }
        current_statement_begin__ = 127;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_base_zerosum_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                             const std::vector<int>& x2,
                             const int& num_cat, std::ostream* pstream__) const {
        return STAN_kernel_base_zerosum(x1, x2, num_cat, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_cat(const std::vector<int>& x1,
                         const std::vector<int>& x2, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 135;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));
        current_statement_begin__ = 136;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));
        current_statement_begin__ = 137;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 138;
        for (int i = 1; i <= n1; ++i) {
            current_statement_begin__ = 139;
            for (int j = 1; j <= n2; ++j) {
                current_statement_begin__ = 140;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            logical_eq(get_base1(x1, i, "x1", 1), get_base1(x2, j, "x2", 1)), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 143;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_base_cat_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                         const std::vector<int>& x2, std::ostream* pstream__) const {
        return STAN_kernel_base_cat(x1, x2, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_bin_mask(const std::vector<int>& x1,
                              const std::vector<int>& x2, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 151;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));
        current_statement_begin__ = 152;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));
        current_statement_begin__ = 153;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 154;
        for (int i = 1; i <= n1; ++i) {
            current_statement_begin__ = 155;
            for (int j = 1; j <= n2; ++j) {
                current_statement_begin__ = 156;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            (logical_eq(get_base1(x1, i, "x1", 1), 0) * logical_eq(get_base1(x2, j, "x2", 1), 0)), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 159;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_base_bin_mask_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                              const std::vector<int>& x2, std::ostream* pstream__) const {
        return STAN_kernel_base_bin_mask(x1, x2, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_const(const std::vector<int>& x1,
                      const std::vector<int>& x2,
                      const int& kernel_type,
                      const int& num_cat, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 172;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));
        current_statement_begin__ = 173;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));
        current_statement_begin__ = 174;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 175;
        if (as_bool(logical_eq(kernel_type, 1))) {
            current_statement_begin__ = 176;
            stan::math::assign(K, STAN_kernel_base_cat(x1, x2, pstream__));
        } else if (as_bool(logical_eq(kernel_type, 2))) {
            current_statement_begin__ = 178;
            stan::math::assign(K, STAN_kernel_base_bin_mask(x1, x2, pstream__));
        } else {
            current_statement_begin__ = 181;
            stan::math::assign(K, STAN_kernel_base_zerosum(x1, x2, num_cat, pstream__));
        }
        current_statement_begin__ = 183;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_const_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                      const std::vector<int>& x2,
                      const int& kernel_type,
                      const int& num_cat, std::ostream* pstream__) const {
        return STAN_kernel_const(x1, x2, kernel_type, num_cat, pstream__);
    }
};
std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_const_all(const int& n1,
                          const int& n2,
                          const std::vector<std::vector<int> >& x1,
                          const std::vector<std::vector<int> >& x2,
                          const std::vector<std::vector<int> >& x1_mask,
                          const std::vector<std::vector<int> >& x2_mask,
                          const std::vector<int>& num_levels,
                          const std::vector<std::vector<int> >& components, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 200;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(components));
        current_statement_begin__ = 201;
        validate_non_negative_index("K_const", "n1", n1);
        validate_non_negative_index("K_const", "n2", n2);
        validate_non_negative_index("K_const", "num_comps", num_comps);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > K_const(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n1, n2));
        stan::math::initialize(K_const, DUMMY_VAR__);
        stan::math::fill(K_const, DUMMY_VAR__);
        current_statement_begin__ = 203;
        for (int j = 1; j <= num_comps; ++j) {
            {
            current_statement_begin__ = 204;
            validate_non_negative_index("K", "n1", n1);
            validate_non_negative_index("K", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K, DUMMY_VAR__);
            current_statement_begin__ = 205;
            validate_non_negative_index("opts", "9", 9);
            std::vector<int  > opts(9, int(0));
            stan::math::fill(opts, std::numeric_limits<int>::min());
            stan::math::assign(opts,get_base1(components, j, "components", 1));
            current_statement_begin__ = 206;
            int ctype(0);
            (void) ctype;  // dummy to suppress unused var warning
            stan::math::fill(ctype, std::numeric_limits<int>::min());
            stan::math::assign(ctype,get_base1(opts, 1, "opts", 1));
            current_statement_begin__ = 207;
            int ktype(0);
            (void) ktype;  // dummy to suppress unused var warning
            stan::math::fill(ktype, std::numeric_limits<int>::min());
            stan::math::assign(ktype,get_base1(opts, 2, "opts", 1));
            current_statement_begin__ = 208;
            int idx_cat(0);
            (void) idx_cat;  // dummy to suppress unused var warning
            stan::math::fill(idx_cat, std::numeric_limits<int>::min());
            stan::math::assign(idx_cat,get_base1(opts, 8, "opts", 1));
            current_statement_begin__ = 209;
            int idx_cont(0);
            (void) idx_cont;  // dummy to suppress unused var warning
            stan::math::fill(idx_cont, std::numeric_limits<int>::min());
            stan::math::assign(idx_cont,get_base1(opts, 9, "opts", 1));
            current_statement_begin__ = 212;
            if (as_bool(logical_neq(idx_cont, 0))) {
                current_statement_begin__ = 213;
                stan::math::assign(K, STAN_kernel_const(get_base1(x1_mask, idx_cont, "x1_mask", 1), get_base1(x2_mask, idx_cont, "x2_mask", 1), 2, 0, pstream__));
            } else {
                current_statement_begin__ = 215;
                stan::math::assign(K, rep_matrix(1, n1, n2));
            }
            current_statement_begin__ = 219;
            if (as_bool((primitive_value(logical_eq(ctype, 0)) || primitive_value(logical_eq(ctype, 2))))) {
                {
                current_statement_begin__ = 220;
                int M(0);
                (void) M;  // dummy to suppress unused var warning
                stan::math::fill(M, std::numeric_limits<int>::min());
                stan::math::assign(M,get_base1(num_levels, idx_cat, "num_levels", 1));
                current_statement_begin__ = 221;
                stan::math::assign(K, elt_multiply(K, STAN_kernel_const(get_base1(x1, idx_cat, "x1", 1), get_base1(x2, idx_cat, "x2", 1), ktype, M, pstream__)));
                }
            }
            current_statement_begin__ = 223;
            stan::model::assign(K_const, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        K, 
                        "assigning variable K_const");
            }
        }
        current_statement_begin__ = 225;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K_const);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_const_all_functor__ {
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const int& n1,
                          const int& n2,
                          const std::vector<std::vector<int> >& x1,
                          const std::vector<std::vector<int> >& x2,
                          const std::vector<std::vector<int> >& x1_mask,
                          const std::vector<std::vector<int> >& x2_mask,
                          const std::vector<int>& num_levels,
                          const std::vector<std::vector<int> >& components, std::ostream* pstream__) const {
        return STAN_kernel_const_all(n1, n2, x1, x2, x1_mask, x2_mask, num_levels, components, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_var_mask(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                              const T2__& steepness,
                              const std::vector<T3__>& vm_params, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 234;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));
        current_statement_begin__ = 235;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));
        current_statement_begin__ = 236;
        local_scalar_t__ a(DUMMY_VAR__);
        (void) a;  // dummy to suppress unused var warning
        stan::math::initialize(a, DUMMY_VAR__);
        stan::math::fill(a, DUMMY_VAR__);
        stan::math::assign(a,(steepness * get_base1(vm_params, 2, "vm_params", 1)));
        current_statement_begin__ = 237;
        local_scalar_t__ r(DUMMY_VAR__);
        (void) r;  // dummy to suppress unused var warning
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);
        stan::math::assign(r,(inv(a) * logit(get_base1(vm_params, 1, "vm_params", 1))));
        current_statement_begin__ = 238;
        validate_non_negative_index("s1", "n1", n1);
        validate_non_negative_index("s1", "1", 1);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> s1(n1, 1);
        stan::math::initialize(s1, DUMMY_VAR__);
        stan::math::fill(s1, DUMMY_VAR__);
        stan::math::assign(s1,to_matrix(STAN_var_mask(subtract(x1, r), a, pstream__)));
        current_statement_begin__ = 239;
        validate_non_negative_index("s2", "n2", n2);
        validate_non_negative_index("s2", "1", 1);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> s2(n2, 1);
        stan::math::initialize(s2, DUMMY_VAR__);
        stan::math::fill(s2, DUMMY_VAR__);
        stan::math::assign(s2,to_matrix(STAN_var_mask(subtract(x2, r), a, pstream__)));
        current_statement_begin__ = 240;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        stan::math::assign(K,multiply(s1, transpose(s2)));
        current_statement_begin__ = 241;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_base_var_mask_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                              const T2__& steepness,
                              const std::vector<T3__>& vm_params, std::ostream* pstream__) const {
        return STAN_kernel_base_var_mask(x1, x2, steepness, vm_params, pstream__);
    }
};
template <typename T2__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T16__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T9__, T10__, typename boost::math::tools::promote_args<T11__, T12__, T13__, T16__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_all(const int& n1,
                    const int& n2,
                    const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                    const std::vector<std::vector<int> >& components,
                    const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, 1> >& x1,
                    const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic, 1> >& x2,
                    const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic, 1> >& x1_unnorm,
                    const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic, 1> >& x2_unnorm,
                    const std::vector<T8__>& alpha,
                    const std::vector<T9__>& ell,
                    const std::vector<T10__>& wrp,
                    const std::vector<Eigen::Matrix<T11__, Eigen::Dynamic, 1> >& beta,
                    const std::vector<Eigen::Matrix<T12__, Eigen::Dynamic, 1> >& teff,
                    const std::vector<std::vector<T13__> >& vm_params,
                    const std::vector<int>& idx1_expand,
                    const std::vector<int>& idx2_expand,
                    const std::vector<Eigen::Matrix<T16__, Eigen::Dynamic, 1> >& teff_zero, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T9__, T10__, typename boost::math::tools::promote_args<T11__, T12__, T13__, T16__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 267;
        int idx_ell(0);
        (void) idx_ell;  // dummy to suppress unused var warning
        stan::math::fill(idx_ell, std::numeric_limits<int>::min());
        stan::math::assign(idx_ell,0);
        current_statement_begin__ = 268;
        int idx_wrp(0);
        (void) idx_wrp;  // dummy to suppress unused var warning
        stan::math::fill(idx_wrp, std::numeric_limits<int>::min());
        stan::math::assign(idx_wrp,0);
        current_statement_begin__ = 269;
        int idx_alpha(0);
        (void) idx_alpha;  // dummy to suppress unused var warning
        stan::math::fill(idx_alpha, std::numeric_limits<int>::min());
        stan::math::assign(idx_alpha,0);
        current_statement_begin__ = 270;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(components));
        current_statement_begin__ = 271;
        validate_non_negative_index("KX", "n1", n1);
        validate_non_negative_index("KX", "n2", n2);
        validate_non_negative_index("KX", "num_comps", num_comps);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n1, n2));
        stan::math::initialize(KX, DUMMY_VAR__);
        stan::math::fill(KX, DUMMY_VAR__);
        current_statement_begin__ = 274;
        for (int j = 1; j <= num_comps; ++j) {
            {
            current_statement_begin__ = 277;
            validate_non_negative_index("K", "n1", n1);
            validate_non_negative_index("K", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K, DUMMY_VAR__);
            stan::math::assign(K,get_base1(K_const, j, "K_const", 1));
            current_statement_begin__ = 278;
            validate_non_negative_index("X1", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> X1(n1);
            stan::math::initialize(X1, DUMMY_VAR__);
            stan::math::fill(X1, DUMMY_VAR__);
            current_statement_begin__ = 279;
            validate_non_negative_index("X2", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> X2(n2);
            stan::math::initialize(X2, DUMMY_VAR__);
            stan::math::fill(X2, DUMMY_VAR__);
            current_statement_begin__ = 282;
            validate_non_negative_index("opts", "9", 9);
            std::vector<int  > opts(9, int(0));
            stan::math::fill(opts, std::numeric_limits<int>::min());
            stan::math::assign(opts,get_base1(components, j, "components", 1));
            current_statement_begin__ = 283;
            int ctype(0);
            (void) ctype;  // dummy to suppress unused var warning
            stan::math::fill(ctype, std::numeric_limits<int>::min());
            stan::math::assign(ctype,get_base1(opts, 1, "opts", 1));
            current_statement_begin__ = 284;
            int idx_cont(0);
            (void) idx_cont;  // dummy to suppress unused var warning
            stan::math::fill(idx_cont, std::numeric_limits<int>::min());
            stan::math::assign(idx_cont,get_base1(opts, 9, "opts", 1));
            current_statement_begin__ = 285;
            int is_heter(0);
            (void) is_heter;  // dummy to suppress unused var warning
            stan::math::fill(is_heter, std::numeric_limits<int>::min());
            stan::math::assign(is_heter,get_base1(opts, 4, "opts", 1));
            current_statement_begin__ = 286;
            int is_warped(0);
            (void) is_warped;  // dummy to suppress unused var warning
            stan::math::fill(is_warped, std::numeric_limits<int>::min());
            stan::math::assign(is_warped,get_base1(opts, 5, "opts", 1));
            current_statement_begin__ = 287;
            int is_var_masked(0);
            (void) is_var_masked;  // dummy to suppress unused var warning
            stan::math::fill(is_var_masked, std::numeric_limits<int>::min());
            stan::math::assign(is_var_masked,get_base1(opts, 6, "opts", 1));
            current_statement_begin__ = 288;
            int is_uncrt(0);
            (void) is_uncrt;  // dummy to suppress unused var warning
            stan::math::fill(is_uncrt, std::numeric_limits<int>::min());
            stan::math::assign(is_uncrt,get_base1(opts, 7, "opts", 1));
            current_statement_begin__ = 291;
            if (as_bool(logical_neq(ctype, 0))) {
                current_statement_begin__ = 292;
                if (as_bool(is_warped)) {
                    current_statement_begin__ = 293;
                    stan::math::assign(X1, get_base1(x1_unnorm, idx_cont, "x1_unnorm", 1));
                    current_statement_begin__ = 294;
                    stan::math::assign(X2, get_base1(x2_unnorm, idx_cont, "x2_unnorm", 1));
                } else {
                    current_statement_begin__ = 296;
                    stan::math::assign(X1, get_base1(x1, idx_cont, "x1", 1));
                    current_statement_begin__ = 297;
                    stan::math::assign(X2, get_base1(x2, idx_cont, "x2", 1));
                }
            }
            current_statement_begin__ = 302;
            if (as_bool(is_warped)) {
                {
                current_statement_begin__ = 303;
                local_scalar_t__ s(DUMMY_VAR__);
                (void) s;  // dummy to suppress unused var warning
                stan::math::initialize(s, DUMMY_VAR__);
                stan::math::fill(s, DUMMY_VAR__);
                current_statement_begin__ = 304;
                stan::math::assign(idx_wrp, (idx_wrp + 1));
                current_statement_begin__ = 307;
                if (as_bool(is_uncrt)) {
                    current_statement_begin__ = 308;
                    stan::math::assign(X1, STAN_edit_x_cont(X1, idx1_expand, get_base1(teff_zero, 1, "teff_zero", 1), get_base1(teff, 1, "teff", 1), pstream__));
                    current_statement_begin__ = 309;
                    stan::math::assign(X2, STAN_edit_x_cont(X2, idx2_expand, get_base1(teff_zero, 1, "teff_zero", 1), get_base1(teff, 1, "teff", 1), pstream__));
                }
                current_statement_begin__ = 313;
                stan::math::assign(s, get_base1(wrp, idx_wrp, "wrp", 1));
                current_statement_begin__ = 314;
                if (as_bool(is_var_masked)) {
                    current_statement_begin__ = 315;
                    stan::math::assign(K, elt_multiply(K, STAN_kernel_base_var_mask(X1, X2, s, get_base1(vm_params, idx_wrp, "vm_params", 1), pstream__)));
                }
                current_statement_begin__ = 319;
                stan::math::assign(X1, STAN_warp_input(X1, s, pstream__));
                current_statement_begin__ = 320;
                stan::math::assign(X2, STAN_warp_input(X2, s, pstream__));
                }
            }
            current_statement_begin__ = 324;
            stan::math::assign(idx_alpha, (idx_alpha + 1));
            current_statement_begin__ = 325;
            if (as_bool(logical_neq(ctype, 0))) {
                current_statement_begin__ = 326;
                stan::math::assign(idx_ell, (idx_ell + 1));
                current_statement_begin__ = 327;
                stan::math::assign(K, elt_multiply(K, cov_exp_quad(to_array_1d(X1), to_array_1d(X2), get_base1(alpha, idx_alpha, "alpha", 1), get_base1(ell, idx_ell, "ell", 1))));
            } else {
                current_statement_begin__ = 330;
                stan::math::assign(K, multiply(square(get_base1(alpha, idx_alpha, "alpha", 1)), K));
            }
            current_statement_begin__ = 334;
            if (as_bool(is_heter)) {
                {
                current_statement_begin__ = 335;
                validate_non_negative_index("b1", "n1", n1);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b1(n1);
                stan::math::initialize(b1, DUMMY_VAR__);
                stan::math::fill(b1, DUMMY_VAR__);
                stan::math::assign(b1,STAN_expand(get_base1(beta, 1, "beta", 1), idx1_expand, pstream__));
                current_statement_begin__ = 336;
                validate_non_negative_index("b2", "n2", n2);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b2(n2);
                stan::math::initialize(b2, DUMMY_VAR__);
                stan::math::fill(b2, DUMMY_VAR__);
                stan::math::assign(b2,STAN_expand(get_base1(beta, 1, "beta", 1), idx2_expand, pstream__));
                current_statement_begin__ = 337;
                validate_non_negative_index("K_beta", "n1", n1);
                validate_non_negative_index("K_beta", "n2", n2);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K_beta(n1, n2);
                stan::math::initialize(K_beta, DUMMY_VAR__);
                stan::math::fill(K_beta, DUMMY_VAR__);
                stan::math::assign(K_beta,multiply(to_matrix(b1), transpose(to_matrix(b2))));
                current_statement_begin__ = 338;
                stan::math::assign(K, elt_multiply(K, K_beta));
                }
            }
            current_statement_begin__ = 342;
            stan::model::assign(KX, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        K, 
                        "assigning variable KX");
            }
        }
        current_statement_begin__ = 345;
        return stan::math::promote_scalar<fun_return_scalar_t__>(KX);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_all_functor__ {
    template <typename T2__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T16__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T9__, T10__, typename boost::math::tools::promote_args<T11__, T12__, T13__, T16__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const int& n1,
                    const int& n2,
                    const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                    const std::vector<std::vector<int> >& components,
                    const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, 1> >& x1,
                    const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic, 1> >& x2,
                    const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic, 1> >& x1_unnorm,
                    const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic, 1> >& x2_unnorm,
                    const std::vector<T8__>& alpha,
                    const std::vector<T9__>& ell,
                    const std::vector<T10__>& wrp,
                    const std::vector<Eigen::Matrix<T11__, Eigen::Dynamic, 1> >& beta,
                    const std::vector<Eigen::Matrix<T12__, Eigen::Dynamic, 1> >& teff,
                    const std::vector<std::vector<T13__> >& vm_params,
                    const std::vector<int>& idx1_expand,
                    const std::vector<int>& idx2_expand,
                    const std::vector<Eigen::Matrix<T16__, Eigen::Dynamic, 1> >& teff_zero, std::ostream* pstream__) const {
        return STAN_kernel_all(n1, n2, K_const, components, x1, x2, x1_unnorm, x2_unnorm, alpha, ell, wrp, beta, teff, vm_params, idx1_expand, idx2_expand, teff_zero, pstream__);
    }
};
template <typename T0__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1>
STAN_phi(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
             const int& m,
             const T2__& L, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 352;
        local_scalar_t__ A(DUMMY_VAR__);
        (void) A;  // dummy to suppress unused var warning
        stan::math::initialize(A, DUMMY_VAR__);
        stan::math::fill(A, DUMMY_VAR__);
        stan::math::assign(A,inv(stan::math::sqrt(L)));
        current_statement_begin__ = 353;
        local_scalar_t__ B(DUMMY_VAR__);
        (void) B;  // dummy to suppress unused var warning
        stan::math::initialize(B, DUMMY_VAR__);
        stan::math::fill(B, DUMMY_VAR__);
        stan::math::assign(B,((stan::math::pi() * m) / (2.0 * L)));
        current_statement_begin__ = 354;
        return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(A, stan::math::sin(multiply(B, add(x, L)))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_phi_functor__ {
    template <typename T0__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
             const int& m,
             const T2__& L, std::ostream* pstream__) const {
        return STAN_phi(x, m, L, pstream__);
    }
};
template <typename T1__>
typename boost::math::tools::promote_args<T1__>::type
STAN_lambda(const int& m,
                const T1__& L, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 361;
        local_scalar_t__ A(DUMMY_VAR__);
        (void) A;  // dummy to suppress unused var warning
        stan::math::initialize(A, DUMMY_VAR__);
        stan::math::fill(A, DUMMY_VAR__);
        stan::math::assign(A,((stan::math::pi() * m) / (2.0 * L)));
        current_statement_begin__ = 362;
        return stan::math::promote_scalar<fun_return_scalar_t__>(square(A));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_lambda_functor__ {
    template <typename T1__>
        typename boost::math::tools::promote_args<T1__>::type
    operator()(const int& m,
                const T1__& L, std::ostream* pstream__) const {
        return STAN_lambda(m, L, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
STAN_spd_eq(const T0__& w,
                const T1__& ell, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 369;
        local_scalar_t__ A(DUMMY_VAR__);
        (void) A;  // dummy to suppress unused var warning
        stan::math::initialize(A, DUMMY_VAR__);
        stan::math::fill(A, DUMMY_VAR__);
        stan::math::assign(A,(ell * stan::math::sqrt((2.0 * stan::math::pi()))));
        current_statement_begin__ = 370;
        local_scalar_t__ B(DUMMY_VAR__);
        (void) B;  // dummy to suppress unused var warning
        stan::math::initialize(B, DUMMY_VAR__);
        stan::math::fill(B, DUMMY_VAR__);
        stan::math::assign(B,(-(0.5) * square((w * ell))));
        current_statement_begin__ = 371;
        return stan::math::promote_scalar<fun_return_scalar_t__>((A * stan::math::exp(B)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_spd_eq_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& w,
                const T1__& ell, std::ostream* pstream__) const {
        return STAN_spd_eq(w, ell, pstream__);
    }
};
template <typename T0__, typename T2__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic> >
STAN_phi_matrix(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& x,
                    const int& M,
                    const T2__& L,
                    const std::vector<std::vector<int> >& components, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 378;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(get_base1(x, 1, "x", 1)));
        current_statement_begin__ = 379;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,size(components));
        current_statement_begin__ = 380;
        validate_non_negative_index("PHI", "n", n);
        validate_non_negative_index("PHI", "M", M);
        validate_non_negative_index("PHI", "J", J);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > PHI(J, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n, M));
        stan::math::initialize(PHI, DUMMY_VAR__);
        stan::math::fill(PHI, DUMMY_VAR__);
        current_statement_begin__ = 381;
        for (int j = 1; j <= J; ++j) {
            {
            current_statement_begin__ = 382;
            validate_non_negative_index("PHI_j", "n", n);
            validate_non_negative_index("PHI_j", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> PHI_j(n, M);
            stan::math::initialize(PHI_j, DUMMY_VAR__);
            stan::math::fill(PHI_j, DUMMY_VAR__);
            stan::math::assign(PHI_j,rep_matrix(1.0, n, M));
            current_statement_begin__ = 383;
            if (as_bool(logical_gt(get_base1(get_base1(components, j, "components", 1), 1, "components", 2), 0))) {
                {
                current_statement_begin__ = 384;
                int idx_cont(0);
                (void) idx_cont;  // dummy to suppress unused var warning
                stan::math::fill(idx_cont, std::numeric_limits<int>::min());
                stan::math::assign(idx_cont,get_base1(get_base1(components, j, "components", 1), 9, "components", 2));
                current_statement_begin__ = 385;
                for (int m = 1; m <= M; ++m) {
                    current_statement_begin__ = 387;
                    stan::model::assign(PHI_j, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                STAN_phi(get_base1(x, idx_cont, "x", 1), m, L, pstream__), 
                                "assigning variable PHI_j");
                }
                }
            }
            current_statement_begin__ = 390;
            stan::model::assign(PHI, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        PHI_j, 
                        "assigning variable PHI");
            }
        }
        current_statement_begin__ = 392;
        return stan::math::promote_scalar<fun_return_scalar_t__>(PHI);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_phi_matrix_functor__ {
    template <typename T0__, typename T2__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& x,
                    const int& M,
                    const T2__& L,
                    const std::vector<std::vector<int> >& components, std::ostream* pstream__) const {
        return STAN_phi_matrix(x, M, L, components, pstream__);
    }
};
template <typename T0__, typename T2__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1> >
STAN_lambda_matrix(const std::vector<T0__>& ell,
                       const int& M,
                       const T2__& L,
                       const std::vector<std::vector<int> >& components, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 398;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,size(components));
        current_statement_begin__ = 399;
        validate_non_negative_index("Lambda", "M", M);
        validate_non_negative_index("Lambda", "J", J);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > Lambda(J, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(M));
        stan::math::initialize(Lambda, DUMMY_VAR__);
        stan::math::fill(Lambda, DUMMY_VAR__);
        current_statement_begin__ = 400;
        int j_ell(0);
        (void) j_ell;  // dummy to suppress unused var warning
        stan::math::fill(j_ell, std::numeric_limits<int>::min());
        stan::math::assign(j_ell,0);
        current_statement_begin__ = 401;
        for (int j = 1; j <= J; ++j) {
            current_statement_begin__ = 402;
            if (as_bool(logical_gt(get_base1(get_base1(components, j, "components", 1), 1, "components", 2), 0))) {
                current_statement_begin__ = 403;
                stan::math::assign(j_ell, (j_ell + 1));
                current_statement_begin__ = 404;
                for (int m = 1; m <= M; ++m) {
                    current_statement_begin__ = 405;
                    stan::model::assign(Lambda, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                STAN_spd_eq(((m * stan::math::pi()) / (2.0 * L)), get_base1(ell, j_ell, "ell", 1), pstream__), 
                                "assigning variable Lambda");
                }
            } else {
                current_statement_begin__ = 408;
                stan::model::assign(Lambda, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            rep_vector((1.0 / M), M), 
                            "assigning variable Lambda");
            }
        }
        current_statement_begin__ = 411;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Lambda);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_lambda_matrix_functor__ {
    template <typename T0__, typename T2__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1> >
    operator()(const std::vector<T0__>& ell,
                       const int& M,
                       const T2__& L,
                       const std::vector<std::vector<int> >& components, std::ostream* pstream__) const {
        return STAN_lambda_matrix(ell, M, L, components, pstream__);
    }
};
std::vector<int>
STAN_ranks(const std::vector<std::vector<int> >& components,
               const std::vector<int>& x_cat_num_levels, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 416;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,size(components));
        current_statement_begin__ = 417;
        validate_non_negative_index("ranks", "J", J);
        std::vector<int  > ranks(J, int(0));
        stan::math::fill(ranks, std::numeric_limits<int>::min());
        stan::math::assign(ranks,rep_array(1, J));
        current_statement_begin__ = 418;
        for (int j = 1; j <= J; ++j) {
            {
            current_statement_begin__ = 419;
            int idx_cat(0);
            (void) idx_cat;  // dummy to suppress unused var warning
            stan::math::fill(idx_cat, std::numeric_limits<int>::min());
            stan::math::assign(idx_cat,get_base1(get_base1(components, j, "components", 1), 8, "components", 2));
            current_statement_begin__ = 420;
            if (as_bool(logical_gt(idx_cat, 0))) {
                current_statement_begin__ = 421;
                stan::model::assign(ranks, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(x_cat_num_levels, idx_cat, "x_cat_num_levels", 1) - 1), 
                            "assigning variable ranks");
            }
            }
        }
        current_statement_begin__ = 424;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ranks);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_ranks_functor__ {
            std::vector<int>
    operator()(const std::vector<std::vector<int> >& components,
               const std::vector<int>& x_cat_num_levels, std::ostream* pstream__) const {
        return STAN_ranks(components, x_cat_num_levels, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_delta_matrix(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                      const std::vector<int>& ranks,
                      const std::vector<std::vector<int> >& components, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 430;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,size(ranks));
        current_statement_begin__ = 431;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,cols(get_base1(K_const, 1, "K_const", 1)));
        current_statement_begin__ = 432;
        int R(0);
        (void) R;  // dummy to suppress unused var warning
        stan::math::fill(R, std::numeric_limits<int>::min());
        stan::math::assign(R,sum(ranks));
        current_statement_begin__ = 433;
        validate_non_negative_index("Delta", "R", R);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Delta(R);
        stan::math::initialize(Delta, DUMMY_VAR__);
        stan::math::fill(Delta, DUMMY_VAR__);
        stan::math::assign(Delta,rep_vector(1.0, R));
        current_statement_begin__ = 434;
        int idx(0);
        (void) idx;  // dummy to suppress unused var warning
        stan::math::fill(idx, std::numeric_limits<int>::min());
        stan::math::assign(idx,1);
        current_statement_begin__ = 435;
        for (int j = 1; j <= J; ++j) {
            {
            current_statement_begin__ = 436;
            int r(0);
            (void) r;  // dummy to suppress unused var warning
            stan::math::fill(r, std::numeric_limits<int>::min());
            stan::math::assign(r,get_base1(ranks, j, "ranks", 1));
            current_statement_begin__ = 437;
            int idx_cat(0);
            (void) idx_cat;  // dummy to suppress unused var warning
            stan::math::fill(idx_cat, std::numeric_limits<int>::min());
            stan::math::assign(idx_cat,get_base1(get_base1(components, j, "components", 1), 8, "components", 2));
            current_statement_begin__ = 438;
            if (as_bool(logical_gt(idx_cat, 0))) {
                {
                current_statement_begin__ = 439;
                validate_non_negative_index("lam", "n", n);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lam(n);
                stan::math::initialize(lam, DUMMY_VAR__);
                stan::math::fill(lam, DUMMY_VAR__);
                stan::math::assign(lam,eigenvalues_sym(get_base1(K_const, j, "K_const", 1)));
                current_statement_begin__ = 440;
                stan::model::assign(Delta, 
                            stan::model::cons_list(stan::model::index_min_max(idx, ((idx + r) - 1)), stan::model::nil_index_list()), 
                            stan::model::rvalue(lam, stan::model::cons_list(stan::model::index_min_max(((n - r) + 1), n), stan::model::nil_index_list()), "lam"), 
                            "assigning variable Delta");
                }
            }
            current_statement_begin__ = 443;
            stan::math::assign(idx, (idx + r));
            }
        }
        current_statement_begin__ = 445;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Delta);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_delta_matrix_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                      const std::vector<int>& ranks,
                      const std::vector<std::vector<int> >& components, std::ostream* pstream__) const {
        return STAN_delta_matrix(K_const, ranks, components, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_theta_matrix(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                      const std::vector<int>& ranks,
                      const std::vector<std::vector<int> >& components, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 451;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,size(ranks));
        current_statement_begin__ = 452;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,cols(get_base1(K_const, 1, "K_const", 1)));
        current_statement_begin__ = 453;
        int R(0);
        (void) R;  // dummy to suppress unused var warning
        stan::math::fill(R, std::numeric_limits<int>::min());
        stan::math::assign(R,sum(ranks));
        current_statement_begin__ = 454;
        validate_non_negative_index("Theta", "n", n);
        validate_non_negative_index("Theta", "R", R);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Theta(n, R);
        stan::math::initialize(Theta, DUMMY_VAR__);
        stan::math::fill(Theta, DUMMY_VAR__);
        stan::math::assign(Theta,rep_matrix(1.0, n, R));
        current_statement_begin__ = 455;
        int idx(0);
        (void) idx;  // dummy to suppress unused var warning
        stan::math::fill(idx, std::numeric_limits<int>::min());
        stan::math::assign(idx,1);
        current_statement_begin__ = 456;
        for (int j = 1; j <= J; ++j) {
            {
            current_statement_begin__ = 457;
            int r(0);
            (void) r;  // dummy to suppress unused var warning
            stan::math::fill(r, std::numeric_limits<int>::min());
            stan::math::assign(r,get_base1(ranks, j, "ranks", 1));
            current_statement_begin__ = 458;
            int idx_cat(0);
            (void) idx_cat;  // dummy to suppress unused var warning
            stan::math::fill(idx_cat, std::numeric_limits<int>::min());
            stan::math::assign(idx_cat,get_base1(get_base1(components, j, "components", 1), 8, "components", 2));
            current_statement_begin__ = 459;
            if (as_bool(logical_gt(idx_cat, 0))) {
                {
                current_statement_begin__ = 460;
                validate_non_negative_index("v", "n", n);
                validate_non_negative_index("v", "n", n);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> v(n, n);
                stan::math::initialize(v, DUMMY_VAR__);
                stan::math::fill(v, DUMMY_VAR__);
                stan::math::assign(v,eigenvectors_sym(get_base1(K_const, j, "K_const", 1)));
                current_statement_begin__ = 461;
                stan::model::assign(Theta, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(idx, ((idx + r) - 1)), stan::model::nil_index_list())), 
                            stan::model::rvalue(v, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(((n - r) + 1), n), stan::model::nil_index_list())), "v"), 
                            "assigning variable Theta");
                }
            }
            current_statement_begin__ = 464;
            stan::math::assign(idx, (idx + r));
            }
        }
        current_statement_begin__ = 466;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Theta);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_theta_matrix_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                      const std::vector<int>& ranks,
                      const std::vector<std::vector<int> >& components, std::ostream* pstream__) const {
        return STAN_theta_matrix(K_const, ranks, components, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
STAN_D_matrix(const std::vector<T0__>& alpha,
                  const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic, 1> >& bfa_lambda,
                  const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& bfa_delta,
                  const std::vector<int>& ranks, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 474;
        int M(0);
        (void) M;  // dummy to suppress unused var warning
        stan::math::fill(M, std::numeric_limits<int>::min());
        stan::math::assign(M,num_elements(get_base1(bfa_lambda, 1, "bfa_lambda", 1)));
        current_statement_begin__ = 475;
        int RM(0);
        (void) RM;  // dummy to suppress unused var warning
        stan::math::fill(RM, std::numeric_limits<int>::min());
        stan::math::assign(RM,(sum(ranks) * M));
        current_statement_begin__ = 476;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,size(ranks));
        current_statement_begin__ = 477;
        validate_non_negative_index("alpha_diag", "RM", RM);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_diag(RM);
        stan::math::initialize(alpha_diag, DUMMY_VAR__);
        stan::math::fill(alpha_diag, DUMMY_VAR__);
        current_statement_begin__ = 478;
        validate_non_negative_index("lambda_diag", "RM", RM);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_diag(RM);
        stan::math::initialize(lambda_diag, DUMMY_VAR__);
        stan::math::fill(lambda_diag, DUMMY_VAR__);
        current_statement_begin__ = 479;
        validate_non_negative_index("delta_diag", "RM", RM);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta_diag(RM);
        stan::math::initialize(delta_diag, DUMMY_VAR__);
        stan::math::fill(delta_diag, DUMMY_VAR__);
        stan::math::assign(delta_diag,STAN_rep_vector_each(bfa_delta, M, pstream__));
        current_statement_begin__ = 480;
        int i1(0);
        (void) i1;  // dummy to suppress unused var warning
        stan::math::fill(i1, std::numeric_limits<int>::min());
        stan::math::assign(i1,1);
        current_statement_begin__ = 481;
        int i2(0);
        (void) i2;  // dummy to suppress unused var warning
        stan::math::fill(i2, std::numeric_limits<int>::min());
        stan::math::assign(i2,1);
        current_statement_begin__ = 482;
        for (int j = 1; j <= J; ++j) {
            {
            current_statement_begin__ = 483;
            int r(0);
            (void) r;  // dummy to suppress unused var warning
            stan::math::fill(r, std::numeric_limits<int>::min());
            stan::math::assign(r,(get_base1(ranks, j, "ranks", 1) * M));
            current_statement_begin__ = 484;
            stan::math::assign(i2, ((i1 + r) - 1));
            current_statement_begin__ = 485;
            stan::model::assign(alpha_diag, 
                        stan::model::cons_list(stan::model::index_min_max(i1, i2), stan::model::nil_index_list()), 
                        rep_vector(square(get_base1(alpha, j, "alpha", 1)), r), 
                        "assigning variable alpha_diag");
            current_statement_begin__ = 486;
            stan::model::assign(lambda_diag, 
                        stan::model::cons_list(stan::model::index_min_max(i1, i2), stan::model::nil_index_list()), 
                        STAN_rep_vector_times(get_base1(bfa_lambda, j, "bfa_lambda", 1), get_base1(ranks, j, "ranks", 1), pstream__), 
                        "assigning variable lambda_diag");
            current_statement_begin__ = 488;
            stan::math::assign(i1, (i1 + r));
            }
        }
        current_statement_begin__ = 490;
        return stan::math::promote_scalar<fun_return_scalar_t__>(elt_multiply(elt_multiply(alpha_diag, delta_diag), lambda_diag));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_D_matrix_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const std::vector<T0__>& alpha,
                  const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic, 1> >& bfa_lambda,
                  const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& bfa_delta,
                  const std::vector<int>& ranks, std::ostream* pstream__) const {
        return STAN_D_matrix(alpha, bfa_lambda, bfa_delta, ranks, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_V_matrix(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& bfa_phi,
                  const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& bfa_theta,
                  const std::vector<int>& ranks, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 498;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,size(bfa_phi));
        current_statement_begin__ = 499;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,rows(get_base1(bfa_phi, 1, "bfa_phi", 1)));
        current_statement_begin__ = 500;
        int M(0);
        (void) M;  // dummy to suppress unused var warning
        stan::math::fill(M, std::numeric_limits<int>::min());
        stan::math::assign(M,cols(get_base1(bfa_phi, 1, "bfa_phi", 1)));
        current_statement_begin__ = 501;
        int RM(0);
        (void) RM;  // dummy to suppress unused var warning
        stan::math::fill(RM, std::numeric_limits<int>::min());
        stan::math::assign(RM,(sum(ranks) * M));
        current_statement_begin__ = 502;
        validate_non_negative_index("THETA", "n", n);
        validate_non_negative_index("THETA", "RM", RM);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> THETA(n, RM);
        stan::math::initialize(THETA, DUMMY_VAR__);
        stan::math::fill(THETA, DUMMY_VAR__);
        stan::math::assign(THETA,STAN_rep_cols_each(bfa_theta, M, pstream__));
        current_statement_begin__ = 503;
        validate_non_negative_index("PHI", "n", n);
        validate_non_negative_index("PHI", "RM", RM);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> PHI(n, RM);
        stan::math::initialize(PHI, DUMMY_VAR__);
        stan::math::fill(PHI, DUMMY_VAR__);
        current_statement_begin__ = 504;
        int i1(0);
        (void) i1;  // dummy to suppress unused var warning
        stan::math::fill(i1, std::numeric_limits<int>::min());
        stan::math::assign(i1,1);
        current_statement_begin__ = 505;
        int i2(0);
        (void) i2;  // dummy to suppress unused var warning
        stan::math::fill(i2, std::numeric_limits<int>::min());
        stan::math::assign(i2,1);
        current_statement_begin__ = 506;
        for (int j = 1; j <= J; ++j) {
            {
            current_statement_begin__ = 507;
            int r(0);
            (void) r;  // dummy to suppress unused var warning
            stan::math::fill(r, std::numeric_limits<int>::min());
            stan::math::assign(r,(get_base1(ranks, j, "ranks", 1) * M));
            current_statement_begin__ = 508;
            stan::math::assign(i2, ((i1 + r) - 1));
            current_statement_begin__ = 509;
            stan::model::assign(PHI, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(i1, i2), stan::model::nil_index_list())), 
                        STAN_rep_cols_times(get_base1(bfa_phi, j, "bfa_phi", 1), get_base1(ranks, j, "ranks", 1), pstream__), 
                        "assigning variable PHI");
            current_statement_begin__ = 511;
            stan::math::assign(i1, (i1 + r));
            }
        }
        current_statement_begin__ = 513;
        return stan::math::promote_scalar<fun_return_scalar_t__>(elt_multiply(THETA, PHI));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_V_matrix_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& bfa_phi,
                  const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& bfa_theta,
                  const std::vector<int>& ranks, std::ostream* pstream__) const {
        return STAN_V_matrix(bfa_phi, bfa_theta, ranks, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
STAN_multi_normal_bfa_logpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
                                 const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& V,
                                 const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& D_diag,
                                 const T3__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 521;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(y));
        current_statement_begin__ = 522;
        int RM(0);
        (void) RM;  // dummy to suppress unused var warning
        stan::math::fill(RM, std::numeric_limits<int>::min());
        stan::math::assign(RM,num_elements(D_diag));
        current_statement_begin__ = 523;
        local_scalar_t__ t1(DUMMY_VAR__);
        (void) t1;  // dummy to suppress unused var warning
        stan::math::initialize(t1, DUMMY_VAR__);
        stan::math::fill(t1, DUMMY_VAR__);
        stan::math::assign(t1,(n * stan::math::log((2.0 * stan::math::pi()))));
        current_statement_begin__ = 524;
        local_scalar_t__ t2(DUMMY_VAR__);
        (void) t2;  // dummy to suppress unused var warning
        stan::math::initialize(t2, DUMMY_VAR__);
        stan::math::fill(t2, DUMMY_VAR__);
        current_statement_begin__ = 525;
        local_scalar_t__ t3(DUMMY_VAR__);
        (void) t3;  // dummy to suppress unused var warning
        stan::math::initialize(t3, DUMMY_VAR__);
        stan::math::fill(t3, DUMMY_VAR__);
        current_statement_begin__ = 526;
        local_scalar_t__ inv_s2(DUMMY_VAR__);
        (void) inv_s2;  // dummy to suppress unused var warning
        stan::math::initialize(inv_s2, DUMMY_VAR__);
        stan::math::fill(inv_s2, DUMMY_VAR__);
        stan::math::assign(inv_s2,inv_square(sigma));
        current_statement_begin__ = 527;
        validate_non_negative_index("z", "RM", RM);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> z(RM);
        stan::math::initialize(z, DUMMY_VAR__);
        stan::math::fill(z, DUMMY_VAR__);
        stan::math::assign(z,multiply(transpose(V), y));
        current_statement_begin__ = 528;
        validate_non_negative_index("Z", "RM", RM);
        validate_non_negative_index("Z", "RM", RM);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Z(RM, RM);
        stan::math::initialize(Z, DUMMY_VAR__);
        stan::math::fill(Z, DUMMY_VAR__);
        stan::math::assign(Z,add(diag_matrix(inv(D_diag)), multiply(inv_s2, crossprod(V))));
        current_statement_begin__ = 529;
        stan::math::assign(t2, ((inv_s2 * dot_self(y)) + (square(inv_s2) * STAN_quad_form_inv(z, Z, pstream__))));
        current_statement_begin__ = 530;
        stan::math::assign(t3, ((log_determinant(Z) + sum(stan::math::log(D_diag))) + ((2 * n) * stan::math::log(sigma))));
        current_statement_begin__ = 531;
        return stan::math::promote_scalar<fun_return_scalar_t__>((-(0.5) * ((t1 + t2) + t3)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_multi_normal_bfa_logpdf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
                                 const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& V,
                                 const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& D_diag,
                                 const T3__& sigma, std::ostream* pstream__) const {
        return STAN_multi_normal_bfa_logpdf(y, V, D_diag, sigma, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_matrix_array_sum(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 536;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,rows(get_base1(K, 1, "K", 1)));
        current_statement_begin__ = 537;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,cols(get_base1(K, 1, "K", 1)));
        current_statement_begin__ = 538;
        validate_non_negative_index("K_sum", "n1", n1);
        validate_non_negative_index("K_sum", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K_sum(n1, n2);
        stan::math::initialize(K_sum, DUMMY_VAR__);
        stan::math::fill(K_sum, DUMMY_VAR__);
        stan::math::assign(K_sum,get_base1(K, 1, "K", 1));
        current_statement_begin__ = 539;
        for (int j = 2; j <= size(K); ++j) {
            current_statement_begin__ = 540;
            stan::math::assign(K_sum, add(K_sum, get_base1(K, j, "K", 1)));
        }
        current_statement_begin__ = 542;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K_sum);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_matrix_array_sum_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K, std::ostream* pstream__) const {
        return STAN_matrix_array_sum(K, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, 1> >
STAN_gp_posterior_helper(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& Ly,
                             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& K_s,
                             const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& K_ss,
                             const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& v, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 547;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(v));
        current_statement_begin__ = 548;
        int p(0);
        (void) p;  // dummy to suppress unused var warning
        stan::math::fill(p, std::numeric_limits<int>::min());
        stan::math::assign(p,rows(K_ss));
        current_statement_begin__ = 549;
        validate_non_negative_index("A", "n", n);
        validate_non_negative_index("A", "p", p);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> A(n, p);
        stan::math::initialize(A, DUMMY_VAR__);
        stan::math::fill(A, DUMMY_VAR__);
        stan::math::assign(A,mdivide_left_tri_low(Ly, transpose(K_s)));
        current_statement_begin__ = 550;
        validate_non_negative_index("f_post", "p", p);
        validate_non_negative_index("f_post", "2", 2);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > f_post(2, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(p));
        stan::math::initialize(f_post, DUMMY_VAR__);
        stan::math::fill(f_post, DUMMY_VAR__);
        current_statement_begin__ = 551;
        stan::model::assign(f_post, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    multiply(transpose(A), v), 
                    "assigning variable f_post");
        current_statement_begin__ = 552;
        stan::model::assign(f_post, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    stan::math::sqrt(diagonal(subtract(K_ss, crossprod(A)))), 
                    "assigning variable f_post");
        current_statement_begin__ = 553;
        return stan::math::promote_scalar<fun_return_scalar_t__>(f_post);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_gp_posterior_helper_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, 1> >
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& Ly,
                             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& K_s,
                             const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& K_ss,
                             const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& v, std::ostream* pstream__) const {
        return STAN_gp_posterior_helper(Ly, K_s, K_ss, v, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic, 1> >
STAN_gp_posterior(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& KX,
                      const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic> >& KX_s,
                      const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic> >& KX_ss,
                      const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& y,
                      const T4__& delta,
                      const T5__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 567;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(KX));
        current_statement_begin__ = 568;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,rows(get_base1(KX, 1, "KX", 1)));
        current_statement_begin__ = 569;
        int p(0);
        (void) p;  // dummy to suppress unused var warning
        stan::math::fill(p, std::numeric_limits<int>::min());
        stan::math::assign(p,rows(get_base1(KX_ss, 1, "KX_ss", 1)));
        current_statement_begin__ = 570;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,(num_comps + 1));
        current_statement_begin__ = 571;
        validate_non_negative_index("inds", "2", 2);
        std::vector<int  > inds(2, int(0));
        stan::math::fill(inds, std::numeric_limits<int>::min());
        current_statement_begin__ = 572;
        validate_non_negative_index("F_POST", "p", p);
        validate_non_negative_index("F_POST", "(2 * J)", (2 * J));
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > F_POST((2 * J), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(p));
        stan::math::initialize(F_POST, DUMMY_VAR__);
        stan::math::fill(F_POST, DUMMY_VAR__);
        current_statement_begin__ = 573;
        validate_non_negative_index("v", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v(n);
        stan::math::initialize(v, DUMMY_VAR__);
        stan::math::fill(v, DUMMY_VAR__);
        current_statement_begin__ = 574;
        validate_non_negative_index("Ly", "n", n);
        validate_non_negative_index("Ly", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Ly(n, n);
        stan::math::initialize(Ly, DUMMY_VAR__);
        stan::math::fill(Ly, DUMMY_VAR__);
        current_statement_begin__ = 577;
        validate_non_negative_index("delta_vec", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta_vec(n);
        stan::math::initialize(delta_vec, DUMMY_VAR__);
        stan::math::fill(delta_vec, DUMMY_VAR__);
        stan::math::assign(delta_vec,rep_vector(delta, n));
        current_statement_begin__ = 578;
        validate_non_negative_index("sigma2_vec", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma2_vec(n);
        stan::math::initialize(sigma2_vec, DUMMY_VAR__);
        stan::math::fill(sigma2_vec, DUMMY_VAR__);
        stan::math::assign(sigma2_vec,rep_vector(square(sigma), n));
        current_statement_begin__ = 579;
        validate_non_negative_index("Ky", "n", n);
        validate_non_negative_index("Ky", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Ky(n, n);
        stan::math::initialize(Ky, DUMMY_VAR__);
        stan::math::fill(Ky, DUMMY_VAR__);
        stan::math::assign(Ky,add(add(STAN_matrix_array_sum(KX, pstream__), diag_matrix(sigma2_vec)), diag_matrix(multiply(num_comps, delta_vec))));
        current_statement_begin__ = 583;
        stan::math::assign(Ly, cholesky_decompose(Ky));
        current_statement_begin__ = 584;
        stan::math::assign(v, mdivide_left_tri_low(Ly, y));
        current_statement_begin__ = 587;
        for (int j = 1; j <= num_comps; ++j) {
            current_statement_begin__ = 588;
            stan::math::assign(inds, static_cast<std::vector<int> >(stan::math::array_builder<int >().add(j).add((J + j)).array()));
            current_statement_begin__ = 589;
            stan::model::assign(F_POST, 
                        stan::model::cons_list(stan::model::index_multi(inds), stan::model::nil_index_list()), 
                        STAN_gp_posterior_helper(Ly, get_base1(KX_s, j, "KX_s", 1), get_base1(KX_ss, j, "KX_ss", 1), v, pstream__), 
                        "assigning variable F_POST");
        }
        current_statement_begin__ = 593;
        stan::math::assign(inds, static_cast<std::vector<int> >(stan::math::array_builder<int >().add(J).add((2 * J)).array()));
        current_statement_begin__ = 594;
        stan::model::assign(F_POST, 
                    stan::model::cons_list(stan::model::index_multi(inds), stan::model::nil_index_list()), 
                    STAN_gp_posterior_helper(Ly, STAN_matrix_array_sum(KX_s, pstream__), STAN_matrix_array_sum(KX_ss, pstream__), v, pstream__), 
                    "assigning variable F_POST");
        current_statement_begin__ = 597;
        return stan::math::promote_scalar<fun_return_scalar_t__>(F_POST);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_gp_posterior_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic, 1> >
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& KX,
                      const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic> >& KX_s,
                      const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic> >& KX_ss,
                      const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& y,
                      const T4__& delta,
                      const T5__& sigma, std::ostream* pstream__) const {
        return STAN_gp_posterior(KX, KX_s, KX_ss, y, delta, sigma, pstream__);
    }
};
template <typename T0__, typename T2__>
typename boost::math::tools::promote_args<T0__, T2__>::type
STAN_log_prior(const T0__& x,
                   const std::vector<int>& types,
                   const std::vector<T2__>& p, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 606;
        local_scalar_t__ log_prior(DUMMY_VAR__);
        (void) log_prior;  // dummy to suppress unused var warning
        stan::math::initialize(log_prior, DUMMY_VAR__);
        stan::math::fill(log_prior, DUMMY_VAR__);
        stan::math::assign(log_prior,0);
        current_statement_begin__ = 607;
        local_scalar_t__ t(DUMMY_VAR__);
        (void) t;  // dummy to suppress unused var warning
        stan::math::initialize(t, DUMMY_VAR__);
        stan::math::fill(t, DUMMY_VAR__);
        stan::math::assign(t,x);
        current_statement_begin__ = 610;
        if (as_bool(logical_eq(get_base1(types, 2, "types", 1), 1))) {
            current_statement_begin__ = 611;
            stan::math::assign(log_prior, (log_prior + stan::math::log(stan::math::fabs((2 * x)))));
            current_statement_begin__ = 612;
            stan::math::assign(t, square(x));
        }
        current_statement_begin__ = 616;
        if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 2))) {
            current_statement_begin__ = 617;
            stan::math::assign(log_prior, (log_prior + normal_log(t, get_base1(p, 1, "p", 1), get_base1(p, 2, "p", 1))));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 3))) {
            current_statement_begin__ = 619;
            stan::math::assign(log_prior, (log_prior + student_t_log(t, get_base1(p, 1, "p", 1), 0.0, 1.0)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 4))) {
            current_statement_begin__ = 621;
            stan::math::assign(log_prior, (log_prior + gamma_log(t, get_base1(p, 1, "p", 1), get_base1(p, 2, "p", 1))));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 5))) {
            current_statement_begin__ = 623;
            stan::math::assign(log_prior, (log_prior + inv_gamma_log(t, get_base1(p, 1, "p", 1), get_base1(p, 2, "p", 1))));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 6))) {
            current_statement_begin__ = 625;
            stan::math::assign(log_prior, (log_prior + lognormal_log(t, get_base1(p, 1, "p", 1), get_base1(p, 2, "p", 1))));
        }
        current_statement_begin__ = 628;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_prior);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_log_prior_functor__ {
    template <typename T0__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T2__>::type
    operator()(const T0__& x,
                   const std::vector<int>& types,
                   const std::vector<T2__>& p, std::ostream* pstream__) const {
        return STAN_log_prior(x, types, p, pstream__);
    }
};
 } 
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_rep_vector_times(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x,
                          const int& J, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_rep_vector_times<double>(x, J, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_rep_vector_each(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x,
                         const int& J, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_rep_vector_each<double>(x, J, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_rep_cols_times(const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& X,
                        const int& J, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_rep_cols_times<double>(X, J, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_rep_cols_each(const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& X,
                       const int& J, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_rep_cols_each<double>(X, J, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_vectorsum(const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& vecs,
                   const int& L, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_vectorsum<double>(vecs, L, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_warp_input(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x,
                    const double& a, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_warp_input<double, double>(x, a, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_var_mask(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x,
                  const double& a, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_var_mask<double, double>(x, a, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_expand(const Eigen::Matrix<double, Eigen::Dynamic, 1>& v,
                const std::vector<int>& idx_expand, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_expand<double>(v, idx_expand, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_edit_x_cont(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x_cont,
                     const std::vector<int>& idx_expand,
                     const Eigen::Matrix<double, Eigen::Dynamic, 1>& teff_obs,
                     const Eigen::Matrix<double, Eigen::Dynamic, 1>& teff, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_edit_x_cont<double, double, double>(x_cont, idx_expand, teff_obs, teff, pstream__);
}
// [[Rcpp::export]]
double
STAN_quad_form_inv(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x,
                       const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& A, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_quad_form_inv<double, double>(x, A, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_zerosum(const std::vector<int>& x1,
                             const std::vector<int>& x2,
                             const int& num_cat, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_kernel_base_zerosum(x1, x2, num_cat, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_cat(const std::vector<int>& x1,
                         const std::vector<int>& x2, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_kernel_base_cat(x1, x2, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_bin_mask(const std::vector<int>& x1,
                              const std::vector<int>& x2, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_kernel_base_bin_mask(x1, x2, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_const(const std::vector<int>& x1,
                      const std::vector<int>& x2,
                      const int& kernel_type,
                      const int& num_cat, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_kernel_const(x1, x2, kernel_type, num_cat, pstream__);
}
// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_const_all(const int& n1,
                          const int& n2,
                          const std::vector<std::vector<int> >& x1,
                          const std::vector<std::vector<int> >& x2,
                          const std::vector<std::vector<int> >& x1_mask,
                          const std::vector<std::vector<int> >& x2_mask,
                          const std::vector<int>& num_levels,
                          const std::vector<std::vector<int> >& components, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_kernel_const_all(n1, n2, x1, x2, x1_mask, x2_mask, num_levels, components, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_base_var_mask(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x1,
                              const Eigen::Matrix<double, Eigen::Dynamic, 1>& x2,
                              const double& steepness,
                              const std::vector<double>& vm_params, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_kernel_base_var_mask<double, double, double, double>(x1, x2, steepness, vm_params, pstream__);
}
// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_all(const int& n1,
                    const int& n2,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                    const std::vector<std::vector<int> >& components,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& x1,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& x2,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& x1_unnorm,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& x2_unnorm,
                    const std::vector<double>& alpha,
                    const std::vector<double>& ell,
                    const std::vector<double>& wrp,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& beta,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& teff,
                    const std::vector<std::vector<double> >& vm_params,
                    const std::vector<int>& idx1_expand,
                    const std::vector<int>& idx2_expand,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& teff_zero, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_kernel_all<double, double, double, double, double, double, double, double, double, double, double, double>(n1, n2, K_const, components, x1, x2, x1_unnorm, x2_unnorm, alpha, ell, wrp, beta, teff, vm_params, idx1_expand, idx2_expand, teff_zero, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_phi(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x,
             const int& m,
             const double& L, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_phi<double, double>(x, m, L, pstream__);
}
// [[Rcpp::export]]
double
STAN_lambda(const int& m,
                const double& L, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_lambda<double>(m, L, pstream__);
}
// [[Rcpp::export]]
double
STAN_spd_eq(const double& w,
                const double& ell, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_spd_eq<double, double>(w, ell, pstream__);
}
// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
STAN_phi_matrix(const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& x,
                    const int& M,
                    const double& L,
                    const std::vector<std::vector<int> >& components, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_phi_matrix<double, double>(x, M, L, components, pstream__);
}
// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >
STAN_lambda_matrix(const std::vector<double>& ell,
                       const int& M,
                       const double& L,
                       const std::vector<std::vector<int> >& components, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_lambda_matrix<double, double>(ell, M, L, components, pstream__);
}
// [[Rcpp::export]]
std::vector<int>
STAN_ranks(const std::vector<std::vector<int> >& components,
               const std::vector<int>& x_cat_num_levels, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_ranks(components, x_cat_num_levels, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_delta_matrix(const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                      const std::vector<int>& ranks,
                      const std::vector<std::vector<int> >& components, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_delta_matrix<double>(K_const, ranks, components, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_theta_matrix(const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                      const std::vector<int>& ranks,
                      const std::vector<std::vector<int> >& components, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_theta_matrix<double>(K_const, ranks, components, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_D_matrix(const std::vector<double>& alpha,
                  const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& bfa_lambda,
                  const Eigen::Matrix<double, Eigen::Dynamic, 1>& bfa_delta,
                  const std::vector<int>& ranks, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_D_matrix<double, double, double>(alpha, bfa_lambda, bfa_delta, ranks, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_V_matrix(const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& bfa_phi,
                  const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& bfa_theta,
                  const std::vector<int>& ranks, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_V_matrix<double, double>(bfa_phi, bfa_theta, ranks, pstream__);
}
// [[Rcpp::export]]
double
STAN_multi_normal_bfa_logpdf(const Eigen::Matrix<double, Eigen::Dynamic, 1>& y,
                                 const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& V,
                                 const Eigen::Matrix<double, Eigen::Dynamic, 1>& D_diag,
                                 const double& sigma, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_multi_normal_bfa_logpdf<double, double, double, double>(y, V, D_diag, sigma, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_matrix_array_sum(const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& K, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_matrix_array_sum<double>(K, pstream__);
}
// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >
STAN_gp_posterior_helper(const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& Ly,
                             const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& K_s,
                             const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& K_ss,
                             const Eigen::Matrix<double, Eigen::Dynamic, 1>& v, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_gp_posterior_helper<double, double, double, double>(Ly, K_s, K_ss, v, pstream__);
}
// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >
STAN_gp_posterior(const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& KX,
                      const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& KX_s,
                      const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& KX_ss,
                      const Eigen::Matrix<double, Eigen::Dynamic, 1>& y,
                      const double& delta,
                      const double& sigma, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_gp_posterior<double, double, double, double, double, double>(KX, KX_s, KX_ss, y, delta, sigma, pstream__);
}
// [[Rcpp::export]]
double
STAN_log_prior(const double& x,
                   const std::vector<int>& types,
                   const std::vector<double>& p, std::ostream* pstream__ = 0){
  return 
user_723e4cc387b03d89e904fb27ad7e6631::STAN_log_prior<double, double>(x, types, p, pstream__);
}
