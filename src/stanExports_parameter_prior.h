// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_parameter_prior_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_parameter_prior");
    reader.add_event(0, 0, "include", "_common/licence.stan");
    reader.add_event(0, 0, "start", "_common/licence.stan");
    reader.add_event(15, 15, "end", "_common/licence.stan");
    reader.add_event(15, 1, "restart", "model_parameter_prior");
    reader.add_event(17, 3, "include", "_common/functions-prior.stan");
    reader.add_event(17, 0, "start", "_common/functions-prior.stan");
    reader.add_event(43, 26, "end", "_common/functions-prior.stan");
    reader.add_event(43, 4, "restart", "model_parameter_prior");
    reader.add_event(46, 7, "include", "_common/data-general.stan");
    reader.add_event(46, 0, "start", "_common/data-general.stan");
    reader.add_event(97, 51, "end", "_common/data-general.stan");
    reader.add_event(97, 8, "restart", "model_parameter_prior");
    reader.add_event(97, 8, "include", "_common/data-covariates.stan");
    reader.add_event(97, 0, "start", "_common/data-covariates.stan");
    reader.add_event(108, 11, "end", "_common/data-covariates.stan");
    reader.add_event(108, 9, "restart", "model_parameter_prior");
    reader.add_event(108, 9, "include", "_common/data-priors.stan");
    reader.add_event(108, 0, "start", "_common/data-priors.stan");
    reader.add_event(118, 10, "end", "_common/data-priors.stan");
    reader.add_event(118, 10, "restart", "model_parameter_prior");
    reader.add_event(127, 19, "include", "_common/params.stan");
    reader.add_event(127, 0, "start", "_common/params.stan");
    reader.add_event(132, 5, "end", "_common/params.stan");
    reader.add_event(132, 20, "restart", "model_parameter_prior");
    reader.add_event(138, 26, "include", "_common/tparams.stan");
    reader.add_event(138, 0, "start", "_common/tparams.stan");
    reader.add_event(143, 5, "end", "_common/tparams.stan");
    reader.add_event(143, 27, "restart", "model_parameter_prior");
    reader.add_event(147, 31, "include", "_common/priors.stan");
    reader.add_event(147, 0, "start", "_common/priors.stan");
    reader.add_event(177, 30, "end", "_common/priors.stan");
    reader.add_event(177, 32, "restart", "model_parameter_prior");
    reader.add_event(187, 40, "end", "model_parameter_prior");
    return reader;
}
template <typename T0__, typename T2__>
typename boost::math::tools::promote_args<T0__, T2__>::type
STAN_log_prior(const T0__& x,
                   const std::vector<int>& types,
                   const std::vector<T2__>& p, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 20;
        local_scalar_t__ log_prior(DUMMY_VAR__);
        (void) log_prior;  // dummy to suppress unused var warning
        stan::math::initialize(log_prior, DUMMY_VAR__);
        stan::math::fill(log_prior, DUMMY_VAR__);
        stan::math::assign(log_prior,0);
        current_statement_begin__ = 21;
        local_scalar_t__ t(DUMMY_VAR__);
        (void) t;  // dummy to suppress unused var warning
        stan::math::initialize(t, DUMMY_VAR__);
        stan::math::fill(t, DUMMY_VAR__);
        stan::math::assign(t,x);
        current_statement_begin__ = 24;
        if (as_bool(logical_eq(get_base1(types, 2, "types", 1), 1))) {
            current_statement_begin__ = 25;
            stan::math::assign(log_prior, (log_prior + stan::math::log(stan::math::fabs((2 * x)))));
            current_statement_begin__ = 26;
            stan::math::assign(t, square(x));
        }
        current_statement_begin__ = 30;
        if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 2))) {
            current_statement_begin__ = 31;
            stan::math::assign(log_prior, (log_prior + normal_log(t, get_base1(p, 1, "p", 1), get_base1(p, 2, "p", 1))));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 3))) {
            current_statement_begin__ = 33;
            stan::math::assign(log_prior, (log_prior + student_t_log(t, get_base1(p, 1, "p", 1), 0.0, 1.0)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 4))) {
            current_statement_begin__ = 35;
            stan::math::assign(log_prior, (log_prior + gamma_log(t, get_base1(p, 1, "p", 1), get_base1(p, 2, "p", 1))));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 5))) {
            current_statement_begin__ = 37;
            stan::math::assign(log_prior, (log_prior + inv_gamma_log(t, get_base1(p, 1, "p", 1), get_base1(p, 2, "p", 1))));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 6))) {
            current_statement_begin__ = 39;
            stan::math::assign(log_prior, (log_prior + lognormal_log(t, get_base1(p, 1, "p", 1), get_base1(p, 2, "p", 1))));
        }
        current_statement_begin__ = 42;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_prior);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_log_prior_functor__ {
    template <typename T0__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T2__>::type
    operator()(const T0__& x,
                   const std::vector<int>& types,
                   const std::vector<T2__>& p, std::ostream* pstream__) const {
        return STAN_log_prior(x, types, p, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_parameter_prior
  : public stan::model::model_base_crtp<model_parameter_prior> {
private:
        int is_verbose;
        int is_likelihood_skipped;
        int num_obs;
        int num_cov_cont;
        int num_cov_cat;
        int num_comps;
        int num_ell;
        int num_ns;
        int num_heter;
        int num_uncrt;
        int num_bt;
        std::vector<std::vector<int> > components;
        std::vector<vector_d> teff_zero;
        std::vector<vector_d> teff_lb;
        std::vector<vector_d> teff_ub;
        std::vector<int> x_cat_num_levels;
        double delta;
        std::vector<double> vm_params;
        std::vector<vector_d> x_cont;
        std::vector<vector_d> x_cont_unnorm;
        std::vector<std::vector<int> > x_cont_mask;
        std::vector<std::vector<int> > x_cat;
        std::vector<int> idx_expand;
        std::vector<std::vector<int> > prior_alpha;
        std::vector<std::vector<int> > prior_ell;
        std::vector<std::vector<int> > prior_wrp;
        std::vector<std::vector<int> > prior_teff;
        std::vector<std::vector<double> > hyper_alpha;
        std::vector<std::vector<double> > hyper_ell;
        std::vector<std::vector<double> > hyper_wrp;
        std::vector<std::vector<double> > hyper_teff;
        std::vector<std::vector<double> > hyper_beta;
        int obs_model;
        std::vector<std::vector<int> > prior_sigma;
        std::vector<std::vector<int> > prior_phi;
        std::vector<std::vector<double> > hyper_sigma;
        std::vector<std::vector<double> > hyper_phi;
        std::vector<std::vector<double> > hyper_gamma;
public:
    model_parameter_prior(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_parameter_prior(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_parameter_prior_namespace::model_parameter_prior";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 48;
            context__.validate_dims("data initialization", "is_verbose", "int", context__.to_vec());
            is_verbose = int(0);
            vals_i__ = context__.vals_i("is_verbose");
            pos__ = 0;
            is_verbose = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_verbose", is_verbose, 0);
            check_less_or_equal(function__, "is_verbose", is_verbose, 1);
            current_statement_begin__ = 49;
            context__.validate_dims("data initialization", "is_likelihood_skipped", "int", context__.to_vec());
            is_likelihood_skipped = int(0);
            vals_i__ = context__.vals_i("is_likelihood_skipped");
            pos__ = 0;
            is_likelihood_skipped = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_likelihood_skipped", is_likelihood_skipped, 0);
            check_less_or_equal(function__, "is_likelihood_skipped", is_likelihood_skipped, 1);
            current_statement_begin__ = 52;
            context__.validate_dims("data initialization", "num_obs", "int", context__.to_vec());
            num_obs = int(0);
            vals_i__ = context__.vals_i("num_obs");
            pos__ = 0;
            num_obs = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_obs", num_obs, 0);
            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "num_cov_cont", "int", context__.to_vec());
            num_cov_cont = int(0);
            vals_i__ = context__.vals_i("num_cov_cont");
            pos__ = 0;
            num_cov_cont = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_cov_cont", num_cov_cont, 0);
            current_statement_begin__ = 54;
            context__.validate_dims("data initialization", "num_cov_cat", "int", context__.to_vec());
            num_cov_cat = int(0);
            vals_i__ = context__.vals_i("num_cov_cat");
            pos__ = 0;
            num_cov_cat = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_cov_cat", num_cov_cat, 0);
            current_statement_begin__ = 55;
            context__.validate_dims("data initialization", "num_comps", "int", context__.to_vec());
            num_comps = int(0);
            vals_i__ = context__.vals_i("num_comps");
            pos__ = 0;
            num_comps = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_comps", num_comps, 1);
            current_statement_begin__ = 56;
            context__.validate_dims("data initialization", "num_ell", "int", context__.to_vec());
            num_ell = int(0);
            vals_i__ = context__.vals_i("num_ell");
            pos__ = 0;
            num_ell = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_ell", num_ell, 0);
            current_statement_begin__ = 57;
            context__.validate_dims("data initialization", "num_ns", "int", context__.to_vec());
            num_ns = int(0);
            vals_i__ = context__.vals_i("num_ns");
            pos__ = 0;
            num_ns = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_ns", num_ns, 0);
            current_statement_begin__ = 58;
            context__.validate_dims("data initialization", "num_heter", "int", context__.to_vec());
            num_heter = int(0);
            vals_i__ = context__.vals_i("num_heter");
            pos__ = 0;
            num_heter = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_heter", num_heter, 0);
            current_statement_begin__ = 59;
            context__.validate_dims("data initialization", "num_uncrt", "int", context__.to_vec());
            num_uncrt = int(0);
            vals_i__ = context__.vals_i("num_uncrt");
            pos__ = 0;
            num_uncrt = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_uncrt", num_uncrt, 0);
            current_statement_begin__ = 60;
            context__.validate_dims("data initialization", "num_bt", "int", context__.to_vec());
            num_bt = int(0);
            vals_i__ = context__.vals_i("num_bt");
            pos__ = 0;
            num_bt = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_bt", num_bt, 0);
            current_statement_begin__ = 87;
            validate_non_negative_index("components", "num_comps", num_comps);
            validate_non_negative_index("components", "9", 9);
            context__.validate_dims("data initialization", "components", "int", context__.to_vec(num_comps,9));
            components = std::vector<std::vector<int> >(num_comps, std::vector<int>(9, int(0)));
            vals_i__ = context__.vals_i("components");
            pos__ = 0;
            size_t components_k_0_max__ = num_comps;
            size_t components_k_1_max__ = 9;
            for (size_t k_1__ = 0; k_1__ < components_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < components_k_0_max__; ++k_0__) {
                    components[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t components_i_0_max__ = num_comps;
            size_t components_i_1_max__ = 9;
            for (size_t i_0__ = 0; i_0__ < components_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < components_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "components[i_0__][i_1__]", components[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 90;
            validate_non_negative_index("teff_zero", "num_bt", num_bt);
            validate_non_negative_index("teff_zero", "logical_gt(num_uncrt, 0)", logical_gt(num_uncrt, 0));
            context__.validate_dims("data initialization", "teff_zero", "vector_d", context__.to_vec(logical_gt(num_uncrt, 0),num_bt));
            teff_zero = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(logical_gt(num_uncrt, 0), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_bt));
            vals_r__ = context__.vals_r("teff_zero");
            pos__ = 0;
            size_t teff_zero_j_1_max__ = num_bt;
            size_t teff_zero_k_0_max__ = logical_gt(num_uncrt, 0);
            for (size_t j_1__ = 0; j_1__ < teff_zero_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < teff_zero_k_0_max__; ++k_0__) {
                    teff_zero[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 91;
            validate_non_negative_index("teff_lb", "num_bt", num_bt);
            validate_non_negative_index("teff_lb", "logical_gt(num_uncrt, 0)", logical_gt(num_uncrt, 0));
            context__.validate_dims("data initialization", "teff_lb", "vector_d", context__.to_vec(logical_gt(num_uncrt, 0),num_bt));
            teff_lb = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(logical_gt(num_uncrt, 0), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_bt));
            vals_r__ = context__.vals_r("teff_lb");
            pos__ = 0;
            size_t teff_lb_j_1_max__ = num_bt;
            size_t teff_lb_k_0_max__ = logical_gt(num_uncrt, 0);
            for (size_t j_1__ = 0; j_1__ < teff_lb_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < teff_lb_k_0_max__; ++k_0__) {
                    teff_lb[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 92;
            validate_non_negative_index("teff_ub", "num_bt", num_bt);
            validate_non_negative_index("teff_ub", "logical_gt(num_uncrt, 0)", logical_gt(num_uncrt, 0));
            context__.validate_dims("data initialization", "teff_ub", "vector_d", context__.to_vec(logical_gt(num_uncrt, 0),num_bt));
            teff_ub = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(logical_gt(num_uncrt, 0), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_bt));
            vals_r__ = context__.vals_r("teff_ub");
            pos__ = 0;
            size_t teff_ub_j_1_max__ = num_bt;
            size_t teff_ub_k_0_max__ = logical_gt(num_uncrt, 0);
            for (size_t j_1__ = 0; j_1__ < teff_ub_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < teff_ub_k_0_max__; ++k_0__) {
                    teff_ub[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 95;
            validate_non_negative_index("x_cat_num_levels", "num_cov_cat", num_cov_cat);
            context__.validate_dims("data initialization", "x_cat_num_levels", "int", context__.to_vec(num_cov_cat));
            x_cat_num_levels = std::vector<int>(num_cov_cat, int(0));
            vals_i__ = context__.vals_i("x_cat_num_levels");
            pos__ = 0;
            size_t x_cat_num_levels_k_0_max__ = num_cov_cat;
            for (size_t k_0__ = 0; k_0__ < x_cat_num_levels_k_0_max__; ++k_0__) {
                x_cat_num_levels[k_0__] = vals_i__[pos__++];
            }
            size_t x_cat_num_levels_i_0_max__ = num_cov_cat;
            for (size_t i_0__ = 0; i_0__ < x_cat_num_levels_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "x_cat_num_levels[i_0__]", x_cat_num_levels[i_0__], 0);
            }
            current_statement_begin__ = 96;
            context__.validate_dims("data initialization", "delta", "double", context__.to_vec());
            delta = double(0);
            vals_r__ = context__.vals_r("delta");
            pos__ = 0;
            delta = vals_r__[pos__++];
            current_statement_begin__ = 97;
            validate_non_negative_index("vm_params", "2", 2);
            context__.validate_dims("data initialization", "vm_params", "double", context__.to_vec(2));
            vm_params = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("vm_params");
            pos__ = 0;
            size_t vm_params_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < vm_params_k_0_max__; ++k_0__) {
                vm_params[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 99;
            validate_non_negative_index("x_cont", "num_obs", num_obs);
            validate_non_negative_index("x_cont", "num_cov_cont", num_cov_cont);
            context__.validate_dims("data initialization", "x_cont", "vector_d", context__.to_vec(num_cov_cont,num_obs));
            x_cont = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(num_cov_cont, Eigen::Matrix<double, Eigen::Dynamic, 1>(num_obs));
            vals_r__ = context__.vals_r("x_cont");
            pos__ = 0;
            size_t x_cont_j_1_max__ = num_obs;
            size_t x_cont_k_0_max__ = num_cov_cont;
            for (size_t j_1__ = 0; j_1__ < x_cont_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x_cont_k_0_max__; ++k_0__) {
                    x_cont[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 100;
            validate_non_negative_index("x_cont_unnorm", "num_obs", num_obs);
            validate_non_negative_index("x_cont_unnorm", "num_cov_cont", num_cov_cont);
            context__.validate_dims("data initialization", "x_cont_unnorm", "vector_d", context__.to_vec(num_cov_cont,num_obs));
            x_cont_unnorm = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(num_cov_cont, Eigen::Matrix<double, Eigen::Dynamic, 1>(num_obs));
            vals_r__ = context__.vals_r("x_cont_unnorm");
            pos__ = 0;
            size_t x_cont_unnorm_j_1_max__ = num_obs;
            size_t x_cont_unnorm_k_0_max__ = num_cov_cont;
            for (size_t j_1__ = 0; j_1__ < x_cont_unnorm_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x_cont_unnorm_k_0_max__; ++k_0__) {
                    x_cont_unnorm[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 101;
            validate_non_negative_index("x_cont_mask", "num_cov_cont", num_cov_cont);
            validate_non_negative_index("x_cont_mask", "num_obs", num_obs);
            context__.validate_dims("data initialization", "x_cont_mask", "int", context__.to_vec(num_cov_cont,num_obs));
            x_cont_mask = std::vector<std::vector<int> >(num_cov_cont, std::vector<int>(num_obs, int(0)));
            vals_i__ = context__.vals_i("x_cont_mask");
            pos__ = 0;
            size_t x_cont_mask_k_0_max__ = num_cov_cont;
            size_t x_cont_mask_k_1_max__ = num_obs;
            for (size_t k_1__ = 0; k_1__ < x_cont_mask_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < x_cont_mask_k_0_max__; ++k_0__) {
                    x_cont_mask[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 102;
            validate_non_negative_index("x_cat", "num_cov_cat", num_cov_cat);
            validate_non_negative_index("x_cat", "num_obs", num_obs);
            context__.validate_dims("data initialization", "x_cat", "int", context__.to_vec(num_cov_cat,num_obs));
            x_cat = std::vector<std::vector<int> >(num_cov_cat, std::vector<int>(num_obs, int(0)));
            vals_i__ = context__.vals_i("x_cat");
            pos__ = 0;
            size_t x_cat_k_0_max__ = num_cov_cat;
            size_t x_cat_k_1_max__ = num_obs;
            for (size_t k_1__ = 0; k_1__ < x_cat_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < x_cat_k_0_max__; ++k_0__) {
                    x_cat[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 108;
            validate_non_negative_index("idx_expand", "num_obs", num_obs);
            context__.validate_dims("data initialization", "idx_expand", "int", context__.to_vec(num_obs));
            idx_expand = std::vector<int>(num_obs, int(0));
            vals_i__ = context__.vals_i("idx_expand");
            pos__ = 0;
            size_t idx_expand_k_0_max__ = num_obs;
            for (size_t k_0__ = 0; k_0__ < idx_expand_k_0_max__; ++k_0__) {
                idx_expand[k_0__] = vals_i__[pos__++];
            }
            size_t idx_expand_i_0_max__ = num_obs;
            for (size_t i_0__ = 0; i_0__ < idx_expand_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "idx_expand[i_0__]", idx_expand[i_0__], 1);
                check_less_or_equal(function__, "idx_expand[i_0__]", idx_expand[i_0__], (num_bt + 1));
            }
            current_statement_begin__ = 110;
            validate_non_negative_index("prior_alpha", "num_comps", num_comps);
            validate_non_negative_index("prior_alpha", "2", 2);
            context__.validate_dims("data initialization", "prior_alpha", "int", context__.to_vec(num_comps,2));
            prior_alpha = std::vector<std::vector<int> >(num_comps, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("prior_alpha");
            pos__ = 0;
            size_t prior_alpha_k_0_max__ = num_comps;
            size_t prior_alpha_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < prior_alpha_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_alpha_k_0_max__; ++k_0__) {
                    prior_alpha[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t prior_alpha_i_0_max__ = num_comps;
            size_t prior_alpha_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_alpha_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_alpha_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_alpha[i_0__][i_1__]", prior_alpha[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 111;
            validate_non_negative_index("prior_ell", "num_ell", num_ell);
            validate_non_negative_index("prior_ell", "2", 2);
            context__.validate_dims("data initialization", "prior_ell", "int", context__.to_vec(num_ell,2));
            prior_ell = std::vector<std::vector<int> >(num_ell, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("prior_ell");
            pos__ = 0;
            size_t prior_ell_k_0_max__ = num_ell;
            size_t prior_ell_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < prior_ell_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_ell_k_0_max__; ++k_0__) {
                    prior_ell[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t prior_ell_i_0_max__ = num_ell;
            size_t prior_ell_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_ell_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_ell_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_ell[i_0__][i_1__]", prior_ell[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 112;
            validate_non_negative_index("prior_wrp", "num_ns", num_ns);
            validate_non_negative_index("prior_wrp", "2", 2);
            context__.validate_dims("data initialization", "prior_wrp", "int", context__.to_vec(num_ns,2));
            prior_wrp = std::vector<std::vector<int> >(num_ns, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("prior_wrp");
            pos__ = 0;
            size_t prior_wrp_k_0_max__ = num_ns;
            size_t prior_wrp_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < prior_wrp_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_wrp_k_0_max__; ++k_0__) {
                    prior_wrp[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t prior_wrp_i_0_max__ = num_ns;
            size_t prior_wrp_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_wrp_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_wrp_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_wrp[i_0__][i_1__]", prior_wrp[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 113;
            validate_non_negative_index("prior_teff", "logical_gt(num_uncrt, 0)", logical_gt(num_uncrt, 0));
            validate_non_negative_index("prior_teff", "2", 2);
            context__.validate_dims("data initialization", "prior_teff", "int", context__.to_vec(logical_gt(num_uncrt, 0),2));
            prior_teff = std::vector<std::vector<int> >(logical_gt(num_uncrt, 0), std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("prior_teff");
            pos__ = 0;
            size_t prior_teff_k_0_max__ = logical_gt(num_uncrt, 0);
            size_t prior_teff_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < prior_teff_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_teff_k_0_max__; ++k_0__) {
                    prior_teff[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t prior_teff_i_0_max__ = logical_gt(num_uncrt, 0);
            size_t prior_teff_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_teff_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_teff_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_teff[i_0__][i_1__]", prior_teff[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 114;
            validate_non_negative_index("hyper_alpha", "num_comps", num_comps);
            validate_non_negative_index("hyper_alpha", "3", 3);
            context__.validate_dims("data initialization", "hyper_alpha", "double", context__.to_vec(num_comps,3));
            hyper_alpha = std::vector<std::vector<double> >(num_comps, std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("hyper_alpha");
            pos__ = 0;
            size_t hyper_alpha_k_0_max__ = num_comps;
            size_t hyper_alpha_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < hyper_alpha_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_alpha_k_0_max__; ++k_0__) {
                    hyper_alpha[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 115;
            validate_non_negative_index("hyper_ell", "num_ell", num_ell);
            validate_non_negative_index("hyper_ell", "3", 3);
            context__.validate_dims("data initialization", "hyper_ell", "double", context__.to_vec(num_ell,3));
            hyper_ell = std::vector<std::vector<double> >(num_ell, std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("hyper_ell");
            pos__ = 0;
            size_t hyper_ell_k_0_max__ = num_ell;
            size_t hyper_ell_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < hyper_ell_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_ell_k_0_max__; ++k_0__) {
                    hyper_ell[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 116;
            validate_non_negative_index("hyper_wrp", "num_ns", num_ns);
            validate_non_negative_index("hyper_wrp", "3", 3);
            context__.validate_dims("data initialization", "hyper_wrp", "double", context__.to_vec(num_ns,3));
            hyper_wrp = std::vector<std::vector<double> >(num_ns, std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("hyper_wrp");
            pos__ = 0;
            size_t hyper_wrp_k_0_max__ = num_ns;
            size_t hyper_wrp_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < hyper_wrp_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_wrp_k_0_max__; ++k_0__) {
                    hyper_wrp[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 117;
            validate_non_negative_index("hyper_teff", "logical_gt(num_uncrt, 0)", logical_gt(num_uncrt, 0));
            validate_non_negative_index("hyper_teff", "3", 3);
            context__.validate_dims("data initialization", "hyper_teff", "double", context__.to_vec(logical_gt(num_uncrt, 0),3));
            hyper_teff = std::vector<std::vector<double> >(logical_gt(num_uncrt, 0), std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("hyper_teff");
            pos__ = 0;
            size_t hyper_teff_k_0_max__ = logical_gt(num_uncrt, 0);
            size_t hyper_teff_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < hyper_teff_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_teff_k_0_max__; ++k_0__) {
                    hyper_teff[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 118;
            validate_non_negative_index("hyper_beta", "logical_gt(num_heter, 0)", logical_gt(num_heter, 0));
            validate_non_negative_index("hyper_beta", "2", 2);
            context__.validate_dims("data initialization", "hyper_beta", "double", context__.to_vec(logical_gt(num_heter, 0),2));
            hyper_beta = std::vector<std::vector<double> >(logical_gt(num_heter, 0), std::vector<double>(2, double(0)));
            vals_r__ = context__.vals_r("hyper_beta");
            pos__ = 0;
            size_t hyper_beta_k_0_max__ = logical_gt(num_heter, 0);
            size_t hyper_beta_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < hyper_beta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_beta_k_0_max__; ++k_0__) {
                    hyper_beta[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 119;
            context__.validate_dims("data initialization", "obs_model", "int", context__.to_vec());
            obs_model = int(0);
            vals_i__ = context__.vals_i("obs_model");
            pos__ = 0;
            obs_model = vals_i__[pos__++];
            check_greater_or_equal(function__, "obs_model", obs_model, 1);
            check_less_or_equal(function__, "obs_model", obs_model, 5);
            current_statement_begin__ = 120;
            validate_non_negative_index("prior_sigma", "logical_eq(obs_model, 1)", logical_eq(obs_model, 1));
            validate_non_negative_index("prior_sigma", "2", 2);
            context__.validate_dims("data initialization", "prior_sigma", "int", context__.to_vec(logical_eq(obs_model, 1),2));
            prior_sigma = std::vector<std::vector<int> >(logical_eq(obs_model, 1), std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("prior_sigma");
            pos__ = 0;
            size_t prior_sigma_k_0_max__ = logical_eq(obs_model, 1);
            size_t prior_sigma_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < prior_sigma_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_sigma_k_0_max__; ++k_0__) {
                    prior_sigma[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t prior_sigma_i_0_max__ = logical_eq(obs_model, 1);
            size_t prior_sigma_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_sigma_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_sigma_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_sigma[i_0__][i_1__]", prior_sigma[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 121;
            validate_non_negative_index("prior_phi", "logical_eq(obs_model, 3)", logical_eq(obs_model, 3));
            validate_non_negative_index("prior_phi", "2", 2);
            context__.validate_dims("data initialization", "prior_phi", "int", context__.to_vec(logical_eq(obs_model, 3),2));
            prior_phi = std::vector<std::vector<int> >(logical_eq(obs_model, 3), std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("prior_phi");
            pos__ = 0;
            size_t prior_phi_k_0_max__ = logical_eq(obs_model, 3);
            size_t prior_phi_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < prior_phi_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_phi_k_0_max__; ++k_0__) {
                    prior_phi[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t prior_phi_i_0_max__ = logical_eq(obs_model, 3);
            size_t prior_phi_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_phi_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_phi_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_phi[i_0__][i_1__]", prior_phi[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 122;
            validate_non_negative_index("hyper_sigma", "logical_eq(obs_model, 1)", logical_eq(obs_model, 1));
            validate_non_negative_index("hyper_sigma", "3", 3);
            context__.validate_dims("data initialization", "hyper_sigma", "double", context__.to_vec(logical_eq(obs_model, 1),3));
            hyper_sigma = std::vector<std::vector<double> >(logical_eq(obs_model, 1), std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("hyper_sigma");
            pos__ = 0;
            size_t hyper_sigma_k_0_max__ = logical_eq(obs_model, 1);
            size_t hyper_sigma_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < hyper_sigma_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_sigma_k_0_max__; ++k_0__) {
                    hyper_sigma[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 123;
            validate_non_negative_index("hyper_phi", "logical_eq(obs_model, 3)", logical_eq(obs_model, 3));
            validate_non_negative_index("hyper_phi", "3", 3);
            context__.validate_dims("data initialization", "hyper_phi", "double", context__.to_vec(logical_eq(obs_model, 3),3));
            hyper_phi = std::vector<std::vector<double> >(logical_eq(obs_model, 3), std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("hyper_phi");
            pos__ = 0;
            size_t hyper_phi_k_0_max__ = logical_eq(obs_model, 3);
            size_t hyper_phi_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < hyper_phi_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_phi_k_0_max__; ++k_0__) {
                    hyper_phi[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 124;
            validate_non_negative_index("hyper_gamma", "logical_eq(obs_model, 5)", logical_eq(obs_model, 5));
            validate_non_negative_index("hyper_gamma", "2", 2);
            context__.validate_dims("data initialization", "hyper_gamma", "double", context__.to_vec(logical_eq(obs_model, 5),2));
            hyper_gamma = std::vector<std::vector<double> >(logical_eq(obs_model, 5), std::vector<double>(2, double(0)));
            vals_r__ = context__.vals_r("hyper_gamma");
            pos__ = 0;
            size_t hyper_gamma_k_0_max__ = logical_eq(obs_model, 5);
            size_t hyper_gamma_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < hyper_gamma_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hyper_gamma_k_0_max__; ++k_0__) {
                    hyper_gamma[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 128;
            validate_non_negative_index("alpha", "num_comps", num_comps);
            num_params_r__ += (1 * num_comps);
            current_statement_begin__ = 129;
            validate_non_negative_index("ell", "num_ell", num_ell);
            num_params_r__ += (1 * num_ell);
            current_statement_begin__ = 130;
            validate_non_negative_index("wrp", "num_ns", num_ns);
            num_params_r__ += (1 * num_ns);
            current_statement_begin__ = 131;
            validate_non_negative_index("beta", "num_bt", num_bt);
            validate_non_negative_index("beta", "logical_gt(num_heter, 0)", logical_gt(num_heter, 0));
            num_params_r__ += (num_bt * logical_gt(num_heter, 0));
            current_statement_begin__ = 132;
            validate_non_negative_index("teff_raw", "num_bt", num_bt);
            validate_non_negative_index("teff_raw", "logical_gt(num_uncrt, 0)", logical_gt(num_uncrt, 0));
            num_params_r__ += (num_bt * logical_gt(num_uncrt, 0));
            current_statement_begin__ = 133;
            validate_non_negative_index("sigma", "logical_eq(obs_model, 1)", logical_eq(obs_model, 1));
            num_params_r__ += (1 * logical_eq(obs_model, 1));
            current_statement_begin__ = 134;
            validate_non_negative_index("phi", "logical_eq(obs_model, 3)", logical_eq(obs_model, 3));
            num_params_r__ += (1 * logical_eq(obs_model, 3));
            current_statement_begin__ = 135;
            validate_non_negative_index("gamma", "logical_eq(obs_model, 5)", logical_eq(obs_model, 5));
            num_params_r__ += (1 * logical_eq(obs_model, 5));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_parameter_prior() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 128;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "num_comps", num_comps);
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec(num_comps));
        std::vector<double> alpha(num_comps, double(0));
        size_t alpha_k_0_max__ = num_comps;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            alpha[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_i_0_max__ = num_comps;
        for (size_t i_0__ = 0; i_0__ < alpha_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(1e-12, alpha[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 129;
        if (!(context__.contains_r("ell")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ell missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ell");
        pos__ = 0U;
        validate_non_negative_index("ell", "num_ell", num_ell);
        context__.validate_dims("parameter initialization", "ell", "double", context__.to_vec(num_ell));
        std::vector<double> ell(num_ell, double(0));
        size_t ell_k_0_max__ = num_ell;
        for (size_t k_0__ = 0; k_0__ < ell_k_0_max__; ++k_0__) {
            ell[k_0__] = vals_r__[pos__++];
        }
        size_t ell_i_0_max__ = num_ell;
        for (size_t i_0__ = 0; i_0__ < ell_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(1e-12, ell[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ell: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 130;
        if (!(context__.contains_r("wrp")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable wrp missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("wrp");
        pos__ = 0U;
        validate_non_negative_index("wrp", "num_ns", num_ns);
        context__.validate_dims("parameter initialization", "wrp", "double", context__.to_vec(num_ns));
        std::vector<double> wrp(num_ns, double(0));
        size_t wrp_k_0_max__ = num_ns;
        for (size_t k_0__ = 0; k_0__ < wrp_k_0_max__; ++k_0__) {
            wrp[k_0__] = vals_r__[pos__++];
        }
        size_t wrp_i_0_max__ = num_ns;
        for (size_t i_0__ = 0; i_0__ < wrp_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(1e-12, wrp[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable wrp: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 131;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "num_bt", num_bt);
        validate_non_negative_index("beta", "logical_gt(num_heter, 0)", logical_gt(num_heter, 0));
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(logical_gt(num_heter, 0),num_bt));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta(logical_gt(num_heter, 0), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_bt));
        size_t beta_j_1_max__ = num_bt;
        size_t beta_k_0_max__ = logical_gt(num_heter, 0);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                beta[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t beta_i_0_max__ = logical_gt(num_heter, 0);
        for (size_t i_0__ = 0; i_0__ < beta_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lub_unconstrain(1e-12, (1 - 1e-12), beta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 132;
        if (!(context__.contains_r("teff_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable teff_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("teff_raw");
        pos__ = 0U;
        validate_non_negative_index("teff_raw", "num_bt", num_bt);
        validate_non_negative_index("teff_raw", "logical_gt(num_uncrt, 0)", logical_gt(num_uncrt, 0));
        context__.validate_dims("parameter initialization", "teff_raw", "vector_d", context__.to_vec(logical_gt(num_uncrt, 0),num_bt));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > teff_raw(logical_gt(num_uncrt, 0), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_bt));
        size_t teff_raw_j_1_max__ = num_bt;
        size_t teff_raw_k_0_max__ = logical_gt(num_uncrt, 0);
        for (size_t j_1__ = 0; j_1__ < teff_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < teff_raw_k_0_max__; ++k_0__) {
                teff_raw[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t teff_raw_i_0_max__ = logical_gt(num_uncrt, 0);
        for (size_t i_0__ = 0; i_0__ < teff_raw_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lub_unconstrain(1e-12, (1 - 1e-12), teff_raw[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable teff_raw: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 133;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "logical_eq(obs_model, 1)", logical_eq(obs_model, 1));
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec(logical_eq(obs_model, 1)));
        std::vector<double> sigma(logical_eq(obs_model, 1), double(0));
        size_t sigma_k_0_max__ = logical_eq(obs_model, 1);
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            sigma[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_i_0_max__ = logical_eq(obs_model, 1);
        for (size_t i_0__ = 0; i_0__ < sigma_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(1e-12, sigma[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 134;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "logical_eq(obs_model, 3)", logical_eq(obs_model, 3));
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec(logical_eq(obs_model, 3)));
        std::vector<double> phi(logical_eq(obs_model, 3), double(0));
        size_t phi_k_0_max__ = logical_eq(obs_model, 3);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            phi[k_0__] = vals_r__[pos__++];
        }
        size_t phi_i_0_max__ = logical_eq(obs_model, 3);
        for (size_t i_0__ = 0; i_0__ < phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(1e-12, phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 135;
        if (!(context__.contains_r("gamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        validate_non_negative_index("gamma", "logical_eq(obs_model, 5)", logical_eq(obs_model, 5));
        context__.validate_dims("parameter initialization", "gamma", "double", context__.to_vec(logical_eq(obs_model, 5)));
        std::vector<double> gamma(logical_eq(obs_model, 5), double(0));
        size_t gamma_k_0_max__ = logical_eq(obs_model, 5);
        for (size_t k_0__ = 0; k_0__ < gamma_k_0_max__; ++k_0__) {
            gamma[k_0__] = vals_r__[pos__++];
        }
        size_t gamma_i_0_max__ = logical_eq(obs_model, 5);
        for (size_t i_0__ = 0; i_0__ < gamma_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(1e-12, (1 - 1e-12), gamma[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 128;
            std::vector<local_scalar_t__> alpha;
            size_t alpha_d_0_max__ = num_comps;
            alpha.reserve(alpha_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha.push_back(in__.scalar_lb_constrain(1e-12, lp__));
                else
                    alpha.push_back(in__.scalar_lb_constrain(1e-12));
            }
            current_statement_begin__ = 129;
            std::vector<local_scalar_t__> ell;
            size_t ell_d_0_max__ = num_ell;
            ell.reserve(ell_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ell_d_0_max__; ++d_0__) {
                if (jacobian__)
                    ell.push_back(in__.scalar_lb_constrain(1e-12, lp__));
                else
                    ell.push_back(in__.scalar_lb_constrain(1e-12));
            }
            current_statement_begin__ = 130;
            std::vector<local_scalar_t__> wrp;
            size_t wrp_d_0_max__ = num_ns;
            wrp.reserve(wrp_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < wrp_d_0_max__; ++d_0__) {
                if (jacobian__)
                    wrp.push_back(in__.scalar_lb_constrain(1e-12, lp__));
                else
                    wrp.push_back(in__.scalar_lb_constrain(1e-12));
            }
            current_statement_begin__ = 131;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > beta;
            size_t beta_d_0_max__ = logical_gt(num_heter, 0);
            beta.reserve(beta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta.push_back(in__.vector_lub_constrain(1e-12, (1 - 1e-12), num_bt, lp__));
                else
                    beta.push_back(in__.vector_lub_constrain(1e-12, (1 - 1e-12), num_bt));
            }
            current_statement_begin__ = 132;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > teff_raw;
            size_t teff_raw_d_0_max__ = logical_gt(num_uncrt, 0);
            teff_raw.reserve(teff_raw_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < teff_raw_d_0_max__; ++d_0__) {
                if (jacobian__)
                    teff_raw.push_back(in__.vector_lub_constrain(1e-12, (1 - 1e-12), num_bt, lp__));
                else
                    teff_raw.push_back(in__.vector_lub_constrain(1e-12, (1 - 1e-12), num_bt));
            }
            current_statement_begin__ = 133;
            std::vector<local_scalar_t__> sigma;
            size_t sigma_d_0_max__ = logical_eq(obs_model, 1);
            sigma.reserve(sigma_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma.push_back(in__.scalar_lb_constrain(1e-12, lp__));
                else
                    sigma.push_back(in__.scalar_lb_constrain(1e-12));
            }
            current_statement_begin__ = 134;
            std::vector<local_scalar_t__> phi;
            size_t phi_d_0_max__ = logical_eq(obs_model, 3);
            phi.reserve(phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    phi.push_back(in__.scalar_lb_constrain(1e-12, lp__));
                else
                    phi.push_back(in__.scalar_lb_constrain(1e-12));
            }
            current_statement_begin__ = 135;
            std::vector<local_scalar_t__> gamma;
            size_t gamma_d_0_max__ = logical_eq(obs_model, 5);
            gamma.reserve(gamma_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < gamma_d_0_max__; ++d_0__) {
                if (jacobian__)
                    gamma.push_back(in__.scalar_lub_constrain(1e-12, (1 - 1e-12), lp__));
                else
                    gamma.push_back(in__.scalar_lub_constrain(1e-12, (1 - 1e-12)));
            }
            // transformed parameters
            current_statement_begin__ = 140;
            validate_non_negative_index("teff", "num_bt", num_bt);
            validate_non_negative_index("teff", "logical_gt(num_uncrt, 0)", logical_gt(num_uncrt, 0));
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > teff(logical_gt(num_uncrt, 0), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(num_bt));
            stan::math::initialize(teff, DUMMY_VAR__);
            stan::math::fill(teff, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 141;
            for (int j = 1; j <= num_uncrt; ++j) {
                current_statement_begin__ = 142;
                stan::model::assign(teff, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            add(get_base1(teff_lb, j, "teff_lb", 1), elt_multiply(subtract(get_base1(teff_ub, j, "teff_ub", 1), get_base1(teff_lb, j, "teff_lb", 1)), get_base1(teff_raw, j, "teff_raw", 1))), 
                            "assigning variable teff");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 140;
            size_t teff_k_0_max__ = logical_gt(num_uncrt, 0);
            size_t teff_j_1_max__ = num_bt;
            for (size_t k_0__ = 0; k_0__ < teff_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < teff_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(teff[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: teff" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable teff: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 149;
            for (int j = 1; j <= num_comps; ++j) {
                current_statement_begin__ = 150;
                lp_accum__.add(STAN_log_prior(get_base1(alpha, j, "alpha", 1), get_base1(prior_alpha, j, "prior_alpha", 1), get_base1(hyper_alpha, j, "hyper_alpha", 1), pstream__));
            }
            current_statement_begin__ = 154;
            for (int j = 1; j <= num_ell; ++j) {
                current_statement_begin__ = 155;
                lp_accum__.add(STAN_log_prior(get_base1(ell, j, "ell", 1), get_base1(prior_ell, j, "prior_ell", 1), get_base1(hyper_ell, j, "hyper_ell", 1), pstream__));
            }
            current_statement_begin__ = 159;
            for (int j = 1; j <= num_ns; ++j) {
                current_statement_begin__ = 160;
                lp_accum__.add(STAN_log_prior(get_base1(wrp, j, "wrp", 1), get_base1(prior_wrp, j, "prior_wrp", 1), get_base1(hyper_wrp, j, "hyper_wrp", 1), pstream__));
            }
            current_statement_begin__ = 164;
            for (int j = 1; j <= num_heter; ++j) {
                current_statement_begin__ = 165;
                lp_accum__.add(beta_log(get_base1(beta, j, "beta", 1), get_base1(get_base1(hyper_beta, j, "hyper_beta", 1), 1, "hyper_beta", 2), get_base1(get_base1(hyper_beta, j, "hyper_beta", 1), 2, "hyper_beta", 2)));
            }
            current_statement_begin__ = 169;
            for (int j = 1; j <= num_uncrt; ++j) {
                {
                current_statement_begin__ = 170;
                int ptype(0);
                (void) ptype;  // dummy to suppress unused var warning
                stan::math::fill(ptype, std::numeric_limits<int>::min());
                stan::math::assign(ptype,get_base1(get_base1(prior_teff, 1, "prior_teff", 1), 1, "prior_teff", 2));
                current_statement_begin__ = 171;
                int is_backwards(0);
                (void) is_backwards;  // dummy to suppress unused var warning
                stan::math::fill(is_backwards, std::numeric_limits<int>::min());
                stan::math::assign(is_backwards,get_base1(get_base1(prior_teff, 1, "prior_teff", 1), 2, "prior_teff", 2));
                current_statement_begin__ = 172;
                local_scalar_t__ direction(DUMMY_VAR__);
                (void) direction;  // dummy to suppress unused var warning
                stan::math::initialize(direction, DUMMY_VAR__);
                stan::math::fill(direction, DUMMY_VAR__);
                stan::math::assign(direction,pow(-(1.0), is_backwards));
                current_statement_begin__ = 173;
                validate_non_negative_index("tx", "num_bt", num_bt);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tx(num_bt);
                stan::math::initialize(tx, DUMMY_VAR__);
                stan::math::fill(tx, DUMMY_VAR__);
                stan::math::assign(tx,multiply(direction, subtract(get_base1(teff, 1, "teff", 1), get_base1(teff_zero, 1, "teff_zero", 1))));
                current_statement_begin__ = 174;
                for (int k = 1; k <= num_bt; ++k) {
                    current_statement_begin__ = 175;
                    lp_accum__.add(STAN_log_prior(get_base1(tx, k, "tx", 1), static_cast<std::vector<int> >(stan::math::array_builder<int >().add(ptype).add(0).array()), get_base1(hyper_teff, 1, "hyper_teff", 1), pstream__));
                }
                }
            }
            current_statement_begin__ = 178;
            if (as_bool(logical_eq(obs_model, 1))) {
                current_statement_begin__ = 179;
                lp_accum__.add(STAN_log_prior(get_base1(sigma, 1, "sigma", 1), get_base1(prior_sigma, 1, "prior_sigma", 1), get_base1(hyper_sigma, 1, "hyper_sigma", 1), pstream__));
            } else if (as_bool(logical_eq(obs_model, 3))) {
                current_statement_begin__ = 181;
                lp_accum__.add(STAN_log_prior(get_base1(phi, 1, "phi", 1), get_base1(prior_phi, 1, "prior_phi", 1), get_base1(hyper_phi, 1, "hyper_phi", 1), pstream__));
            } else if (as_bool(logical_eq(obs_model, 5))) {
                current_statement_begin__ = 183;
                lp_accum__.add(beta_log(get_base1(gamma, 1, "gamma", 1), get_base1(get_base1(hyper_gamma, 1, "hyper_gamma", 1), 2, "hyper_gamma", 2), get_base1(get_base1(hyper_gamma, 1, "hyper_gamma", 1), 2, "hyper_gamma", 2)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("ell");
        names__.push_back("wrp");
        names__.push_back("beta");
        names__.push_back("teff_raw");
        names__.push_back("sigma");
        names__.push_back("phi");
        names__.push_back("gamma");
        names__.push_back("teff");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(num_comps);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_ell);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_ns);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(num_heter, 0));
        dims__.push_back(num_bt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(num_uncrt, 0));
        dims__.push_back(num_bt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(obs_model, 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(obs_model, 3));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(obs_model, 5));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(num_uncrt, 0));
        dims__.push_back(num_bt);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_parameter_prior_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> alpha;
        size_t alpha_d_0_max__ = num_comps;
        alpha.reserve(alpha_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
            alpha.push_back(in__.scalar_lb_constrain(1e-12));
        }
        size_t alpha_k_0_max__ = num_comps;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }
        std::vector<double> ell;
        size_t ell_d_0_max__ = num_ell;
        ell.reserve(ell_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ell_d_0_max__; ++d_0__) {
            ell.push_back(in__.scalar_lb_constrain(1e-12));
        }
        size_t ell_k_0_max__ = num_ell;
        for (size_t k_0__ = 0; k_0__ < ell_k_0_max__; ++k_0__) {
            vars__.push_back(ell[k_0__]);
        }
        std::vector<double> wrp;
        size_t wrp_d_0_max__ = num_ns;
        wrp.reserve(wrp_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < wrp_d_0_max__; ++d_0__) {
            wrp.push_back(in__.scalar_lb_constrain(1e-12));
        }
        size_t wrp_k_0_max__ = num_ns;
        for (size_t k_0__ = 0; k_0__ < wrp_k_0_max__; ++k_0__) {
            vars__.push_back(wrp[k_0__]);
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta;
        size_t beta_d_0_max__ = logical_gt(num_heter, 0);
        beta.reserve(beta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_d_0_max__; ++d_0__) {
            beta.push_back(in__.vector_lub_constrain(1e-12, (1 - 1e-12), num_bt));
        }
        size_t beta_j_1_max__ = num_bt;
        size_t beta_k_0_max__ = logical_gt(num_heter, 0);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                vars__.push_back(beta[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > teff_raw;
        size_t teff_raw_d_0_max__ = logical_gt(num_uncrt, 0);
        teff_raw.reserve(teff_raw_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < teff_raw_d_0_max__; ++d_0__) {
            teff_raw.push_back(in__.vector_lub_constrain(1e-12, (1 - 1e-12), num_bt));
        }
        size_t teff_raw_j_1_max__ = num_bt;
        size_t teff_raw_k_0_max__ = logical_gt(num_uncrt, 0);
        for (size_t j_1__ = 0; j_1__ < teff_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < teff_raw_k_0_max__; ++k_0__) {
                vars__.push_back(teff_raw[k_0__](j_1__));
            }
        }
        std::vector<double> sigma;
        size_t sigma_d_0_max__ = logical_eq(obs_model, 1);
        sigma.reserve(sigma_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
            sigma.push_back(in__.scalar_lb_constrain(1e-12));
        }
        size_t sigma_k_0_max__ = logical_eq(obs_model, 1);
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        std::vector<double> phi;
        size_t phi_d_0_max__ = logical_eq(obs_model, 3);
        phi.reserve(phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
            phi.push_back(in__.scalar_lb_constrain(1e-12));
        }
        size_t phi_k_0_max__ = logical_eq(obs_model, 3);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            vars__.push_back(phi[k_0__]);
        }
        std::vector<double> gamma;
        size_t gamma_d_0_max__ = logical_eq(obs_model, 5);
        gamma.reserve(gamma_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < gamma_d_0_max__; ++d_0__) {
            gamma.push_back(in__.scalar_lub_constrain(1e-12, (1 - 1e-12)));
        }
        size_t gamma_k_0_max__ = logical_eq(obs_model, 5);
        for (size_t k_0__ = 0; k_0__ < gamma_k_0_max__; ++k_0__) {
            vars__.push_back(gamma[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 140;
            validate_non_negative_index("teff", "num_bt", num_bt);
            validate_non_negative_index("teff", "logical_gt(num_uncrt, 0)", logical_gt(num_uncrt, 0));
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > teff(logical_gt(num_uncrt, 0), Eigen::Matrix<double, Eigen::Dynamic, 1>(num_bt));
            stan::math::initialize(teff, DUMMY_VAR__);
            stan::math::fill(teff, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 141;
            for (int j = 1; j <= num_uncrt; ++j) {
                current_statement_begin__ = 142;
                stan::model::assign(teff, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            add(get_base1(teff_lb, j, "teff_lb", 1), elt_multiply(subtract(get_base1(teff_ub, j, "teff_ub", 1), get_base1(teff_lb, j, "teff_lb", 1)), get_base1(teff_raw, j, "teff_raw", 1))), 
                            "assigning variable teff");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t teff_j_1_max__ = num_bt;
                size_t teff_k_0_max__ = logical_gt(num_uncrt, 0);
                for (size_t j_1__ = 0; j_1__ < teff_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < teff_k_0_max__; ++k_0__) {
                        vars__.push_back(teff[k_0__](j_1__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_parameter_prior";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_k_0_max__ = num_comps;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ell_k_0_max__ = num_ell;
        for (size_t k_0__ = 0; k_0__ < ell_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ell" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t wrp_k_0_max__ = num_ns;
        for (size_t k_0__ = 0; k_0__ < wrp_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "wrp" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = num_bt;
        size_t beta_k_0_max__ = logical_gt(num_heter, 0);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t teff_raw_j_1_max__ = num_bt;
        size_t teff_raw_k_0_max__ = logical_gt(num_uncrt, 0);
        for (size_t j_1__ = 0; j_1__ < teff_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < teff_raw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "teff_raw" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_k_0_max__ = logical_eq(obs_model, 1);
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = logical_eq(obs_model, 3);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_k_0_max__ = logical_eq(obs_model, 5);
        for (size_t k_0__ = 0; k_0__ < gamma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t teff_j_1_max__ = num_bt;
            size_t teff_k_0_max__ = logical_gt(num_uncrt, 0);
            for (size_t j_1__ = 0; j_1__ < teff_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < teff_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "teff" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_k_0_max__ = num_comps;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ell_k_0_max__ = num_ell;
        for (size_t k_0__ = 0; k_0__ < ell_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ell" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t wrp_k_0_max__ = num_ns;
        for (size_t k_0__ = 0; k_0__ < wrp_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "wrp" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = num_bt;
        size_t beta_k_0_max__ = logical_gt(num_heter, 0);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t teff_raw_j_1_max__ = num_bt;
        size_t teff_raw_k_0_max__ = logical_gt(num_uncrt, 0);
        for (size_t j_1__ = 0; j_1__ < teff_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < teff_raw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "teff_raw" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_k_0_max__ = logical_eq(obs_model, 1);
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = logical_eq(obs_model, 3);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_k_0_max__ = logical_eq(obs_model, 5);
        for (size_t k_0__ = 0; k_0__ < gamma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t teff_j_1_max__ = num_bt;
            size_t teff_k_0_max__ = logical_gt(num_uncrt, 0);
            for (size_t j_1__ = 0; j_1__ < teff_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < teff_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "teff" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_parameter_prior_namespace::model_parameter_prior stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
